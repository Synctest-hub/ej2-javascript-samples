{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/query-builder/template/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-12 control-section\">\n    <div id=\"querybuilder\" class=\"row\">\n    </div>\n    <div class=\"e-query-preview\">\n        <div class=\"e-tab-section\">\n            <div>\n                <div class=\"e-sample-resize-container\">\n                    <div id=\"tab_orientation\">\n                        <div class=\"e-tab-header\">\n                            <div>CEL</div>\n                            <div>SpEL</div>\n                        </div>\n\n                        <div class=\"e-content\" id=\"e-query-preview\">\n                            <div class=\"content\">\n                                <div>\n                                    <div class=\"e-preview-options\" style=\"height: 40px;\">\n                                        <div class=\"copy-tooltip\" style=\"display: none;\" id=\"copy-cel\">\n                                            <div id=\"celTooltip\">\n                                                <div class=\"e-icons copycode\"></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div>\n                                        <textarea readonly=\"\" class=\"e-text-area-content e-cel-content\"></textarea>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"content\">\n                                <div>\n                                    <div class=\"e-preview-options\" style=\"height: 40px;\">\n                                        <div class=\"copy-tooltip\" style=\"display: none;\" id=\"copy-spel\">\n                                            <div id=\"spelTooltip\">\n                                                <div class=\"e-icons copycode\"></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div>\n                                        <textarea readonly=\"\" class=\"e-text-area-content e-spel-content\"></textarea>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n","index.js":"{{ripple}}/**\n * Template sample\n */\n\n\n    var elem;\n    var dropDownObj;\n    var boxObj;\n    var ticksSlider;\n    var content;\n    var selectedIndex = 0;\n    var filter = [{\n        field: 'Category',\n        label: 'Category',\n        type: 'string'\n    },\n    {\n        field: 'PaymentMode',\n        label: 'PaymentMode',\n        type: 'string',\n        operators: [\n            { key: 'Equal', value: 'equal' },\n            { key: 'Not Equal', value: 'notequal' }\n        ],\n        template: {\n            create: function () {\n                elem = document.createElement('input');\n                elem.setAttribute('type', 'text');\n                return elem;\n            },\n            destroy: function (args) {\n                var dropdown = ej.base.getComponent(document.getElementById(args.elementId), 'dropdownlist');\n                if (dropdown) {\n                    dropdown.destroy();\n                }\n            },\n            write: function (args) {\n                var ds = ['Cash', 'Debit Card', 'Credit Card', 'Net Banking', 'Wallet'];\n                    dropDownObj = new ej.dropdowns.DropDownList({\n                        dataSource: ds,\n                        value: args.values ? args.values : ds[0],\n                        change: function (e) {\n                        qryBldrObj.notifyChange(e.itemData.value, e.element);\n                        }\n                    });\n                    dropDownObj.appendTo('#' + args.elements.id);\n            }\n        }\n    },\n    {\n        field: 'TransactionType',\n        label: 'TransactionType',\n        type: 'string',\n        operators: [{\n            key: 'Equal',\n            value: 'equal'\n        }, {\n            key: 'Not Equal',\n            value: 'notequal'\n        }],\n        template: {\n            create: function () {\n                elem = document.createElement('input');\n                elem.setAttribute('type', 'checkbox');\n                return elem;\n            },\n            destroy: function (args) {\n                ej.base.getComponent(document.getElementById(args.elementId), 'checkbox').destroy();\n            },\n            write: function (args) {\n                var checked = args.values === 'IsExpensive' ? true : false;\n                boxObj = new ej.buttons.CheckBox({\n                    label: 'Is Expensive',\n                    checked: checked,\n                    change: function (e) {\n                        qryBldrObj.notifyChange(e.checked ? 'expensive' : 'income', e.event.target);\n                    }\n                });\n                boxObj.appendTo('#' + args.elements.id);\n            }\n        }\n    },\n    {\n        field: 'Description',\n        label: 'Description',\n        type: 'string'\n    },\n    {\n        field: 'Date',\n        label: 'Date',\n        type: 'date'\n    },\n    {\n        field: 'Amount',\n        label: 'Amount',\n        type: 'number',\n        operators: [\n            { key: 'Equal', value: 'equal' },\n            { key: 'Greater than', value: 'greaterthan' },\n            { key: 'Less than', value: 'lessthan' },\n            { key: 'Less than or equal', value: 'lessthanorequal' },\n            { key: 'Greater than or equal', value: 'greaterthanorequal' },\n            { key: 'Not equal', value: 'notequal' }\n        ],\n        template: {\n            create: function () {\n                elem = document.createElement('div');\n                elem.setAttribute('class', 'ticks_slider');\n                return elem;\n            },\n            destroy: function (args) {\n                ej.base.getComponent(document.getElementById(args.elementId), 'slider').destroy();\n            },\n            write: function (args) {\n                ticksSlider = new ej.inputs.Slider({\n                    value: args.values,\n                    min: 0,\n                    max: 100,\n                    tooltip: { isVisible: true, placement: 'Before', showOn: 'Hover' },\n                    type: 'MinRange',\n                    change: function (e) {\n                        if (e.isInteracted) {\n                            qryBldrObj.notifyChange(e.value, args.elements);\n                        }\n                    }\n                });\n                ticksSlider.appendTo('#' + args.elements.id);\n            }\n        }\n    }\n    ];\n    var importRules = {\n        'condition': 'and',\n        'rules': [{\n            'label': 'Category',\n            'field': 'Category',\n            'type': 'string',\n            'operator': 'in',\n            'value': ['Clothing']\n        },\n        {\n            'condition': 'or',\n            'rules': [{\n                'label': 'TransactionType',\n                'field': 'TransactionType',\n                'type': 'string',\n                'operator': 'equal',\n                'value': 'Income'\n            },\n            {\n                'label': 'PaymentMode',\n                'field': 'PaymentMode',\n                'type': 'string',\n                'operator': 'equal',\n                'value': 'Cash'\n            }\n            ]\n        }, {\n            'label': 'Amount',\n            'field': 'Amount',\n            'type': 'number',\n            'operator': 'equal',\n            'value': 10\n        }\n        ]\n    };\n    var qryBldrObj = new ej.querybuilder.QueryBuilder({\n        dataSource: window.expenseData,\n        columns: filter,\n        width: '100%',\n        rule: importRules,\n        ruleChange: updateContentTemplate\n    });\n    qryBldrObj.appendTo('#querybuilder');\n    var tabObj = new ej.navigations.Tab({\n        height: 320,\n        created: updateCELContentTemplate,\n        selected: tabChange\n    });\n    tabObj.appendTo('#tab_orientation');\n    var celTooltip = new ej.popups.Tooltip({\n        opensOn: 'Click',\n        content: 'Copied to clipboard'\n    });\n    celTooltip.appendTo('#celTooltip');\n    var spelTooltip = new ej.popups.Tooltip({\n        opensOn: 'Click',\n        content: 'Copied to clipboard'\n    });\n    spelTooltip.appendTo('#spelTooltip');\n    if (document.getElementById('right-pane')) {\n        document.getElementById('right-pane').addEventListener('scroll', onScroll);\n    }\n    // Handler used to reposition the tooltip on page scroll\n    function onScroll() {\n        var tooltip = document.getElementsByClassName('e-handle e-control e-tooltip'), tooltipObj;\n        for (var i = 0, len = tooltip.length; i < len; i++) {\n\t\t\ttooltipObj = tooltip[i].ej2_instances[0];\n            // Refreshing each slider tooltip object position\n\t\t\ttooltipObj.refresh(tooltipObj.element);\n\t\t}\n    }\n    function tabChange(args) {\n        selectedIndex = args.selectedIndex;\n        selectedContent = args.selectedContent;\n        setTimeout(function () {\n            updateContentTemplate();\n        }, 100);\n    }\n    function updateContentTemplate() {\n        switch (selectedIndex) {\n        case 0:\n            updateCELContentTemplate();\n            break;\n        case 1:\n            updateSpCELContentTemplate();\n            break;\n        }\n    }\n    function updateCELContentTemplate() {\n        var allRules = qryBldrObj.getValidRules();\n        var celQuery = '';\n        celQuery = getCELQuery(allRules, celQuery);\n        celQuery = getCELQuery(allRules, celQuery);\n        content = celQuery;\n        document.getElementsByClassName('e-cel-content')[0].textContent = content;\n        document.getElementsByClassName('e-cel-content')[0].style.display = 'block';\n    }\n    function updateSpCELContentTemplate() {\n        var allRules = qryBldrObj.getValidRules();\n        var spelQuery = '';\n        content = getSpELQuery(allRules, spelQuery);\n        content = getSpELQuery(allRules, spelQuery);\n        document.getElementsByClassName('e-spel-content')[0].textContent = content;\n        document.getElementsByClassName('e-spel-content')[0].style.display = 'block';\n    }\n    var queryContentPreview = document.getElementById('e-query-preview');\n    if (queryContentPreview) {\n        queryContentPreview.addEventListener('mouseenter', function () {\n            var elem = document.getElementsByClassName(\"copy-tooltip\");\n            for (var i = 0; i < elem.length; i++) {\n            if (tabObj.selectedItem == i) {\n                elem[i].style.display = 'block';\n            }\n            }\n        });\n        queryContentPreview.addEventListener('mouseleave', function () {\n            var elem = document.getElementsByClassName(\"copy-tooltip\");\n            for (var i = 0; i < elem.length; i++) {\n                if (tabObj.selectedItem == i) {\n                    elem[i].style.display = 'none';\n                }\n            }\n        });\n        var copyCelElem = document.getElementById('copy-cel');\n        copyCelElem.addEventListener('click', function (args) {\n            navigator.clipboard.writeText(content);\n            setTimeout(function () {\n                ej.base.getComponent(args.target.closest('.e-tooltip'), 'tooltip').close();\n            },1000);\n        });\n        var copySpelElem = document.getElementById('copy-spel');\n        copySpelElem.addEventListener('click', function (args) {\n            navigator.clipboard.writeText(content);\n            setTimeout(function () {\n                ej.base.getComponent(args.target.closest('.e-tooltip'), 'tooltip').close();\n            },1000);\n        });\n    }\n    // Util.ts code for CEL and SpEL type queries.\n    function getCELQuery (rules, celQuery) {\n        celQuery = '';\n        celQuery = convertQuery(rules, celQuery, null, 'CEL');\n        return celQuery;\n    }\n    function getSpELQuery (rules, spELQuery) {\n        spELQuery = '';\n        spELQuery = convertQuery(rules, null, spELQuery, null);\n        return spELQuery;\n    }\n    function convertQuery(rules, celQuery, spELQuery, type) {\n        celQuery = celQuery || ''; // Set celQuery to an empty string if not provided\n        spELQuery = spELQuery || ''; // Set spELQuery to an empty string if not provided\n        type = type || '';\n        var isRoot = false;\n        var rule;\n        var celOperators = {\n            equal: '==', notequal: '!=', greaterthan: '>', greaterthanorequal: '>=', lessthan: '<', in: 'in', notin: 'in',\n            lessthanorequal: '<=', startswith: 'startsWith', endswith: 'endsWith', contains: 'contains', isnull: '== null', isnotnull: '!= null',\n            isempty: '== \"\"', isnotempty: '!= \"\"'\n        };\n        var spELOperators = {\n            equal: '==', notequal: '!=', greaterthan: '>', greaterthanorequal: '>=', lessthan: '<', in: 'in', notin: 'in',\n            lessthanorequal: '<=', startswith: 'matches', endswith: 'matches', contains: 'matches', isnull: '== null', isnotnull: '!= null',\n            isempty: '== \"\"', isnotempty: '!= \"\"'\n        };\n        if (type === 'CEL') {\n            if (!celQuery && celQuery !== '') {\n                celQuery = '';\n                isRoot = true;\n            }\n            else {\n                celQuery += '(';\n            }\n        }\n        else {\n            if (!spELQuery && spELQuery !== '') {\n                spELQuery = '';\n                isRoot = true;\n            }\n            else {\n                spELQuery += '(';\n            }\n        }\n        var condition = rules.condition;\n        if (rules.rules) {\n            for (var j = 0, jLen = rules.rules.length; j < jLen; j++) {\n                if (rules.rules[j].rules) {\n                    if (type === 'CEL') {\n                        celQuery = convertQuery(rules.rules[j], celQuery, null, 'CEL');\n                    }\n                    else {\n                        spELQuery = convertQuery(rules.rules[j], null, spELQuery, 'SpEL');\n                    }\n                }\n                else {\n                    var ruleCondition;\n                    var value;\n                    rule = rules.rules[j];\n                    var valueStr = '';\n                    var ruleOpertor = (type === 'CEL') ? celOperators[rule.operator] : spELOperators[rule.operator];\n                    var operator = rule.operator.toString();\n                    if (rule.value && typeof rule.value === 'object') {\n                        if (operator === 'between') {\n                            ruleCondition = ' ' + '&&' + ' ';\n                            if (rule.type === 'date') {\n                                valueStr += '(' + rule.field + ' >= \"' + rule.value[0] + '\"' + ruleCondition + rule.field + ' <= \"' + rule.value[1] + '\")';\n                            }\n                            else {\n                                valueStr += '(' + rule.field + ' >= ' + rule.value[0] + ruleCondition + rule.field + ' <= ' + rule.value[1] + ')';\n                            }\n                        }\n                        else if (operator === 'notbetween') {\n                            ruleCondition = ' ' + '||' + ' ';\n                            if (rule.type === 'date') {\n                                valueStr += '(' + rule.field + ' < \"' + rule.value[0] + '\"' + ruleCondition + rule.field + ' > \"' + rule.value[1] + '\")';\n                            }\n                            else {\n                                valueStr += '(' + rule.field + ' < ' + rule.value[0] + ruleCondition + rule.field + ' > ' + rule.value[1] + ')';\n                            }\n                        }\n                        else {\n                            if (type === 'CEL') {\n                                if (rule.value !== null) {\n                                    value = rule.value[0] ? rule.value[0] : \"\";\n                                    valueStr += '[\"' + value + '\"';\n                                    for (var k = 1, kLen = rule.value.length; k < kLen; k++) {\n                                        valueStr += ', \"' + rule.value[k] + '\"';\n                                    }\n                                    valueStr += ']';\n                                }\n                            }\n                            else {\n                                if (rule.value !== null) {\n                                    value = rule.value[0] ? rule.value[0] : \"\";\n                                    valueStr += '(' + rule.field + ' == \"' + value + '\"';\n                                    for (var l = 1, kLength = rule.value.length; l < kLength; l++) {\n                                        valueStr += ' or ' + rule.field + ' == \"' + rule.value[l] + '\"';\n                                    }\n                                    valueStr += ')';\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (type === 'CEL') {\n                            if (rule.type === 'number' || rule.value === 'boolean' || rule.value === null) {\n                                valueStr += rule.value;\n                            }\n                            else {\n                                valueStr += '\"' + rule.value + '\"';\n                            }\n                        }\n                        else {\n                            if (operator.indexOf('startswith') > -1) {\n                                valueStr += rule.value ? '\"^' + rule.value + '\"' : '(' + rule.value + ')';\n                            }\n                            else if (operator.indexOf('endswith') > -1) {\n                                valueStr += rule.value ? '\"' + rule.value + '$\"' : '(' + rule.value + ')';\n                            }\n                            else if (operator.indexOf('contains') > -1) {\n                                valueStr += rule.value ? '\"' + rule.value + '\"' : '(' + rule.value + ')';\n                            }\n                            else if (operator.indexOf('isempty') > -1) {\n                                valueStr += '';\n                            }\n                            else {\n                                if (rule.type === 'number' || rule.value === 'boolean' || rule.value === null) {\n                                    valueStr += rule.value;\n                                }\n                                else {\n                                    valueStr += '\"' + rule.value + '\"';\n                                }\n                            }\n                        }\n                    }\n                    if (operator.indexOf('null') > -1 || (operator.indexOf('empty') > -1)) {\n                        if (rule.field.indexOf(' ') > -1) {\n                            rule.field = '\"' + rule.field + '\"';\n                        }\n                        if (type === 'CEL') {\n                            celQuery += rule.field + ' ' + ruleOpertor;\n                        }\n                        else {\n                            spELQuery += rule.field + ' ' + ruleOpertor;\n                        }\n                    }\n                    else {\n                        if (rule.field.indexOf(' ') > -1) {\n                            rule.field = '\"' + rule.field + '\"';\n                        }\n                        if (type === 'CEL') {\n                            if (operator.indexOf('startswith') > -1 || (operator.indexOf('endswith') > -1) || (operator.indexOf('contains') > -1)) {\n                                celQuery += rule.field + '.' + ruleOpertor + '(' + valueStr + ')';\n                            }\n                            else if (operator.indexOf('between') > -1) {\n                                celQuery += valueStr;\n                            }\n                            else if (operator.indexOf('notin') > -1) {\n                                celQuery += '!(' + rule.field + ' ' + ruleOpertor + ' ' + valueStr + ')';\n                            }\n                            else {\n                                celQuery += rule.field + ' ' + ruleOpertor + ' ' + valueStr;\n                            }\n                        }\n                        else {\n                            if (operator.indexOf('between') > -1 || operator === 'in') {\n                                spELQuery += valueStr;\n                            }\n                            else if (operator.indexOf('notin') > -1) {\n                                spELQuery += '!' + valueStr;\n                            }\n                            else {\n                                spELQuery += rule.field + ' ' + ruleOpertor + ' ' + valueStr;\n                            }\n                        }\n                    }\n                    if (rule.condition && rule.condition !== '') {\n                        condition = rule.condition;\n                    }\n                }\n                if (j !== jLen - 1) {\n                    rule = rules.rules[j];\n                    if (condition === '' || (rule && rule.condition !== '' && rule.custom && (rule.custom).isCustom)) {\n                        condition = rule.condition;\n                    }\n                    if (type === 'CEL') {\n                        condition = condition.toUpperCase();\n                        if (condition === 'AND') {\n                            celQuery += ' && ';\n                        }\n                        else {\n                            celQuery += ' || ';\n                        }\n                    }\n                    else {\n                        condition = condition.toLowerCase();\n                        spELQuery += ' ' + condition + ' ';\n                    }\n                }\n            }\n        }\n        if (!isRoot) {\n            if (type === 'CEL') {\n                celQuery += ')';\n            }\n            else {\n                spELQuery += ')';\n            }\n        }\n        if (type === 'CEL') {\n            return celQuery;\n        }\n        return spELQuery;\n    }\n\n"}