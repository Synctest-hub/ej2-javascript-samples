{"index.html":"<html><head><script src=\"https://cdn.syncfusion.com/ej2/30.1.37/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/30.1.37/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style><link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.min.css\">\n            </head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div class=\"sample-container\">\n        <div class=\"default-section\">\n            <table class=\"api\">\n                <tbody>\n                    <tr>\n                        <td>\n                            <div>\n                                <select id=\"enterOption\">\n                                    <option value=\"P\">Create a new &lt;p&gt;</option>\n                                    <option value=\"DIV\">Create a new &lt;div&gt;</option>\n                                    <option value=\"BR\">Create a new &lt;br&gt;</option>\n                                </select>\n                            </div>\n                        </td>\n                        <td>\n                            <div>\n                                <select id=\"shiftEnterOption\">\n                                    <option value=\"BR\">Create a new &lt;br&gt;</option>\n                                    <option value=\"P\">Create a new &lt;p&gt;</option>\n                                    <option value=\"DIV\">Create a new &lt;div&gt;</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <br>\n            <div id=\"defaultRTE\">\n            </div>\n            <br>\n            <label>Code View </label>\n            <div id=\"codeView\" class=\"codeView\"></div>\n        </div>\n    </div>\n</div>\n\n\n\n\n<style>\n    .api {\n        width: 75%;\n    }\n    .api td {\n        padding-right: 100px;\n        margin-top: 3px;\n    }\n    @media only screen and (max-width: 600px) {\n        .api {\n            width: 100%;\n        }\n        .api td {\n            display: block;\n        }\n    }\n    @media only screen and (min-width: 600px) and (max-width: 1000px) {\n        .api {\n            width: 100%;\n        }\n    }\n    .default-section {\n        padding: 20px;\n    }\n    .codeView {\n        border: 1px solid rgba(0,0,0,0.12);\n        height: 200px;\n        width: 100%;\n    }\n    .bootstrap-dark .codeView{\n        border:1px solid rgb(80,80,80);\n    }\n    .highcontrast #codeView {\n        border:1px solid rgb(255,255,255);\n    }\n    .CodeMirror {\n        height: 190px;\n    }\n    .codeViewContent {\n        padding-left: 16px;\n    }\n    .bootstrap-dark .CodeMirror-scroll, .bootstrap5-dark .CodeMirror-scroll,.bootstrap5\\.3-dark .CodeMirror-scroll, .fluent-dark .CodeMirror-scroll, .fluent2-dark .CodeMirror-scroll, .fluent2-highcontrast .CodeMirror-scroll, .material3-dark .CodeMirror-scroll,.fabric-dark .CodeMirror-scroll, .material-dark .CodeMirror-scroll, .tailwind-dark .CodeMirror-scroll, .tailwind3-dark .CodeMirror-scroll, .highcontrast .CodeMirror-scroll{\n        color: #fff;\n    }\n    .bootstrap-dark .CodeMirror-scroll{\n    background-color: #1b1b1b;\n    }\n    .bootstrap5-dark .CodeMirror-scroll,\n    .bootstrap5\\.3-dark .CodeMirror-scroll {\n    background-color: #212529;\n    }\n    .fluent-dark .CodeMirror-scroll{\n    background-color: #1b1a19;\n    }\n    .fluent2-dark .CodeMirror-scroll{\n    background-color: #1b1a19;\n    } \n    .material3-dark .CodeMirror-scroll{\n    background-color: #1C1B1F;\n    }\n    .fabric-dark .CodeMirror-scroll{\n    background-color: #242424;\n    }\n    .material-dark .CodeMirror-scroll{\n    background-color: #383838;\n    }\n    .tailwind-dark .CodeMirror-scroll,\n    .tailwind3-dark .CodeMirror-scroll{\n    background-color:#1f2937;\n    }\n    .highcontrast .CodeMirror-scroll,\n    .fluent2-highcontrast .CodeMirror-scroll{\n    background-color:#000000;\n    }\n    .bootstrap5\\.3-dark .codeView .CodeMirror {\n        background: rgb(40, 45, 49);\n        color:#fff\n    }\n</style></div></body></html>","index.js":"import CodeMirror from 'codemirror';\n/*jshint esversion: 6 */\n/**\n * Rich Text Editor Enter Key Configuration sample.\n */\n\n    var defaultRTE = new ej.richtexteditor.RichTextEditor({\n        value: `<p>In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:</p><ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`,\n        height: 220,\n        saveInterval: 1,\n        change: onChange,\n        created: onCreate\n    });\n    defaultRTE.appendTo('#defaultRTE');\n \n    function onCreate() {\n        onChange();\n    }\n\n    function onChange () {\n        var id = defaultRTE.getID() + 'mirror-view';\n        var codeView = document.getElementById('codeView');\n        var mirrorView;\n        if (document.getElementById(id)) {\n            mirrorView = document.getElementById(id);\n            mirrorView.innerHTML = '';\n        } else {\n            mirrorView = ej.base.createElement('div', { className: 'e-content codeViewContent' });\n            mirrorView.id = id;\n            codeView.appendChild(mirrorView);\n        }\n        mirrorView.style.display = 'block';\n        var existingLink = Array.from(document.getElementsByTagName('link'))\n        .some(function(link) { return link.href.includes('codemirror.css'); });\n        if (!existingLink) {\n            var link = document.createElement('link');\n            link.rel = 'stylesheet';\n            link.href = '/src/common/lib/content/codemirror.css';\n            document.head.appendChild(link);\n        }\n        if (defaultRTE.value !== null) {\n            var script = document.createElement('script');\n            script.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.37.0/codemirror.js';\n            script.onload = function () {\n                var myCodeMirror = CodeMirror(mirrorView, {\n                value: defaultRTE.value,\n                mode: 'text/html',\n                lineWrapping: true,\n                readOnly: true\n                });\n            };\n            document.getElementsByTagName('head')[0].appendChild(script);\n        }\n    }\n    \n    var enterListObj = new ej.dropdowns.DropDownList({\n        placeholder: 'When pressing the enter key',\n        floatLabelType: 'Always',\n        change: () => {\n            if (enterListObj.value === 'DIV') {\n                defaultRTE.enterKey = 'DIV';\n                defaultRTE.value = `<div>In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:</div><ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n            } else if (enterListObj.value === 'BR') {\n                defaultRTE.enterKey = 'BR';\n                defaultRTE.value = `In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:<ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n            } else {\n                defaultRTE.enterKey = 'P';\n                defaultRTE.value = `<p>In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:</p><ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n            }\n            onChange();\n        }\n    });\n    enterListObj.appendTo('#enterOption');\n\n    var shiftEnterlistObj = new ej.dropdowns.DropDownList({\n        placeholder: 'When pressing the shift + enter key',\n        floatLabelType: 'Always',\n        change: () => {\n            if (shiftEnterlistObj.value === 'DIV') {\n                defaultRTE.shiftEnterKey = 'DIV';\n            } else if (shiftEnterlistObj.value === 'P') {\n                defaultRTE.shiftEnterKey = 'P';\n            } else {\n                defaultRTE.shiftEnterKey = 'BR';\n            }\n        }\n    });\n    shiftEnterlistObj.appendTo('#shiftEnterOption');\n"}