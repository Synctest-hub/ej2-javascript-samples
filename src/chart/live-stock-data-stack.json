{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/chart/live-stock-data/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div id=\"stock\" align=\"center\"></div>\n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style></div></body></html>","index.js":"{{ripple}}/**\n * Sample of candle updates for a few seconds.\n */\nvar value = 180;\nvar getData = function () {\n    var series = [];\n    var point;\n    for (var i = 0; i < 30; i++) {\n        value = 180 + Math.round((Math.random() * 25) * Math.sin(i * Math.PI / 8));\n        value = Math.max(140, Math.min(260, value));\n        if (value > 260) {\n            value = 260;\n        }\n        if (value < 140) {\n            value = 140;\n        }\n        var open = value + Math.round(Math.random() * 18);\n        var low = Math.min(value, open) - Math.round(Math.random() * 6);\n        var high = Math.min(220, Math.max(value, open) + Math.round(Math.random() * 15));\n        point = {\n            x: new Date(2000, 5, 2, 2, 0, i),\n            close: value,\n            open: open,\n            low: low,\n            high: high\n        };\n        series.push(point);\n    }\n    return { series: series };\n};\n\nvar data = getData().series;\nvar incVal = 0;\nvar updateVal = data.length;\nvar pointAdded = false;\nvar intervalId;\n\n\n    var chart = new ej.charts.Chart({\n        //Initializing Primary X and Y Axis\n        primaryXAxis: {\n            valueType: 'DateTime', interval: ej.base.Browser.isDevice ? 8 : 4, crosshairTooltip: { enable: true }, edgeLabelPlacement: ej.base.Browser.isDevice ? 'None' : 'Shift', majorGridLines: { width: 0 },\n            labelIntersectAction: 'Hide'\n        },\n        chartArea: { border: { width: 0 } },\n        primaryYAxis:\n        {\n            interval: 20, opposedPosition: true, minimum: 120, crosshairTooltip: { enable: true }, lineStyle: { width: 0 },\n            majorGridLines: { width: 1 }, majorTickLines: { width: 0 }\n        },\n        //Initializing Chart Series\n        series: [\n            {\n                type: 'Candle', bearFillColor: '#2ecd71', bullFillColor: '#e74c3d', columnWidth: 0.4,\n                dataSource: data, xName: 'x', low: 'low', high: 'high', open: 'open', close: 'close'\n            }\n        ],\n        width: ej.base.Browser.isDevice ? '100%' : '90%',\n        title: 'AAPL Historical',\n        crosshair: { enable: true, dashArray: '5,5' },\n        pointRender: function (args) {\n            if (args.series.chart.enableRtl) {\n                args.series.chart.annotations[0].x = 0;\n            }\n            if (pointAdded && args.series.points[args.series.points.length - 1] === args.point) {\n                var firstPoint = args.series.chart.enableRtl ? args.series.points[args.series.points.length - 1].x : args.series.points[0].x;\n                args.series.chart.annotations[0].x = new Date(firstPoint).getTime() + (args.series.chart.enableRtl ? 2000 : 1000);\n                args.series.chart.annotations[0].y = args.point.close + 0.25;\n                args.series.chart.annotations[0].content = '<div style=\"width: ' + args.series.chart.initialClipRect.width + 'px; height: 0; left: ' + \n                (ej.base.Browser.isDevice ? -10 : -16) + 'px; position: absolute;\">' +\n                '<svg width=\"100%\" height=\"2\" style=\"display: block;\">' +\n                '<line x1=\"0\" y1=\"1\" x2=\"' + args.series.chart.initialClipRect.width + '\" y2=\"1\" ' +\n                'style=\"stroke:#868180; stroke-width:0.75; stroke-dasharray:5,5;\" />' +\n                '</svg>' +\n                '</div>' +\n                '<div style=\"width: 40px; height: 18px; background-color: ' + args.fill + '; border: 1px solid rgba(48, 153, 245, 0.4); color: white; font-size: 11px; display: flex; align-items: center; justify-content: center; text-align: center; line-height: 18px; position: absolute; left: ' + \n                (args.series.chart.enableRtl ? -args.series.chart.initialClipRect : args.series.chart.initialClipRect.width - 20) + 'px; top: -9px;\">' + \n                (args.point.close).toFixed(2) +\n                '</div>';\n            }\n        },\n        annotations: [{\n            x: new Date(2000, 5, 2, 2, 0, 1),\n            region: \"Series\",\n            coordinateUnits: 'Point',\n            y: 140,\n            content: '<div></div>'\n        }],\n        load: function (args) {\n            var selectedTheme = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n            args.chart.stockClearInterval();\n\n            intervalId = setInterval(function () {\n                var container = document.getElementById('stock');\n                if (container && container.id === args.chart.element.id) {\n                    var newData1 = [];\n                    var value = 180;\n                    pointAdded = true;\n                    for (var i = 0; i < data.length; i++) {\n                        newData1.push(Object.assign({}, data[i]));\n                    }\n                    if (newData1.length > 0) {\n                        var lastIndex = newData1.length - 1;\n                        var previousClose = newData1[lastIndex].close;\n                        newData1[lastIndex].close += (Math.random() < 0.5 ? 1 : -1) * Math.random() * 25;\n                        newData1[lastIndex].close = Math.min(Math.min(Math.max(newData1[lastIndex].close, newData1[lastIndex].low + 5), newData1[lastIndex].high - 5), newData1[lastIndex].open - 2);\n                        if (previousClose === newData1[lastIndex].close) {\n                            newData1[lastIndex].close -= 5;\n                        }\n                    }\n                    if (incVal < 10) {\n                        if (chart.series.length > 0) {\n                            chart.series[0].setData(newData1);\n                            incVal++;\n                        }\n                    }\n                    else {\n                        var change = Math.round((Math.random() < 0.49 ? 1 : -1) * Math.random() * 10);\n                        value += change;\n                        if (value > 260) {\n                            value = 260;\n                        }\n                        if (value < 140) {\n                            value = 140;\n                        }\n                        var open = value + Math.round(Math.random() * 12);\n                        var low = Math.min(value, open) - Math.round(Math.random() * 8);\n                        var high = Math.max(value, open) + Math.round(Math.random() * 15);\n                        if (chart.series.length > 0) {\n                            var lastDataPointIndex = chart.series[0].dataSource.length - 1;\n                            if (lastDataPointIndex >= 0) {\n                                var timestamp = chart.series[0].dataSource[lastDataPointIndex].x;\n                                var lastTimestamp = new Date(timestamp).getTime();\n                                chart.series[0].addPoint({ x: new Date(lastTimestamp + 1000), high: high, low: low, open: open, close: value });\n                            }\n                        }\n                        incVal = 0;\n                        updateVal++;\n                    }\n                }\n                else {\n                    args.chart.stockClearInterval();\n                }\n            }, 1000);\n        },\n        stockClearInterval: function() {\n            if (intervalId) {\n                clearInterval(intervalId);\n                intervalId = null;\n            }\n        },\n        axisRangeCalculated: function (args) {\n            if (args.axis.name === 'primaryXAxis') {\n                var lastPoint = args.axis.series[0].points[args.axis.series[0].points.length - 1].x;\n                args.maximum = new Date(lastPoint).getTime() + 2500;\n                var firstPoint = args.axis.series[0].points[0].x;\n                args.minimum = new Date(firstPoint).getTime() + 500;\n            }\n        }\n    });\n    chart.appendTo('#stock');\n\n"}