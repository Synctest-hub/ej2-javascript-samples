{"data-source.js":"window.blockDataAPI = [\n    {\n        id: 'heading-block',\n        type: 'Heading',\n        props: { level: 1 },\n        content: [{\n            id: 'heading-content',\n            type: 'Text',\n            content: 'Block Editor API Demo'\n        }]\n    },\n    {\n        id: 'intro-block',\n        type: 'Paragraph',\n        content: [{\n            id: 'intro-content',\n            type: 'Text',\n            content: 'The Block Editor enables users to create, format, and organize content using various block types.'\n        }]\n    },\n    {\n        id: 'api-heading',\n        type: 'Heading',\n        props: { level: 2 },\n        content: [{\n            id: 'api-heading-content',\n            type: 'Text',\n            content: 'API Features:'\n        }]\n    },\n    {\n        id: 'api-list-1',\n        type: 'BulletList',\n        content: [{\n            id: 'api-list-1-content',\n            type: 'Text',\n            content: 'readOnly - allows to change it as a non-editable state.'\n        }]\n    },\n    {\n        id: 'api-list-2',\n        type: 'BulletList',\n        content: [{\n            id: 'api-list-2-content',\n            type: 'Text',\n            content: 'enableDragAndDrop - allows to control drag-and-drop operations within the block editor.'\n        }]\n    },\n    {\n        id: 'api-list-3',\n        type: 'BulletList',\n        content: [{\n            id: 'api-list-3-content',\n            type: 'Text',\n            content: 'enableHtmlEncode - Get the encoded string value through value property and source code panel.'\n        }]\n    },\n    {\n        id: 'api-list-4',\n        type: 'BulletList',\n        content: [{\n            id: 'api-list-4-content',\n            type: 'Text',\n            content: 'selectAllBlocks - Selects all blocks in the editor.'\n        }]\n    },\n    {\n        id: 'api-list-5',\n        type: 'BulletList',\n        content: [{\n            id: 'api-list-5-content',\n            type: 'Text',\n            content: 'focusIn - Focuses the editor.'\n        }]\n    },\n    {\n        id: 'api-list-6',\n        type: 'BulletList',\n        content: [{\n            id: 'api-list-6-content',\n            type: 'Text',\n            content: 'focusOut - Removes focus from the editor.'\n        }]\n    },\n    {\n        id: 'api-list-7',\n        type: 'BulletList',\n        content: [{\n            id: 'api-list-7-content',\n            type: 'Text',\n            content: 'getBlockCount - Gets total block count.'\n        }]\n    },\n    {\n        id: 'api-list-8',\n        type: 'BulletList',\n        content: [{\n            id: 'api-list-8-content',\n            type: 'Text',\n            content: 'getDataAsJson - Retrieves data from the editor as JSON.'\n        }]\n    },\n    {\n        id: 'api-list-9',\n        type: 'BulletList',\n        content: [{\n            id: 'api-list-8-content',\n            type: 'Text',\n            content: 'getDataAsHtml - Retrieves data from the editor as HTML.'\n        }]\n    },\n    {\n        id: 'try-it-block',\n        type: 'Paragraph',\n        content: [{\n            id: 'try-it-content',\n            type: 'Text',\n            content: 'Try it out! Use the property panel on the right to interact with the API.',\n            props: {\n                styles: {\n                    bold: true,\n                    bgColor: '#999999'\n                }\n            }\n        }]\n    }\n];\n\nwindow.blockDataOverview = [\n    {\n        id: 'heading-block',\n        type: 'Heading',\n        props: { level: 1 },\n        content: [{\n            id: 'heading-content',\n            type: 'Text',\n            content: 'Welcome to the Block Editor Demo!'\n        }]\n    },\n    {\n        id: 'intro-block',\n        type: 'Paragraph',\n        content: [{\n            id: 'intro-content',\n            type: 'Text',\n            content: 'Block Editor is a powerful rich text editor that allows you to create structured content using blocks. Each block can be formatted, moved, or transformed into different types.'\n        }]\n    },\n    {\n        id: 'styled-paragraph',\n        type: 'Paragraph',\n        content: [\n            {\n                id: 'styled-text-1',\n                type: 'Text',\n                content: 'Try selecting text to see '\n            },\n            {\n                id: 'styled-text-2',\n                type: 'Text',\n                content: 'formatting options',\n                props: {\n                    styles: {\n                        bold: true,\n                        italic: true\n                    }\n                }\n            },\n            {\n                id: 'styled-text-3',\n                type: 'Text',\n                content: ' or type '\n            },\n            {\n                id: 'styled-text-4',\n                type: 'Text',\n                content: '\"/\"',\n                props: {\n                    styles: {\n                        bgColor: '#999999',\n                        bold: true\n                    }\n                }\n            },\n            {\n                id: 'styled-text-5',\n                type: 'Text',\n                content: ' to access the command menu.'\n            }\n        ]\n    },\n    {\n        id: 'block-types-heading',\n        type: 'Heading',\n        props: { level: 1 },\n        content: [{\n            id: 'block-types-heading-content',\n            type: 'Text',\n            content: 'Block Types'\n        }]\n    },\n    {\n        id: 'quote-block',\n        type: 'Quote',\n        content: [{\n            id: 'quote-content',\n            type: 'Text',\n            content: 'The Block Editor makes document creation a seamless experience with its intuitive block-based approach.',\n            props: {\n                styles: {\n                    italic: true\n                }\n            }\n        }]\n    },\n    {\n        id: 'callout-block',\n        type: 'Callout',\n        props: {\n            children: [{\n                id: 'callout-content',\n                type: 'Paragraph',\n                content: [{\n                    id: 'callout-content-1',\n                    type: 'Text',\n                    content: 'Important: Block Editor supports various content types including Text, Link, Code, Mention, and Label.'\n                }]\n            }]\n        }\n    },\n    {\n        id: 'list-types-heading',\n        type: 'Heading',\n        props: { level: 3 },\n        content: [{\n            id: 'list-types-heading-content',\n            type: 'Text',\n            content: 'List Types'\n        }]\n    },\n    {\n        id: 'bullet-list-header',\n        type: 'BulletList',\n        content: [{\n            id: 'bullet-list-header-content',\n            type: 'Text',\n            content: 'Text blocks: Paragraph, Heading 1-4, Quote, Callout',\n            props: {\n                styles: {\n                    bold: true\n                }\n            }\n        }]\n    },\n    {\n        id: 'numbered-list',\n        type: 'NumberedList',\n        content: [{\n            id: 'numbered-list-content',\n            type: 'Text',\n            content: 'Lists: Bullet lists, Numbered lists, Check lists'\n        }]\n    },\n    {\n        id: 'check-list',\n        type: 'Checklist',\n        props: { isChecked: true },\n        content: [{\n            id: 'check-list-content',\n            type: 'Text',\n            content: 'Special blocks: Divider, Toggle, Code block'\n        }]\n    },\n    {\n        id: 'divider-block',\n        type: 'Divider',\n        content: []\n    },\n    {\n        id: 'toggle-block',\n        type: 'CollapsibleParagraph',\n        content: [{\n            id: 'toggle-content',\n            type: 'Text',\n            content: 'Click me to expand/collapse'\n        }],\n        props: {\n            isExpanded: true,\n            children: [\n                {\n                    id: 'toggle-child',\n                    type: 'Paragraph',\n                    content: [{\n                        id: 'toggle-child-content',\n                        type: 'Text',\n                        content: 'This content is inside a toggle block. Toggle blocks are useful for organizing content that can be expanded or collapsed.'\n                    }]\n                }\n            ]\n        }\n    },\n    {\n        id: 'code-block',\n        type: 'Code',\n        content: [{\n            id: 'code-content',\n            type: 'Text',\n            content: 'const editor = new BlockEditor();\\neditor.appendTo(\"#element\");'\n        }]\n    },\n    {\n        id: 'formatting-heading',\n        type: 'Heading',\n        props: { level: 4 },\n        content: [{\n            id: 'formatting-heading-content',\n            type: 'Text',\n            content: 'Text Formatting Examples'\n        }]\n    },\n    {\n        id: 'formatting-examples',\n        type: 'Paragraph',\n        content: [\n            {\n                id: 'format-bold',\n                type: 'Text',\n                content: 'Bold ',\n                props: {\n                    styles: {\n                        bold: true\n                    }\n                }\n            },\n            {\n                id: 'format-italic',\n                type: 'Text',\n                content: 'Italic ',\n                props: {\n                    styles: {\n                        italic: true\n                    }\n                }\n            },\n            {\n                id: 'format-underline',\n                type: 'Text',\n                content: 'Underline ',\n                props: {\n                    styles: {\n                        underline: true\n                    }\n                }\n            },\n            {\n                id: 'format-strikethrough',\n                type: 'Text',\n                content: 'Strikethrough ',\n                props: {\n                    styles: {\n                        strikethrough: true\n                    }\n                }\n            },\n            {\n                id: 'format-superscript',\n                type: 'Text',\n                content: 'Superscript ',\n                props: {\n                    styles: {\n                        superscript: true\n                    }\n                }\n            },\n            {\n                id: 'format-subscript',\n                type: 'Text',\n                content: 'Subscript ',\n                props: {\n                    styles: {\n                        subscript: true\n                    }\n                }\n            },\n            {\n                id: 'format-uppercase',\n                type: 'Text',\n                content: 'uppercase ',\n                props: {\n                    styles: {\n                        uppercase: true\n                    }\n                }\n            },\n            {\n                id: 'format-lowercase',\n                type: 'Text',\n                content: 'LOWERCASE ',\n                props: {\n                    styles: {\n                        lowercase: true\n                    }\n                }\n            },\n            {\n                id: 'format-color',\n                type: 'Text',\n                content: 'Color',\n                props: {\n                    styles: {\n                        color: '#00b7ffff'\n                    }\n                }\n            },\n            {\n                id: 'formta-bgcolor',\n                type: 'Text',\n                content: ' Bg Color ',\n                props: {\n                    styles: {\n                        bgColor: '#FFFF00'\n                    }\n                }\n            }\n        ]\n    },\n    {\n        id: 'link-block',\n        type: 'Paragraph',\n        content: [\n            {\n                id: 'link-text',\n                type: 'Text',\n                content: 'Visit '\n            },\n            {\n                id: 'link-content',\n                type: 'Link',\n                content: 'Syncfusion',\n                props: {\n                    url: 'https://www.syncfusion.com/',\n                    openInNewWindow: true\n                }\n            },\n            {\n                id: 'link-text-end',\n                type: 'Text',\n                content: ' for more information.'\n            }\n        ]\n    },\n    {\n        id: 'label-block',\n        type: 'Paragraph',\n        content: [\n            {\n                id: 'label-text',\n                type: 'Text',\n                content: 'This block contains an '\n            },\n            {\n                type: 'Code',\n                content: 'Inline Code'\n            },\n            {\n                type: 'Text',\n                content: ' and  '\n            },\n            {\n                id: 'progress-label',\n                type: 'Label',\n                props: { labelId: 'progress' }\n            },\n            {\n                id: 'label-text-end',\n                type: 'Text',\n                content: ' label.'\n            }\n        ]\n    },\n    {\n        id: 'try-it-block',\n        type: 'Paragraph',\n        content: [{\n            id: 'try-it-content',\n            type: 'Text',\n            content: 'Try it out! Click anywhere and start typing, or type \"/\" to see available commands.',\n            props: {\n                styles: {\n                    bold: true,\n                    bgColor: '#999999'\n                }\n            }\n        }]\n    }\n];\n\nwindow.blockDataEvents = [\n    {\n        id: 'heading-block',\n        type: 'Heading',\n        props: { level: 1 },\n        content: [{\n            id: 'heading-content',\n            type: 'Text',\n            content: 'Block Editor Events Demo'\n        }]\n    },\n    {\n        id: 'intro-block',\n        type: 'Paragraph',\n        content: [{\n            id: 'intro-content',\n            type: 'Text',\n            content: 'This sample demonstrates the events triggered by the Block Editor component. Try different actions to see the events in the trace panel.'\n        }]\n    },\n    {\n        id: 'features-heading',\n        type: 'Heading',\n        props: { level: 2 },\n        content: [{\n            id: 'features-heading-content',\n            type: 'Text',\n            content: 'Notable Features:'\n        }]\n    },\n    {\n        id: 'feature-list-1',\n        type: 'BulletList',\n        content: [{\n            id: 'feature-list-1-content',\n            type: 'Text',\n            content: 'Block-based editing with various block types (paragraphs, headings, lists, etc.)'\n        }]\n    },\n    {\n        id: 'feature-list-2',\n        type: 'BulletList',\n        content: [{\n            id: 'feature-list-2-content',\n            type: 'Text',\n            content: 'Slash commands for quick block transformation'\n        }]\n    },\n    {\n        id: 'feature-list-3',\n        type: 'BulletList',\n        content: [{\n            id: 'feature-list-3-content',\n            type: 'Text',\n            content: 'Rich text formatting with inline toolbar'\n        }]\n    },\n    {\n        id: 'feature-list-4',\n        type: 'BulletList',\n        content: [{\n            id: 'feature-list-4-content',\n            type: 'Text',\n            content: 'Hierarchical content organization with nested blocks'\n        }]\n    },\n    {\n        id: 'feature-list-5',\n        type: 'BulletList',\n        content: [{\n            id: 'feature-list-5-content',\n            type: 'Text',\n            content: 'Block manipulation (move, delete, duplicate)'\n        }]\n    },\n    {\n        id: 'feature-list-6',\n        type: 'BulletList',\n        content: [{\n            id: 'feature-list-6-content',\n            type: 'Text',\n            content: 'Keyboard shortcuts for efficient editing'\n        }]\n    },\n    {\n        id: 'feature-list-7',\n        type: 'BulletList',\n        content: [{\n            id: 'feature-list-7-content',\n            type: 'Text',\n            content: 'Drag and drop functionality for blocks'\n        }]\n    },\n    {\n        id: 'try-it-block',\n        type: 'Paragraph',\n        content: [{\n            id: 'try-it-content',\n            type: 'Text',\n            content: 'Try different actions like typing, selecting text, adding blocks, or moving blocks to see the events triggered.',\n            props: {\n                styles: {\n                    bold: true,\n                    bgColor: '#999999'\n                }\n            }\n        }]\n    }\n];\n\nwindow.mentionUsers=[\n      {\n        avatarUrl:\"//npmci.syncfusion.com/development/demos/src/block-editor/images/andrew.png\",\n        id: \"user1\",\n        user: \"Andrews\"\n    },\n    {\n        avatarUrl: \"//npmci.syncfusion.com/development/demos/src/block-editor/images/charlie.png\",\n        id: \"user2\",\n        user: \"Charlie\"\n    },\n    {\n        avatarUrl: \"//npmci.syncfusion.com/development/demos/src/block-editor/images/laura.png\",\n        id: \"user3\",\n        user: \"Laura\"\n    }\n];","index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/block-editor/events/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/30.1.37/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/30.1.37/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div>\n    <div class=\"col-lg-8 control-section\">\n        <div class=\"content-wrapper\">\n            <div id=\"events-blockeditor\"></div>\n        </div>\n    </div>\n    <div class=\"col-lg-4 property-section\">\n        <table id=\"property\" title=\"Event Trace\">\n            <tbody>\n                <tr>\n                    <td>\n                        <div class=\"eventarea\" style=\"height: 245px;overflow: auto\">\n                            <span id=\"eventLog\" style=\"word-break: normal;\"></span>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div class=\"evtbtn\" style=\"padding-bottom: 10px\">\n                            <button id=\"clear\">Clear</button>\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n\n<style>\n    #eventLog b {\n        color: #018607;\n    }\n    .material3-dark #eventLog b, .fluent-dark #eventLog b, .bootstrap5-dark #eventLog b, \n    .bootstrap5\\.3-dark #eventLog b, .bootstrap-dark #eventLog b, .tailwind-dark #eventLog b, \n    .tailwind3-dark #eventLog b, .highcontrast #eventLog b, .material-dark #eventLog b, \n    .fabric-dark #eventLog b {\n        color: #21A32E;\n    }\n    hr {\n        margin: 1px 10px 1px 0px;\n        border-top: 1px solid #eee;\n    }\n    .control-wrapper {\n        margin: 0 auto;\n    }\n</style>\n\n\n\n</div></body></html>","index.js":"{{ripple}}import './data-source';\n\n\n\n    var eventsBlockEditor = new ej.blockeditor.BlockEditor({\n        blocks: window.blockDataEvents,\n        inlineToolbar: {\n        open: (args) => {\n            appendElement('BlockEditor inline toolbar <b>opened</b><hr>');\n        },\n        close: (args) => {\n           appendElement('BlockEditor inline toolbar <b>closed</b><hr>');\n        },\n        itemClicked: (args) => {\n         appendElement(`BlockEditor inline toolbar <b>${args.item.item}</b> clicked<hr>`);\n        }\n    },\n        created: created,\n        contentChanged: contentChanged,\n        selectionChanged: selectionChanged,\n        blockAdded: blockAdded,\n        blockRemoved: blockRemoved,\n        blockMoved: blockMoved,\n        blockDrag: blockDrag,\n        blockDragStart: blockDragStart,\n        blockDrop: blockDrop,\n        focus: focusEvent,\n        blur: blurEvent,\n        beforePaste: beforePasteEvent,\n        afterPaste: afterPasteEvent,\n        undoRedoPerformed: undoRedoPerformedEvent,\n        keyActionExecuted:keyActionExecutedEvent\n    });\n    \n    eventsBlockEditor.appendTo('#events-blockeditor');\n\n    var clear = new ej.buttons.Button({});\n    clear.appendTo('#clear');\n    document.getElementById('clear').onclick = function() {\n        document.getElementById('eventLog').innerHTML = '';\n    };\n\n    function created() {\n        appendElement('BlockEditor <b>created</b> event called<hr>');\n    }\n\n    function contentChanged() {\n        appendElement('BlockEditor <b>contentChanged</b> event called<hr>');\n    }\n\n    function selectionChanged() {\n        appendElement('BlockEditor <b>selectionChanged</b> event called<hr>');\n    }\n\n    function blockAdded() {\n        appendElement('BlockEditor <b>blockAdded</b> event called<hr>');\n    }\n\n    function blockRemoved() {\n        appendElement('BlockEditor <b>blockRemoved</b> event called<hr>');\n    }\n\n    function blockMoved() {\n        appendElement('BlockEditor <b>blockMoved</b> event called<hr>');\n    }\n\n    function blockDrag() {\n        appendElement('BlockEditor <b>blockDrag</b> event called<hr>');\n    }\n\n    function blockDragStart() {\n        appendElement('BlockEditor <b>blockDragStart</b> event called<hr>');\n    }\n\n    function blockDrop() {\n        appendElement('BlockEditor <b>blockDrop</b> event called<hr>');\n    }\n\n    function focusEvent() {\n        appendElement('BlockEditor <b>focus</b> event called<hr>');\n    }\n\n    function blurEvent() {\n        appendElement('BlockEditor <b>blur</b> event called<hr>');\n    }\n\n    function beforePasteEvent() {\n        appendElement('BlockEditor <b>beforePaste</b> event called<hr>');\n    }\n\n    function afterPasteEvent() {\n        appendElement('BlockEditor <b>afterPaste</b> event called<hr>');\n    }\n\n    function undoRedoPerformedEvent(args) {\n        appendElement(`BlockEditor <b>${args.isUndo ? 'Undo' : 'Redo'}</b> action performed<hr>`);\n    }\n\n  function keyActionExecutedEvent(args) {\n    if (args.action === 'bold') {\n        appendElement('BlockEditor <b>Bold</b> keyAction clicked<hr>');\n    } else if (args.action === 'italic') {\n        appendElement('BlockEditor <b>Italic</b> keyAction clicked<hr>');\n    } else if (args.action === 'underline') {\n        appendElement('BlockEditor <b>Underline</b> keyAction clicked<hr>');\n    } else if (args.action === 'strikethrough') {\n        appendElement('BlockEditor <b>Strikethrough</b> keyAction clicked<hr>');\n    } else if (args.action === 'link') {\n        appendElement('BlockEditor <b>Insert Link</b> keyAction clicked<hr>');\n    } else if (args.action === 'cut') {\n        appendElement('BlockEditor <b>Cut</b> keyAction clicked<hr>');\n    } else if (args.action === 'copy') {\n        appendElement('BlockEditor <b>Copy</b> keyAction clicked<hr>');\n    } else if (args.action === 'paste') {\n        appendElement('BlockEditor <b>Paste</b> keyAction clicked<hr>');\n    }\n}\n\n    function appendElement(html) {\n        var span = document.createElement('span');\n        span.innerHTML = html;\n        var log = document.getElementById('eventLog');\n        log.insertBefore(span, log.firstChild);\n    }\n\n"}