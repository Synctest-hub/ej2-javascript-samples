{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/pivot-table/live-data/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div class=\"content-wrapper\">\n        <div style=\"padding-bottom: 10px\">\n            <strong style=\"display: inline-block; font-size: 14px;\">Feed Delay(ms):</strong>\n            <input type=\"text\" id=\"feeddelay\" style=\"margin-left: 7px;\">\n            <button id=\"update1\" class=\"update-btn\">Start Updating...</button>\n            <button id=\"clear\" class=\"update-btn\">Stop Updating...</button>\n        </div>\n        <div id=\"PivotView-LiveData\" style=\"height:100%;\">\n        </div>\n    </div>\n</div>\n\n<style>\n.e-pivotview {\n  width: 100%;\n  height: 100%;\n}\n\n.sb-sample-content-area {\n  min-height: 255px !important;\n}\n\n.control-section {\n  min-height: 255px !important;\n}\n\n#PivotView-LiveData_chart {\n  margin-top: 15px;\n}\n\n.bg-fade {\n  background-color: #FFEBE9 !important;\n  color: #FF3740 !important;\n}\n\n.bg-fade1 {\n  background-color: #DFFFE2 !important;\n  color: #00A653 !important;\n}\n\n.bg-fade2 {\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.update-btn {\n    margin-left: 10px;\n}\n\n/* Mobile mode */\n@media (max-width: 688px) {\n    .update-btn {\n        margin: 10px 10px 0 0;\n    }\n}\n</style>\n</div></body></html>","index.js":"{{ripple}}/**\n * Pivot Table Live Data Sample.\n */\n\n    ej.base.enableRipple(false);\n    var timerID;\n    var initial = true;\n    var previousPivotValues;\n    var updateButton = new ej.buttons.Button({}, '#update1');\n    var clearButton = new ej.buttons.Button({ disabled: true }, '#clear');\n    var feedDelayInput = new ej.inputs.NumericTextBox({\n        value: 5000,\n        format: 'N0',\n        min: 5000,\n        step: 1000,\n        width: \"150px\",\n        floatLabelType: \"Auto\"\n    }, '#feeddelay');\n    var colourScheme = ['bg-fade', 'bg-fade1', 'bg-fade2'];\n    var REGIONS = [\n        {\n            \"Region\": \"North America\",\n            \"Countries\": [\"Canada\", \"United States\", \"Mexico\"]\n        },\n        {\n            \"Region\": \"Middle East\",\n            \"Countries\": [\"Turkey\", \"Saudi Arabia\"]\n        },\n        {\n            \"Region\": \"Europe\",\n            \"Countries\": [\"Russia\", \"Germany\", \"France\", \"United Kingdom\", \"Italy\"]\n        },\n        {\n            \"Region\": \"Africa\",\n            \"Countries\": [\"South Africa\"]\n        },\n        {\n            \"Region\": \"Asia Pacific\",\n            \"Countries\": [\"Australia\", \"China\", \"India\", \"Indonesia\",\n                \"Japan\", \"South Korea\"]\n        },\n        {\n            \"Region\": \"South America\",\n            \"Countries\": [\"Brazil\"]\n        },\n    ];\n    var DATA = [\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Corn\",\n            \"Spread\": 0.01,\n            \"Open Price\": 379.50,\n            \"Price\": 379.8026,\n            \"Buy\": 379.7976,\n            \"Sell\": 379.8076,\n            \"Change\": 0.3026,\n            \"Change(%)\": 0.0797,\n            \"Volume\": 11266\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Rice\",\n            \"Spread\": 0.01,\n            \"Open Price\": 11.245,\n            \"Price\": 10.4154,\n            \"Buy\": 10.4104,\n            \"Sell\": 10.4204,\n            \"Change\": -0.8296,\n            \"Change(%)\": -7.3779,\n            \"Volume\": 220\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Wheat\",\n            \"Spread\": 0.01,\n            \"Open Price\": 465.50,\n            \"Price\": 465.52,\n            \"Buy\": 465.50,\n            \"Sell\": 465.50,\n            \"Change\": 0.02,\n            \"Change(%)\": 0.0043,\n            \"Volume\": 4318\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Soybean\",\n            \"Spread\": 0.01,\n            \"Open Price\": 1038.00,\n            \"Price\": 1038.6171,\n            \"Buy\": 1038.6121,\n            \"Sell\": 1038.6221,\n            \"Change\": 0.6171,\n            \"Change(%)\": 0.0595,\n            \"Volume\": 20356\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Coffee\",\n            \"Spread\": 0.01,\n            \"Open Price\": 125.70,\n            \"Price\": 125.69,\n            \"Buy\": 125.70,\n            \"Sell\": 125.70,\n            \"Change\": -0.01,\n            \"Change(%)\": -0.008,\n            \"Volume\": 1654\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Cocoa\",\n            \"Spread\": 0.01,\n            \"Open Price\": 307.00,\n            \"Price\": 307.03,\n            \"Buy\": 307.00,\n            \"Sell\": 307.00,\n            \"Change\": 0.03,\n            \"Change(%)\": 0.001,\n            \"Volume\": 978\n        },\n    ];\n    var pivotObj = new ej.pivotview.PivotView({\n        dataSourceSettings: {\n            dataSource: generateData(),\n            enableSorting: true,\n            columns: [{ name: 'Type' }],\n            values: [{ name: 'Volume', caption: 'Volume' }, { name: 'Price', caption: 'Price' }, { name: 'Change', type: 'Avg', caption: 'Change(%)' }],\n            rows: [{ name: 'Country' }],\n            filters: [{ name: 'Category' }],\n            formatSettings: [{ name: 'Price', format: 'C2' }, { name: 'Open Price', format: 'C2' }, { name: 'Change', format: \"###.##'%'\" }, { name: 'Volume', format: 'N0' }],\n            expandAll: false,\n            showSubTotals: false,\n            showGrandTotals: false,\n            emptyCellsTextContent: 'Revising',\n            sortSettings: [{ name: 'Type', order: 'Ascending', membersOrder: ['Corn', 'Rice', 'Wheat', 'Soybean', 'Coffee', 'Cocoa'] }]\n        },\n        width: '100%',\n        height: 350,\n        gridSettings: { columnWidth: 100 },\n        cellTemplate: function (args) {\n            if (args != null && args.cellInfo) {\n                if (args.cellInfo.axis === 'value') {\n                    if (args.cellInfo.axis === 'value' && !args.cellInfo.isGrandSum && args.cellInfo.actualText === 'Change') {\n                        args.targetCell.classList.add(cellColour(args.cellInfo.value));\n                    }\n                }\n            }\n        },\n        displayOption: {view: 'Both'},\n        chartSettings: {\n            value: 'Price',\n            legendSettings: { visible: false },\n            chartSeries: { type: \"Column\" },\n            zoomSettings: {\n                enableScrollbar: false,\n                toolbarItems: [],\n                enableSelectionZooming: false,\n            },\n            load: function(args) {\n                var selectedTheme = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n            },\n        }\n    });\n    pivotObj.appendTo('#PivotView-LiveData');\n    function generateData() {\n        var count = 1000;\n        var currData = [];\n        var j = 0;\n        for (var i = 0; i < count; i++) {\n            var rand = Math.floor(Math.random() * Math.floor(DATA.length));\n            var region = REGIONS[j];\n            for (var k = 0; k < region.Countries.length; k++) {\n                var data = Object.assign({}, DATA[rand]);\n                var dataObj = Object.assign({}, data, {\n                    Region: region.Region,\n                    Country: region.Countries[k]\n                });\n                randomizeObjectData(dataObj);\n                currData.push(dataObj);\n            }\n            j++;\n            j = j > 5 ? 0 : j;\n        }\n        return currData;\n    }\n    pivotObj.on('data-ready', function () {\n        if (initial) {\n            document.getElementById('update1').click();\n            initial = false;\n            feedDelayInput.element.addEventListener('keypress', function (e) {\n                if (e && e.key === 'Enter' && feedDelayInput.element.parentElement.classList.contains('e-input-focus')) {\n                    feedDelayInput.value = parseInt(feedDelayInput.element.value);\n                    feedDelayInput.focusOut();\n                    updateButton.element.click();\n                }\n            });\n        }\n    });\n    \n    pivotObj.on('destroy', function () {\n        if (timerID) {\n            clearInterval(timerID);\n            timerID = undefined;\n        }\n    });\n    \n    function randomizeObjectData(dataObj) {\n        var changeP = \"Change(%)\";\n        var res = generateNewPrice(dataObj.Price, dataObj.Volume);\n        dataObj.Change = res.Price - dataObj.Price;\n        dataObj.Price = res.Price;\n        dataObj[changeP] = res.ChangePercent;\n        dataObj.Volume = res.Volume;\n    }\n    \n    function generateNewPrice(oldPrice, oldVolume) {\n        var rnd = Math.random();\n        rnd = Math.round(rnd * 100) / 100;\n        var volatility = 15;\n        var newPrice = 0;\n        var newVolume = 0;\n        var changePercent = 2 * volatility * rnd;\n        if (changePercent > volatility) {\n            changePercent -= (2 * volatility);\n        }\n        var changeVolumnPercent = 2 * (volatility - 5) * rnd;\n        if (changeVolumnPercent > (volatility - 5)) {\n            changeVolumnPercent -= (2 * (volatility - 5));\n        }\n        var changeAmount = oldPrice * (changePercent / 100);\n        newPrice = oldPrice + changeAmount;\n        var changeVolume = oldVolume * (changeVolumnPercent / 100);\n        newVolume = oldVolume + changeVolume;\n        newPrice = Math.round(newPrice * 100) / 100;\n        newVolume = Math.round((newVolume * 100) / 100);\n        var result = { Price: 0, ChangePercent: 0, Volume: 0 };\n        changePercent = Math.round(changePercent * 100) / 100;\n        result.Price = newPrice;\n        result.ChangePercent = changePercent;\n        result.Volume = newVolume;\n        return result;\n    }\n    \n    function updateCellValues() {\n        if (!ej.base.isNullOrUndefined(pivotObj)) {\n            if (pivotObj.pivotValues.length > 0) {\n                if (!previousPivotValues) {\n                    previousPivotValues = pivotObj.pivotValues;\n                }\n                previousPivotValues = pivotObj.pivotValues;\n            }\n            pivotObj.dataSourceSettings.dataSource = generateData();\n        }\n    }\n    \n    updateButton.element.onclick = function() {\n        if (!timerID) {\n            updateButton.disabled = true;\n            feedDelayInput.enabled = false;\n            clearButton.disabled = false;\n            timerID = setInterval(updateCellValues, feedDelayInput.value);\n        }\n    };\n    \n    clearButton.element.onclick = function() {\n        if (timerID) {\n            updateButton.disabled = false;\n            feedDelayInput.enabled = true;\n            clearButton.disabled = true;\n            clearInterval(timerID);\n            timerID = undefined;\n        }\n    };\n\n    function cellColour(value) {\n        var colorIndex = value < 0 ? 0 : value > 0 ? 1 : 2;\n        return colourScheme[colorIndex];\n    }\n"}