{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/schedule/event-calendar/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div id=\"wrapper\" class=\"control-section event-calendar-control-section\">\n    <div class=\"toolbar-container\">\n        <div id=\"event-calendar-toolbar\">\n        </div>\n    </div>\n    <aside id=\"sidebar-left\" class=\"sidebar-left\">\n        <div class=\"table-content\">\n            <div id=\"calendar\"></div>\n            <div class=\"calendar-list-container\">\n                <div id=\"listview-def\">\n                </div>\n            </div>\n        </div>\n    </aside>\n    <aside id=\"sidebar-right\">\n        <div id=\"unplanned-events-toolbar\">\n        </div>\n        <div id=\"unplanned-events-grid\"></div>\n    </aside>\n    <div class=\"main-content\">\n        <div class=\"sidebar-content\">\n            <div class=\"schedule-container\">\n                <div id=\"Schedule\"></div>\n            </div>\n            <div class=\"unplanned-container\">\n                <div id=\"plannedOpen\" class=\"e-icons e-chevron-left-double\"></div>\n                <div class=\"unplanned-text-container\">Unplanned events</div>\n            </div>\n        </div>\n    </div>\n    <div id=\"dialog\" class=\"custom-template\">\n    </div>\n</div>\n\n<style>\n    .event-calendar-control-section .sidebar-content {\n        display: flex;\n    }\n\n    .event-calendar-control-section .unplanned-text-container {\n        writing-mode: vertical-rl;\n        margin: auto;\n    }\n\n    .event-calendar-control-section .unplanned-container {\n        width: 50px;\n        display: block;\n        text-align: center;\n        padding: 12px 0;\n    }\n\n    .event-calendar-control-section .unplanned-events-toolbar h4 {\n        font-size: 16px;\n    }\n\n    .event-calendar-control-section .unplanned-container div {\n        padding: 6px 0;\n        font-size: 16px;\n        font-weight: 600;\n    }\n\n    .event-calendar-control-section #plannedOpen {\n        width: inherit;\n    }\n\n    .calendar-edit-dialog .dialog-content {\n        display: flex;\n    }\n\n    .calendar-edit-dialog .dialog-content .calendar-name,\n    .event-calendar-control-section .schedule-container {\n        flex-grow: 1;\n    }\n\n    .event-calendar-control-section .table-content {\n        padding: 10px;\n    }\n\n    .event-calendar-control-section .calendar-list-container {\n        padding-top: 10px;\n    }\n\n    .event-calendar-control-section .e-grid .e-headercelldiv {\n        font-size: 15px;\n        font-weight: bold;\n    }\n\n    .event-calendar-control-section .selected-date-calendar.e-calendar {\n        max-width: inherit;\n    }\n\n    .event-calendar-control-section .selected-date-calendar.e-calendar .e-btn.e-today.e-flat.e-primary,\n    .event-calendar-control-section .selected-date-calendar.e-calendar .e-css.e-btn.e-today.e-flat.e-primary {\n        display: none;\n    }\n\n    .event-calendar-control-section .control-wrapper {\n        border: 1px solid #D7D7D7;\n    }\n\n    .event-calendar-control-section .event-calendar-toolbar.e-toolbar {\n        border-bottom: 1px solid #D7D7D7;\n    }\n\n    .event-calendar-control-section .event-calendar-toolbar.e-toolbar .e-toolbar-item.e-create .e-tbar-btn.e-btn {\n        background-color: #0f6cbd;\n    }\n\n    .event-calendar-control-section .event-calendar-toolbar.e-toolbar .e-toolbar-item.e-create .e-tbar-btn.e-btn .e-btn-icon,\n    .event-calendar-control-section .event-calendar-toolbar.e-toolbar .e-toolbar-item.e-create .e-tbar-btn.e-btn .e-tbar-btn-text {\n        color: white;\n    }\n\n    .event-calendar-control-section .e-list-header,\n    .event-calendar-control-section .e-list-header .calendars-list-header,\n    .event-calendar-control-section .calendar-list-item.e-checkbox.e-checkbox-left {\n        display: flex;\n        align-items: center;\n    }\n\n    .event-calendar-control-section .e-list-header .e-headertemplate-text,\n    .event-calendar-control-section .e-list-header .e-headertemplate-text .header-text {\n        flex-grow: 1;\n        font-size: 16px;\n    }\n\n    .event-calendar-control-section .e-list-header .e-headertemplate-text .header-icon:hover {\n        cursor: pointer;\n    }\n\n    .event-calendar-control-section .calendar-list-item .calendar-name {\n        display: block;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        flex-grow: 1;\n    }\n\n    .event-calendar-control-section .calendar-list-item .calendar-buttons {\n        display: none;\n    }\n\n    .event-calendar-control-section .calendar-list-item:hover .calendar-buttons {\n        display: flex;\n    }\n\n    .event-calendar-control-section .calendar-list-item #calendar-edit-btn,\n    .event-calendar-control-section .calendar-list-item #calendar-delete-btn {\n        padding: 0 6px;\n    }\n\n    .event-calendar-control-section .e-sidebar {\n        z-index: 1 !important;\n    }\n</style>\n\n\n</div></body></html>","index.js":"{{ripple}}\n\n\n\n    var personalData = new ej.base.extend([], window.personalData, null, true);\n    var companyData = new ej.base.extend([], window.companyData, null, true);\n    var birthdayData = new ej.base.extend([], window.birthdayData, null, true);\n    var holidayData = new ej.base.extend([], window.holidayData, null, true);\n    var calendars = [\n        { name: 'My Calendar', id: 1, color: '#c43081', isSelected: true },\n        { name: 'Company', id: 2, color: '#ff7f50', isSelected: true },\n        { name: 'Birthday', id: 3, color: '#AF27CD', isSelected: true },\n        { name: 'Holiday', id: 4, color: '#808000', isSelected: true }\n    ];\n    var isAdd;\n    var calendarLength = calendars.length;\n    var selectedCalendars = getSelectedCalendars();\n    var appointmentData = generateCalendarData();\n    var filteredData = getFilteredData();\n\n    function generateCalendarData() {\n\n        var MS_PER_MINUTE = 60000;\n        var MS_PER_DAY = 86400000;\n        var collections = [];\n        var dataCollections = [\n            personalData,\n            companyData,\n            birthdayData,\n            holidayData\n        ];\n        var oldTime = new Date(2021, 3, 1).getTime();\n        var newTime = resetTime(new Date()).getTime();\n        for (var i = 0; i < dataCollections.length; i++) {\n            collections = collections.concat(dataCollections[i]);\n        }\n        collections = new ej.base.extend([], collections, null, true);\n        for (var j = 0; j < collections.length; j++) {\n            var data = collections[j];\n            data.IsPlanned = (data.Id % 2) === 0;\n            data.IsAllDay = [1, 2].indexOf(data.CalendarId) === -1;\n            var diff = oldTime - resetTime(new Date(data.StartTime)).getTime();\n            var hour = Math.floor(Math.random() * (13 - 9) + 9);\n            data.StartTime = new Date(newTime - diff + (data.IsAllDay ? 0 : (hour * 60 * MS_PER_MINUTE)));\n            data.EndTime = new Date(data.StartTime.getTime() + (data.IsAllDay ? MS_PER_DAY : MS_PER_MINUTE * 60));\n            data.ResourceId = Math.floor(Math.random() * 6) + 1;\n        }\n        return collections;\n    }\n\n\n    function getSelectedCalendars() {\n        var selectedIds = [];\n        var selectedItems = [];\n        for (var i = 0; i < calendars.length; i++) {\n            var calendar = calendars[i];\n            if (calendar.isSelected) {\n                selectedIds.push(calendar.id);\n                selectedItems.push(calendar);\n            }\n        }\n\n        return { ids: selectedIds, items: selectedItems };\n    }\n\n    function getFilteredData() {\n        var planned = [];\n        var unPlanned = [];\n\n        for (var i = 0; i < appointmentData.length; i++) {\n            var data = appointmentData[i];\n            if (selectedCalendars.ids.indexOf(data.CalendarId) > -1) {\n                if (data.IsPlanned) {\n                    planned.push(data);\n                } else {\n                    unPlanned.push(data);\n                }\n            }\n        }\n\n        return { planned: planned, unPlanned: unPlanned };\n    }\n\n\n    function resetTime(date) {\n        var newDate = new Date(date);\n        newDate.setHours(0, 0, 0, 0);\n        return newDate;\n    }\n\n\n\n    var toolbarObj = new ej.navigations.Toolbar({\n        clicked: toolbarClick,\n        items: [\n            { tooltipText: \"Menu\", prefixIcon: \"e-menu\", cssClass: 'e-menu-btn' },\n            { prefixIcon: \"e-chevron-left\", tooltipText: 'Previous', cssClass: 'e-previous' },\n            { prefixIcon: \"e-chevron-right\", tooltipText: 'Next', cssClass: 'e-next' },\n            { text: new Date().toLocaleDateString(), cssClass: 'e-date-range' },\n            { text: \"Create\", align: 'Right', prefixIcon: \"e-plus\", cssClass: 'e-create' },\n            { type: 'Separator', align: 'Right' },\n            { text: 'Today', align: 'Right', cssClass: 'e-today' },\n            { type: 'Separator', align: 'Right' },\n            { text: 'Day', align: 'Right', cssClass: 'e-day' },\n            { text: 'Week', align: 'Right', cssClass: 'e-week' },\n            { text: 'Month', align: 'Right', cssClass: 'e-month' },\n            { text: 'Agenda', align: 'Right', cssClass: 'e-agenda' },\n            { text: 'Timeline', align: 'Right', cssClass: 'e-timeline' },\n            { text: 'Year', align: 'Right', cssClass: 'e-year' },\n        ],\n        cssClass: 'event-calendar-toolbar'\n    });\n    toolbarObj.appendTo(\"#event-calendar-toolbar\");\n\n    var scheduleObj = new ej.schedule.Schedule({\n        height: '650px',\n        width: '100%',\n        showHeaderBar: false,\n        rowAutoHeight: true,\n        selectedDate: new Date(),\n        views: [\n            { option: 'Day' },\n            { option: 'Week' },\n            { option: 'Month' },\n            { option: 'Agenda' },\n            { option: 'Year' },\n            { option: 'TimelineMonth', group: { resources: ['Resources'] } }\n        ],\n        currentView: 'Month',\n        eventSettings: {\n            dataSource: new ej.base.extend([], filteredData.planned, null, true)\n        },\n        resources: [\n            {\n                field: 'ResourceId', title: 'Resources',\n                name: 'Resources',\n                dataSource: [\n                    { name: 'Nancy', id: 1, color: '#df5286' },\n                    { name: 'Steven', id: 2, color: '#7fa900' },\n                    { name: 'Robert', id: 3, color: '#ea7a57' },\n                    { name: 'Smith', id: 4, color: '#5978ee' },\n                    { name: 'Micheal', id: 5, color: '#df5286' },\n                    { name: 'Root', id: 6, color: '#00bdae' }\n                ],\n                textField: 'name', idField: 'id', colorField: 'color'\n            }\n        ],\n        created: function(){\n            updateDateRange();\n        },\n        actionComplete: actionComplete,\n        eventRendered: function (args) {\n            var categoryColor = calendars.find(function (c) {\n                return c.id === args.data.CalendarId;\n            }) && calendars.find(function (c) {\n                return c.id === args.data.CalendarId;\n            }).color;\n\n            if (!args.element || !categoryColor) {\n                return;\n            }\n            if (scheduleObj.currentView === 'Agenda') {\n                (args.element.firstChild).style.borderLeftColor = categoryColor;\n            } else {\n                args.element.style.backgroundColor = categoryColor;\n            }\n        },\n        popupOpen: function (args) {\n            if (args.type === \"Editor\") {\n                if (!args.element.querySelector(\".custom-field-row\")) {\n                    var row = new ej.base.createElement(\"div\", { className: \"custom-field-row\" });\n                    var formElement = args.element.querySelector(\".e-schedule-form\");\n                    formElement.firstChild.insertBefore(row, args.element.querySelector(\".e-resources-row\"));\n                    var container = new ej.base.createElement(\"div\", { className: \"custom-field-container\" });\n                    var inputEle = new ej.base.createElement(\"input\", { className: \"e-field\", attrs: { name: \"CalendarId\" } });\n                    container.appendChild(inputEle);\n                    row.appendChild(container);\n                    var dropDownList = new ej.dropdowns.DropDownList({\n                        dataSource: new ej.base.extend([], calendars, null, true),\n                        cssClass: \"calendar-ddl\",\n                        fields: { text: \"name\", value: \"id\" },\n                        value: (args.data && args.data.CalendarId) ||\n                            (selectedCalendars && selectedCalendars.ids && selectedCalendars.ids[0]) ||\n                            (calendars.length > 0 && calendars[0].id),\n                        floatLabelType: \"Always\", placeholder: \"Calendar\"\n                    });\n                    dropDownList.appendTo(inputEle);\n                    inputEle.setAttribute(\"name\", \"CalendarId\");\n                } else {\n                    var calendarDDL = (args.element.querySelector(\".calendar-ddl input\")).ej2_instances[0];\n                    calendarDDL.dataSource = new ej.base.extend([], calendars, null, true);\n                    calendarDDL.value = (args.data && args.data.CalendarId) ||\n                        (selectedCalendars && selectedCalendars.ids[0]) ||\n                        (calendars.length > 0 && calendars[0].id);\n                }\n            }\n            else if (args.type === \"QuickInfo\" && ej.base.isNullOrUndefined(args.data.Id)) {\n                args.cancel = true;\n            }\n        }\n    });\n    scheduleObj.appendTo('#Schedule');\n\n    function actionComplete(args) {\n        if (args.requestType === 'dateNavigate' || args.requestType === 'viewNavigate') {\n            updateDateRange();\n            if (args.requestType === 'dateNavigate' && resetTime(calendarObj && calendarObj.value) !== resetTime(scheduleObj.selectedDate)) {\n                calendarObj.value = scheduleObj.selectedDate;\n            }\n        } else if (args.requestType === \"eventCreated\" || args.requestType === \"eventChanged\" || args.requestType === \"eventRemoved\") {\n            args.addedRecords.forEach(function (newEvent) {\n                newEvent.IsPlanned = true;\n                appointmentData.push(newEvent);\n            });\n        \n            for (var i = 0; i < args.changedRecords.length; i++) {\n                var updatedEvent = args.changedRecords[i];\n                var updatedIndex = -1;\n                for (var j = 0; j < appointmentData.length; j++) {\n                    if (appointmentData[j].Id === updatedEvent.Id) {\n                        updatedIndex = j;\n                        break;\n                    }\n                }\n                if (updatedIndex !== -1) {\n                    appointmentData[updatedIndex] = updatedEvent;\n                }\n            }\n        \n            for (var k = 0; k < args.deletedRecords.length; k++) {\n                var deletedEvent = args.deletedRecords[k];\n                var deletedIndex = -1;\n                for (var l = 0; l < appointmentData.length; l++) {\n                    if (appointmentData[l].Id === deletedEvent.Id) {\n                        deletedIndex = l;\n                        break;\n                    }\n                }\n                if (deletedIndex !== -1) {\n                    appointmentData.splice(deletedIndex, 1);\n                }\n            }\n        \n            var events = args.addedRecords.slice(0);\n            for (var m = 0; m < args.changedRecords.length; m++) {\n                events.push(args.changedRecords[m]);\n            }\n            for (var n = 0; n < events.length; n++) {\n                var currentEvent = events[n];\n                var calendar = null;\n                for (var p = 0; p < selectedCalendars.items.length; p++) {\n                    if (selectedCalendars.items[p].id === currentEvent.CalendarId) {\n                        calendar = selectedCalendars.items[p];\n                        break;\n                    }\n                }\n                if (calendar === null) {\n                    for (var q = 0; q < calendars.length; q++) {\n                        if (calendars[q].id === currentEvent.CalendarId) {\n                            calendar = calendars[q];\n                            calendar.isSelected = true;\n                            break;\n                        }\n                    }\n                    selectedCalendars = getSelectedCalendars();\n                    filteredData = getFilteredData();\n                    calendarsList.dataSource = new ej.base.extend([], calendars, null, true);\n                    scheduleObj.eventSettings.dataSource = new ej.base.extend([], filteredData.planned, null, true);\n                    grid.dataSource = new ej.base.extend([], filteredData.planned, null, true);\n                }\n            }\n        }        \n    }\n\n    function updateDateRange() {\n        var dateRange;\n        var view = scheduleObj.currentView;\n        switch (view) {\n            case 'Day':\n                var options = { month: 'long', day: '2-digit', year: 'numeric' };\n                dateRange = new Intl.DateTimeFormat('en-US', options).format(scheduleObj.selectedDate);\n                break;\n            case 'Week':\n            case 'Agenda': {\n                var currentViewDates = scheduleObj.getCurrentViewDates();\n                if (view === 'Week' && currentViewDates.length < 1) {\n                    currentViewDates = [\n                        getWeekFirstDate(scheduleObj.selectedDate, scheduleObj.firstDayOfWeek),\n                        getWeekLastDate(scheduleObj.selectedDate, scheduleObj.firstDayOfWeek)\n                    ];\n                }\n                if (currentViewDates.length > 0) {\n                    var start = currentViewDates[0];\n                    var end = currentViewDates[currentViewDates.length - 1];\n\n                    var optionsFull = { month: 'long', day: '2-digit', year: 'numeric' };\n                    var optionsMonthDay = { month: 'long', day: '2-digit' };\n\n                    if (start.getFullYear() !== end.getFullYear()) {\n                        dateRange = new Intl.DateTimeFormat('en-US', optionsFull).format(start) + ' - ' + new Intl.DateTimeFormat('en-US', optionsFull).format(end);\n                    } else if (start.getMonth() !== end.getMonth()) {\n                        dateRange = new Intl.DateTimeFormat('en-US', optionsMonthDay).format(start) + ' - ' + new Intl.DateTimeFormat('en-US', optionsFull).format(end);\n                    } else {\n                        dateRange = new Intl.DateTimeFormat('en-US', optionsFull).format(start) + ' - ' + new Intl.DateTimeFormat('en-US', optionsFull).format(end);\n                    }\n                }\n                break;\n            }\n            case 'Month':\n            case 'TimelineMonth':\n                dateRange = new Intl.DateTimeFormat('en-US', { month: 'long', year: 'numeric' }).format(scheduleObj.selectedDate);\n                break;\n            case 'Year':\n                dateRange = new Intl.DateTimeFormat('en-US', { year: 'numeric' }).format(scheduleObj.selectedDate);\n                break;\n            default:\n                break;\n        }\n        if (dateRange !== '' && toolbarObj) {\n            var dateRangeElement = toolbarObj.element.querySelector('.e-date-range .e-tbar-btn-text');\n            toolbarObj.element.querySelector('.e-date-range .e-tbar-btn').setAttribute('aria-label', dateRange);\n            dateRangeElement.textContent = dateRange;\n        }\n    }\n\n    var calendarObj = new ej.calendars.Calendar({\n        cssClass: 'selected-date-calendar',\n        value: new Date(),\n        change: function (args) {\n            if (args && args.isInteracted && scheduleObj) {\n                scheduleObj.selectedDate = args.value;\n            }\n        }\n    });\n    calendarObj.appendTo('#calendar');\n\n    var dialog = new ej.popups.Dialog({\n        cssClass: 'calendar-edit-dialog',\n        header: 'New Calendar',\n        content: '<div>Calendar Name</div><div class=\"dialog-content\"><input id=\"text-box\"><input id=\"color-picker\" type=\"color\"></div>',\n        showCloseIcon: true,\n        animationSettings: { effect: 'Zoom' },\n        visible: false,\n        width: '320px',\n        height: '250px',\n        isModal: true,\n        buttons: [{ buttonModel: { content: 'Add', isPrimary: true } }]\n    });\n    dialog.appendTo('#dialog');\n    var saveButton = new ej.buttons.Button();\n    saveButton.appendTo('#saveButton');\n\n    var outlineTextBox = new ej.inputs.TextBox({\n        placeholder: 'Enter the calendar name',\n        cssClass: 'e-outline calendar-name',\n        floatLabelType: 'Never',\n    });\n    outlineTextBox.appendTo('#text-box');\n\n    var colorPicker = new ej.inputs.ColorPicker({ cssClass: 'calendar-color' }, '#color-picker');\n\n    var calendarsList = new ej.lists.ListView({\n        dataSource: calendars,\n        template: \"<div class='calendar-list-item'><div class='calendar-name' title='${name}'>${name}</div>${if(id !== 1)}<div class='calendar-buttons'><span id='calendar-edit-btn' class='e-icons e-edit' data-calendar-id='${id}'></span><span id='calendar-delete-btn' class='e-icons e-trash' data-calendar-id='${id}'></span></div>${/if}</div>\",\n        headerTemplate: '<div class=\"calendars-list-header\"><div class=\"header-text\">Calendars</div><div class=\"header-icon e-icons e-plus\"></div></div>',\n        showCheckBox: true,\n        showHeader: true,\n        actionComplete: onComplete,\n        select: onChange,\n        fields: { id: 'id', text: 'name', isChecked: 'isSelected' },\n        height: '110px'\n    });\n    calendarsList.appendTo('#listview-def');\n\n    function onChange(args) {\n        if (args && args.event && args.event.target !== null && args.event.target !== undefined) {\n            var target = args.event.target;\n            if (target.classList.contains('e-edit') && args && args.data != null && dialog != null) {\n                calendarsList.refresh();\n                if (outlineTextBox) {\n                    outlineTextBox.value = (args.data).name;\n                    colorPicker.value = (args.data).color;\n                    dialog.buttons = [{ buttonModel: { content: 'Save', isPrimary: true } }];\n                    dialog.header = 'Edit Calendar';\n                    dialog.show();\n                    dialog.buttons = [{\n                        buttonModel: { isPrimary: true, content: 'Save' }, click: function () {\n                            if (outlineTextBox) {\n                                var newValue = outlineTextBox.value.trim();\n                                var newColor = colorPicker.value.trim();\n                                if (newValue.length > 0) {\n                                    calendars = calendars.map(function (item) {\n                                        if (item.name === args.data.name) {\n                                            return Object.assign({}, item, { name: newValue, color: newColor });\n                                        }\n                                        return item;\n                                    });\n                                    selectedCalendars = getSelectedCalendars();\n                                    calendarsList.dataSource = new ej.base.extend([], calendars, null, true);\n                                    scheduleObj.refreshEvents();\n                                    dialog.hide();\n                                }\n                            }\n                        }\n                    }];\n                }\n            } else if (target && target.classList.contains('e-trash') && args && args.item != null && calendars.length > 1) {\n                if (calendars.length > 1) {\n                    calendarsList.removeItem(args.item);\n                    var newCalendars = [];\n                    for (var i = 0; i < calendars.length; i++) {\n                        if (calendars[i].id !== args.data.id) {\n                            newCalendars.push(calendars[i]);\n                        }\n                    }\n                    calendars = newCalendars;\n                    var newAppointmentData = [];\n                    for (var j = 0; j < appointmentData.length; j++) {\n                        if (appointmentData[j].CalendarId !== args.data.id) {\n                            newAppointmentData.push(appointmentData[j]);\n                        }\n                    }\n                    appointmentData = newAppointmentData;\n                    selectedCalendars = getSelectedCalendars();\n                    filteredData = getFilteredData();\n                    scheduleObj.eventSettings.dataSource = new ej.base.extend([], filteredData.planned, null, true);\n                    grid.dataSource = new ej.base.extend([], filteredData.unPlanned, null, true);\n                }\n                else {\n                    calendarsList.refresh();\n                    alert(\"At least one calendar should be available.\");\n                }\n            } else {\n                calendarSelection(args);\n            }\n        } else {\n            calendarSelection(args);\n        }\n    }\n\n    function changeCheckboxBackgroundColor(idFromArgs) {\n        var listItem = calendarsList.element.querySelector('[data-uid=\"' + idFromArgs + '\"]');\n        if (listItem) {\n            var selectedItem = calendars.find(function (item) {\n                return item.id === idFromArgs;\n            });\n\n            if (selectedItem && selectedItem.color) {\n                var checkboxFrame = listItem.querySelector(\n                    '.e-checkbox-wrapper .e-frame.e-check, ' +\n                    '.e-css.e-checkbox-wrapper .e-frame.e-check, ' +\n                    '.e-checkbox-wrapper .e-frame, ' +\n                    '.e-css.e-checkbox-wrapper .e-frame'\n                );\n\n                if (checkboxFrame) {\n                    checkboxFrame.style.backgroundColor = selectedItem.color;\n                    checkboxFrame.style.borderColor = selectedItem.color;\n                }\n            }\n        }\n    }\n\n    function applyBackgroundColors() {\n        calendars.forEach(function (calendar) {\n            var listItem = calendarsList.element.querySelector('[data-uid=\"' + calendar.id + '\"]');\n            if (listItem) {\n                var checkboxFrame = listItem.querySelector(\n                    '.e-checkbox-wrapper .e-frame.e-check, ' +\n                    '.e-css.e-checkbox-wrapper .e-frame.e-check, ' +\n                    '.e-checkbox-wrapper .e-frame, ' +\n                    '.e-css.e-checkbox-wrapper .e-frame'\n                );\n                if (checkboxFrame) {\n                    checkboxFrame.style.backgroundColor = calendar.color;\n                    checkboxFrame.style.borderColor = calendar.color;\n                }\n            }\n        });\n    }\n\n    function calendarSelection(args) {\n        var idFromArgs = Number(args.data.id);\n        calendars[args.index].isSelected = args.isChecked;\n        selectedCalendars = getSelectedCalendars();\n\n        if (args.isChecked) {\n            changeCheckboxBackgroundColor(idFromArgs);\n        }\n\n        filteredData = getFilteredData();\n        scheduleObj.eventSettings.dataSource = new ej.base.extend([], filteredData.planned, null, true);\n        grid.dataSource = new ej.base.extend([], filteredData.unPlanned, null, true);\n    }\n\n    function onComplete(args) {\n        var iconAdd = calendarsList.element.querySelector(\".e-plus\");\n        applyBackgroundColors();\n        if (iconAdd) {\n            iconAdd.addEventListener(\"click\", function (args) {\n                isAdd = true;\n                dialog.buttons = [{ buttonModel: { content: 'Add', isPrimary: true } }];\n                if (outlineTextBox) {\n                    outlineTextBox.value = \"\";\n                    colorPicker.value = \"#008000ff\";\n                }\n                dialog.header = 'New Calendar';\n                dialog.show();\n                dialog.buttons = [{\n                    buttonModel: { isPrimary: true, content: 'Add' }, click: function () {\n                        updateTextValue();\n                    }\n                }];\n            });\n        }\n    }\n\n    function updateTextValue() {\n        if (isAdd) {\n            if (outlineTextBox) {\n                var newValue = outlineTextBox.value.trim();\n                newValue = newValue === \"\" ? \"New Calendar\" : newValue;\n                var newId = (calendars.length + 1);\n                var newItem = { name: newValue, id: newId, color: colorPicker.value, isSelected: true };\n                calendars.push(newItem);\n                selectedCalendars = getSelectedCalendars();\n                calendarsList.dataSource = new ej.base.extend([], calendars, null, true);\n                dialog.hide();\n                dialog.hide();\n            }\n            isAdd = false;\n        }\n    }\n\n\n    var leftSidebar = new ej.navigations.Sidebar({\n        width: '300px',\n        target: '.main-content',\n    });\n    leftSidebar.appendTo('#sidebar-left');\n\n    var unPlannedEventsToolbarObj = new ej.navigations.Toolbar({\n        cssClass: 'unplanned-events-toolbar',\n        items: [\n            { prefixIcon: \"e-exit-full-screen\", cssClass: 'e-exit', tooltipText: 'Open/Close Sidebar', click: collapseRightSidebar },\n            { template: '<h4 id=\"headerText\">Unplanned Events</h4>' }\n        ]\n    });\n    unPlannedEventsToolbarObj.appendTo('#unplanned-events-toolbar');\n\n    function collapseRightSidebar() {\n        if (rightSidebar.isOpen) {\n            rightSidebar.toggle();\n        }\n    }\n\n\n    var rightSidebar = new ej.navigations.Sidebar({\n        width: \"300px\",\n        target: '.main-content',\n        position: 'Right',\n        type: 'Push',\n        isOpen: false,\n        created: function () {\n            var open = rightSidebar.element.parentElement.querySelector('#plannedOpen');\n            var unplannedElement = rightSidebar.element.parentElement.querySelector('.unplanned-container');\n            if (open) {\n                open.onclick = function () {\n                    rightSidebar.show();\n                    filteredData = getFilteredData();\n                    grid.dataSource = new ej.base.extend([], filteredData.unPlanned, null, true);\n                    if (unplannedElement) {\n                        unplannedElement.style.display = 'none';\n                    }\n                };\n            }\n        },\n        close: function () {\n            var unplannedElement = rightSidebar.element.parentElement.querySelector('.unplanned-container');\n            if (unplannedElement) {\n                unplannedElement.style.display = 'block';\n            }\n        }\n    });\n    rightSidebar.appendTo('#sidebar-right');\n\n    var grid = new ej.grids.Grid({\n        cssClass: 'unplanned-events-grid',\n        dataSource: new ej.base.extend([], filteredData.unPlanned, null, true),\n        columns: [\n            { field: 'Subject', headerText: 'Event', textAlign: 'Left', width: 120 },\n            { field: 'StartTime', width: 140, headerText: 'Date', format: 'dd MMMM yyyy' },\n        ]\n    });\n    grid.appendTo(\"#unplanned-events-grid\");\n\n    function toolbarClick(args) {\n        if (!args.item) {\n            return;\n        }\n        switch (args.item.cssClass) {\n            case 'e-menu-btn':\n                leftSidebar.toggle();\n                break;\n            case 'e-create':\n                if (scheduleObj && selectedCalendars.ids.length > 0) {\n                    var data = {\n                        StartTime: resetTime(new Date()),\n                        EndTime: resetTime(ej.schedule.addDays(new Date(), 1)),\n                        ResourceId: selectedCalendars.ids[0]\n                    };\n                    scheduleObj.openEditor(data, 'Add', true);\n                    scheduleObj.dataBind();\n                }\n                break;\n            case 'e-previous':\n                scheduleObj.selectedDate = getPreviousNextDate(true);\n                break;\n            case 'e-next':\n                scheduleObj.selectedDate = getPreviousNextDate(false);\n                break;\n            case 'e-today':\n                scheduleObj.selectedDate = new Date();\n                break;\n            case 'e-day':\n                scheduleObj.currentView = 'Day';\n                break;\n            case 'e-week':\n                scheduleObj.currentView = 'Week';\n                break;\n            case 'e-month':\n                scheduleObj.currentView = 'Month';\n                break;\n            case 'e-agenda':\n                scheduleObj.currentView = 'Agenda';\n                break;\n            case 'e-timeline':\n                scheduleObj.currentView = 'TimelineMonth';\n                break;\n            case 'e-year':\n                scheduleObj.currentView = 'Year';\n                break;\n            default:\n                break;\n        }\n    }\n\n    function getPreviousNextDate(isPrevious) {\n        var currentDate = scheduleObj.selectedDate;\n        if (scheduleObj) {\n            var view = scheduleObj.currentView;\n            switch (view) {\n                case 'Day':\n                case 'Agenda':\n                    currentDate = new ej.schedule.addDays(currentDate, isPrevious ? -1 : 1);\n                    break;\n                case 'Week':\n                    currentDate = new ej.schedule.addDays(currentDate, isPrevious ? -ej.schedule.WEEK_LENGTH : ej.schedule.WEEK_LENGTH);\n                    break;\n                case 'Month':\n                case 'TimelineMonth':\n                    currentDate = new ej.schedule.addMonths(currentDate, isPrevious ? -1 : 1);\n                    break;\n                case 'Year':\n                    currentDate = new ej.schedule.addYears(currentDate, isPrevious ? -1 : 1);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return currentDate;\n    }\n\n"}