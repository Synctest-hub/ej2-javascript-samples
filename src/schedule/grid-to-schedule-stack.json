{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/schedule/grid-to-schedule/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section main-wrapper\">\n    <div class=\"content-wrapper grid-to-schedule\">\n        <div class=\"schedule-container\">\n            <div class=\"schedule-content\">\n                <h5 style=\"text-align: center; margin: 0;position: relative; bottom: 10px;\">Task Management</h5>\n                <div id=\"Schedule\"></div>\n            </div>\n            <div class=\"grid-content\">\n                <h5 style=\"text-align: center; margin: 0; position: relative; bottom: 10px;\">Unplanned Tasks</h5>\n                <div id=\"Grid\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n\n\n<style>\n\n    .content-wrapper.grid-to-schedule .schedule-container {\n        display: grid;\n        grid-template-columns: 5fr 1fr;\n    }\n\n    .content-wrapper.grid-to-schedule .schedule-container .schedule-content,\n    .content-wrapper.grid-to-schedule .schedule-container .grid-content {\n        height: 500px;\n    }\n\n    .content-wrapper.grid-to-schedule .schedule-container .grid-content {\n        margin-left: 10px;\n    }\n\n    .grid-schedule.e-schedule.e-device .e-timeline-view .e-resource-left-td {\n        width: 110px;\n    }\n    \n    .drag-grid.e-grid .e-cloneproperties.e-draganddrop {\n        margin-top: 40px;\n    }\n\n    .grid-schedule.e-schedule .e-timeline-view .e-date-header-wrap table col,\n    .grid-schedule.e-schedule .e-timeline-view .e-content-wrap table col {\n        width: 100px;\n    }\n\n    @media screen and (max-width: 768px) {\n        .content-wrapper.grid-to-schedule .schedule-container {\n            display: flex;\n            flex-direction: column;\n        }\n\n        .content-wrapper.grid-to-schedule .schedule-container .grid-content {\n            margin-top: 10px;\n        }\n\n        .drag-grid.e-grid {\n            width: 100% !important;\n        }\n\n        .drag-grid.e-grid .e-cloneproperties.e-draganddrop {\n           margin-top: 20px;\n        }\n\n        .content-wrapper.grid-to-schedule .schedule-container .schedule-content,\n        .content-wrapper.grid-to-schedule .schedule-container .grid-content {\n            height: 100% !important;\n        }\n    }\n</style></div></body></html>","index.js":"{{ripple}}\n    \n    window.getName = function (value) {\n        return value.resourceData[value.resource.textField];\n    };\n\n    var data = new ej.base.extend([], window.resourceData.concat(window.timelineResourceData), null, true);\n\n    var resourceData = [\n        { text: 'Nancy', id: 1, color: '#df5286' },\n        { text: 'Steven', id: 2, color: '#7fa900' },\n        { text: 'Robert', id: 3, color: '#ea7a57' },\n        { text: 'Smith', id: 4, color: '#5978ee' },\n        { text: 'Michael', id: 5, color: '#00bdae' },\n        { text: 'Root', id: 6, color: '#f57b42' },\n        { text: 'John', id: 7, color: '#1aaa55' },\n        { text: 'Stellah', id: 8, color: '#ffb74d' },\n        { text: 'Chirish', id: 9, color: '#7460ee' },\n        { text: 'Megan', id: 10, color: '#c0ca33' },\n    ];\n\n    var gridData = [\n        { Task: 'Test report validation', Duration: '3 Hours' },\n        { Task: 'Timeline estimation', Duration: '4 Hours' },\n        { Task: 'Workflow Analysis', Duration: '2 Hours' },\n        { Task: 'Quality Analysis', Duration: '5 Hours' },\n        { Task: 'Cross-browser testing', Duration: '1 Hour' },\n        { Task: 'Resolution-based testing', Duration: '3 Hours' },\n        { Task: 'Project Preview', Duration: '6 Hours' },\n        { Task: 'Developers Meeting', Duration: '2 Hours' },\n        { Task: 'Test case correction', Duration: '7 Hours' },\n        { Task: 'Debugging', Duration: '4 Hours' },\n        { Task: 'Exception handling', Duration: '5 Hours' },\n        { Task: 'Bug fixing', Duration: '1 Hour' },\n        { Task: 'Bug Automation', Duration: '3 Hours' },\n        { Task: 'Bug fixing', Duration: '6 Hours' },\n    ];\n\n    function calculateEventDuration(startTime, endTime) {\n        var durationInMilliseconds = endTime - startTime;\n        var durationInHours = durationInMilliseconds / (1000 * 60 * 60);\n        return Math.floor(durationInHours) + ' Hours';\n    }\n\n    function handleDragStop(args, scheduleObj, gridObj) {\n        if (ej.base.closest(args.event.target, '#Grid')) {\n            scheduleObj.deleteEvent(args.data.Id);\n            var startTime = new Date(args.data.StartTime);\n            var endTime = new Date(args.data.EndTime);\n            var formattedDuration = calculateEventDuration(startTime, endTime);\n            var gridRecord = { Task: args.data.Subject, Duration: formattedDuration };\n            gridObj.addRecord(gridRecord);\n        }\n    }\n\n    var scheduleObj = new ej.schedule.Schedule({\n        cssClass: 'grid-schedule',\n        width: '100%',\n        height: '100%',\n        eventDragArea: '.content-wrapper',\n        selectedDate: new Date(2023, 0, 4),\n        rowAutoHeight: true,\n        currentView: 'TimelineDay',\n        timeScale: { slotCount: 1, interval: 60 },\n        views: [{ option: 'TimelineDay' }],\n        group: { enableCompactView: false, resources: ['Names'] },\n        resources: [\n            {\n                field: 'TaskId',\n                title: 'Name',\n                name: 'Names',\n                dataSource: resourceData,\n                textField: 'text',\n                idField: 'id',\n                colorField: 'color',\n            },\n        ],\n        eventSettings: { dataSource: data },\n        dragStop: function (args) {\n            handleDragStop(args, scheduleObj, gridObj);\n        },\n        dataBound: function () {\n            var resourceDataCounter = 0;\n            var resourceCells = scheduleObj.element.querySelectorAll('.e-resource-cells .e-resource-text');\n            for (var i = 0; i < resourceCells.length; i++) {\n                var cell = resourceCells[i];\n                var workcells = scheduleObj.element.querySelector('.e-work-cells');\n                if (!workcells) continue;\n                var timestamp = Number(workcells.getAttribute('data-date'));\n                var startDate = new Date(timestamp);\n                var endDate = new Date(startDate);\n                endDate.setDate(startDate.getDate() + 1);\n                var events = scheduleObj.getEvents(startDate, endDate, true);\n                if (resourceDataCounter < scheduleObj.resourceCollection[0].dataSource.length) {\n                    resourceDataCounter++;\n                }\n                var resourceEvents = [];\n                for (var j = 0; j < events.length; j++) {\n                    if (events[j].TaskId === resourceDataCounter) {\n                        resourceEvents.push(events[j]);\n                    }\n                }\n                var currentText = cell.innerText;\n                var eventCount = resourceEvents.length;\n                var resourceName = currentText.split('(')[0].trim();\n                cell.innerText = resourceName + ' (' + eventCount + ')';\n            }\n        },\n    });\n    scheduleObj.appendTo('#Schedule');\n\n    var gridObj = new ej.grids.Grid({\n        dataSource: gridData,\n        cssClass: 'drag-grid',\n        width: '280px',\n        height: '100%',\n        allowRowDragAndDrop: true,\n        columns: [\n            { field: 'Task', headerText: 'Task', width: 50 },\n            { field: 'Duration', headerText: 'Duration', width: 30 },\n        ],\n        editSettings: { allowAdding: true, allowEditing: true, allowDeleting: true },\n        rowDropSettings: { targetID: 'Schedule' },\n        rowDrag: function (args) {\n            args.cancel = true;\n        },\n        rowDrop: function (args) {\n            args.cancel = true;\n            var scheduleElement = ej.base.closest(args.target, '.e-content-wrap');\n            if (scheduleElement && args.target.classList.contains('e-work-cells')) {\n                var cellData = scheduleObj.getCellDetails(args.target);\n                var resourceDetails = scheduleObj.getResourcesByIndex(cellData.groupIndex);\n                var durationStr = args.data[0].Duration;\n                var durationHours = parseInt(durationStr.split(' ')[0], 10);\n                var startTime = new Date(cellData.startTime);\n                var endTime = new Date(startTime.getTime() + durationHours * 60 * 60 * 1000);\n                var eventData = {\n                    Id: scheduleObj.getEventMaxID(),\n                    Subject: args.data[0].Task,\n                    StartTime: startTime,\n                    EndTime: endTime,\n                    IsAllDay: cellData.isAllDay,\n                    TaskId: resourceDetails.resourceData.id,\n                };\n                scheduleObj.addEvent(eventData);\n                gridObj.deleteRecord(args.data[0]);\n            }\n        },\n        dataBound: function () {\n            if (scheduleObj) {\n                var selectedCells = scheduleObj.element.querySelectorAll('.e-selected-cell');\n                for (var i = 0; i < selectedCells.length; i++) {\n                    selectedCells[i].classList.remove('e-selected-cell');\n                }\n            }\n        }\n    });\n    gridObj.appendTo('#Grid');\n\n"}