{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/grid/frozen-api/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div class=\"grid-freezeprop\">\n        <div class=\"grid-freezecol\">\n            <div class=\"grid-freezecol\">\n                <span>\n                    Column Name\n                </span>\n            </div>\n            <div class=\"grid-freezecol\">\n                <input type=\"text\" id=\"column\">\n            </div>\n        </div>\n        <div class=\"grid-freezecol\">\n            <div class=\"grid-freezecol\">\n                <span>\n                    Freeze Direction\n                </span>\n            </div>\n            <div class=\"grid-freezecol\">\n                <input type=\"text\" id=\"FreezeDirection\">\n            </div>\n        </div>\n    </div>\n\n    <div id=\"Grid\">\n        <div id=\"alertDialog\"></div>\n    </div>\n</div>\n\n\n\n\n</div></body></html>","index.js":"{{ripple}}/**\n * Grid frozen rows and columns sample\n */\n\n    var alertDialogObj = new ej.popups.Dialog({\n        header: 'Frozen',\n        content: 'Atleast one Column should be in movable',\n        showCloseIcon: false,\n        target: '.control-section',\n        buttons: [{\n            click: alertDlgBtnClick, buttonModel: { content: 'OK', isPrimary: true }\n        }],\n        width: '300px',\n        visible: false,\n        animationSettings: { effect: 'None' }\n    });\n    alertDialogObj.appendTo('#alertDialog');\n    function alertDlgBtnClick() {\n        alertDialogObj.hide();\n    }\n\n    var data = new ej.data.DataManager(window.data).executeLocal(new ej.data.Query().take(50));\n    var grid = new ej.grids.Grid({\n        dataSource: data,\n        height: 410,\n        enableHover: false,\n        allowSorting: true,\n        allowFiltering: true,\n        filterSettings: { type: 'Excel' },\n        toolbar: ['Add', 'Edit', 'Delete', 'Update', 'Cancel'],\n        editSettings: { allowAdding: true, allowEditing: true, allowDeleting: true },\n        frozenRows: 2,\n        columns: [\n            { field: 'OrderID', headerText: 'Order ID', width: 120, textAlign: 'Right', freeze: 'Left', isPrimaryKey: true, validationRules: { required: true, number: true } },\n            { field: 'Freight', width: 125, format: 'C2', textAlign: 'Right', editType: 'numericedit', validationRules: { required: true, min: 0 } },\n            { field: 'CustomerID', headerText: 'Customer ID', width: 130, freeze: 'Right', validationRules: { required: true, minLength: 5 } },\n            { field: 'OrderDate', headerText: 'Order Date', width: 150, format: 'yMd', textAlign: 'Right', editType: 'datepickeredit' },\n            { field: 'ShipName', headerText: 'Ship Name', width: 300 },\n            { field: 'ShipAddress', headerText: 'Ship Address', width: 270, freeze: 'Fixed' },\n            { field: 'ShipCity', headerText: 'Ship City', width: 250 },\n            { field: 'ShipCountry', headerText: 'Ship Country', width: 250, editType: 'dropdownedit' }\n        ]\n    });\n    grid.appendTo('#Grid');\n\n    var columnNames = [\n        { id: 'OrderID', name: 'Order ID' },\n        { id: 'Freight', name: 'Freight' },\n        { id: 'CustomerID', name: 'Customer ID' },\n        { id: 'OrderDate', name: 'Order Date' },\n        { id: 'ShipName', name: 'Ship Name' },\n        { id: 'ShipAddress', name: 'Ship Address' },\n        { id: 'ShipCity', name: 'Ship City' },\n        { id: 'ShipCountry', name: 'Ship Country' }\n    ];\n    var directions = [\n        { id: 'Left', name: 'Left' },\n        { id: 'Right', name: 'Right' },\n        { id: 'Center', name: 'Center' },\n        { id: 'Fixed', name: 'Fixed' }\n    ];\n\n    var refresh = true;\n    var columnDropDown = new ej.dropdowns.DropDownList({\n        dataSource: columnNames,\n        fields: { text: 'name', value: 'id' },\n        value: 'OrderID',\n        change: function(e) {\n            var columnName = e.value;\n            var column = grid.getColumnByField(columnName);\n            var value = column.freeze === undefined ? 'Center' : column.freeze;\n            refresh = directionDropDown.value === value;\n            directionDropDown.value = value;\n        }\n    });\n    columnDropDown.appendTo('#column');\n\n    var directionDropDown = new ej.dropdowns.DropDownList({\n        dataSource: directions,\n        fields: { text: 'name', value: 'id' },\n        value: 'Left',\n        change: function(e) {\n            if (refresh) {\n                var columnName = document.getElementById(\"column\").ej2_instances[0].value;\n                var mvblColumns = grid.getMovableColumns();\n                if (mvblColumns.length === 1 && columnName === mvblColumns[0].field && e.value !== mvblColumns[0].freeze) {\n                    alertDialogObj.show(); refresh = false; directionDropDown.value = \"Center\"; directionDropDown.refresh();\n                } else {\n                    grid.getColumnByField(columnName).freeze = e.value === 'Center' ? undefined : e.value;\n                    grid.refreshColumns();\n                }\n            }\n            refresh = true;\n        }\n    });\n    directionDropDown.appendTo('#FreezeDirection');\n"}