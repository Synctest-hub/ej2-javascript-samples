{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/grid/frozen-rows-columns/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-8 control-section\">\n    <div class=\"content-wrapper\">\n        <div id=\"Grid\">\n        </div>\n    </div>\n</div>\n<div class=\"col-lg-4 property-section\">\n    <table id=\"property\" title=\"Properties\">\n        <tbody>\n            <tr>\n                <td>\n                    <div>Frozen Rows </div>\n                </td>\n                <td>\n                    <div>\n                        <input id=\"rows\" type=\"text\" aria-label=\"Frozen rows\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Frozen Columns </div>\n                </td>\n                <td>\n                    <div>\n                        <input id=\"columns\" type=\"text\" aria-label=\"Frozen columns\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td></td>\n                <td>\n                    <div>\n                        <button id=\"buttonSet\">Set</button>\n                    </div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n\n</div></body></html>","index.js":"{{ripple}}/**\n * Grid frozen rows and columns sample\n */\n\n    var data = new ej.data.DataManager(window.data).executeLocal(new ej.data.Query().take(50));\n    var grid = new ej.grids.Grid({\n        dataSource: data,\n        height: 410,\n        allowSelection: false,\n        enableHover: false,\n        allowSorting: true,\n        allowMultiSorting: false,\n        allowFiltering: true,\n        filterSettings: { type: 'Excel' },\n        allowResizing: true,\n        frozenColumns: 1,\n        frozenRows: 2,\n        columns: [\n            { field: 'OrderID', headerText: 'Order ID', width: 120, textAlign: 'Right', minWidth: 10, isPrimaryKey: true },\n            { field: 'Freight', width: 125, format: 'C2', minWidth: 10 },\n            { field: 'CustomerID', headerText: 'Customer ID', width: 150, minWidth: 10 },\n            { field: 'CustomerName', headerText: 'Customer Name', width: 180, minWidth: 10 },\n            { field: 'OrderDate', headerText: 'Order Date', width: 150, format: 'yMd', textAlign: 'Right', minWidth: 10 },\n            { field: 'ShippedDate', headerText: 'Shipped Date', width: 180, format: 'yMd', textAlign: 'Right', minWidth: 10 },\n            { field: 'ShipName', headerText: 'Ship Name', width: 300, minWidth: 10 },\n            { field: 'ShipAddress', headerText: 'Ship Address', width: 270, minWidth: 10 },\n            { field: 'ShipCity', headerText: 'Ship City', width: 250, minWidth: 10 },\n            { field: 'ShipCountry', headerText: 'Ship Country', width: 250, minWidth: 10 }\n        ]\n    });\n    grid.appendTo('#Grid');\n    //Render NumericTextbox component with specific range for frozen rows.\n    var rows = new ej.inputs.NumericTextBox({\n        min: 0,\n        max: 5,\n        validateDecimalOnType: true,\n        decimals: 0,\n        format: 'n',\n        value: 2\n    });\n    rows.appendTo('#rows');\n    //Render NumericTextbox component with specific range for frozen columns.\n    var columns = new ej.inputs.NumericTextBox({\n        min: 1,\n        max: 2,\n        validateDecimalOnType: true,\n        decimals: 0,\n        format: 'n',\n        value: 1\n    });\n    columns.appendTo('#columns');\n    //Render Button component in properties panel.\n    var buttonSet = new ej.buttons.Button();\n    buttonSet.appendTo('#buttonSet');\n    if (ej.base.Browser.isDevice) {\n        columns.max = 1;\n        rows.max = 5;\n    }\n    //After clicking 'Set' button, the `frozenRows` and `frozenColumns` values will be updated in Grid.\n    document.getElementById('buttonSet').onclick = function () {\n        grid.frozenColumns = columns.value;\n        grid.frozenRows = rows.value;\n    };\n\n"}