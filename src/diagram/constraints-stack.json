{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/constraints/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-10 control-section\">\n    <style>\n        /* Property panel CSS */\n            .diagram-property-tab .row {\n                margin-left: 0px;\n                margin-right: 0px;\n                padding-top: 8px;\n            }\n        </style>\n<div class=\"content-wrapper\" style=\"width:100%; background: white\">\n    <div id=\"diagram\"></div>\n</div>\n    \n    \n</div>\n<div class=\"col-lg-2 property-section diagram-property-tab\">\n    <div class=\"property-panel-header\">\n        Diagram Constraints\n    </div>\n    <div class=\"row property-panel-content\">\n        <div class=\"row\">\n            <input type=\"checkbox\" id=\"zooming\">\n        </div>\n        <div class=\"row\">\n            <input type=\"checkbox\" id=\"undoRedo\">\n        </div>\n        <div class=\"row\">\n            <input type=\"checkbox\" id=\"editing\">\n        </div>\n        <div class=\"row\">\n            <input type=\"checkbox\" id=\"contextMenu\">\n        </div>\n        <div class=\"row\">\n            <input type=\"checkbox\" id=\"selectable\">\n        </div>\n        <div class=\"row\">\n            <input type=\"checkbox\" id=\"draggable\">\n        </div>\n    </div>\n</div></div></body></html>","index.js":"{{ripple}}\nej.diagrams.Diagram.Inject(ej.diagrams.UndoRedo);\n\n    //Initializes the nodes for the diagram\n    var nodes = [\n        {\n            id:\"textNode1\",\n            // Position of the node\n            offsetX:340,\n            offsetY: 50,\n            height: 50,\n            width: 550,\n             //Customizes the appearances such as text, font, fill, and stroke.\n            style : { strokeColor : 'none', fill : 'none', color : 'black', textAlign : 'Center' },\n            constraints : ej.diagrams.NodeConstraints.None,\n            //Sets type of the node\n            shape: { type: 'Text', content: 'Use Node Constraints to restrict end-users from performing certain operations on Node.' },           \n        },\n        {\n            id:\"rectangle\",\n            offsetX:80,\n            offsetY:160,\n            height: 65,\n            shape: { type: 'Basic', shape: 'Rectangle' },\n            annotations: [{ content: 'Selection = False', }],\n            constraints: ej.diagrams.SelectorConstraints.None\n        },\n        {\n            id:\"ellipse\",\n            offsetX:190,\n            offsetY:160,\n            height: 80,\n            shape: { type: 'Basic', shape: 'Ellipse',cornerRadius: 10 },\n            annotations: [{ content: 'Dragging = False' }],\n            constraints:  ej.diagrams.NodeConstraints.Default & ~ ej.diagrams.NodeConstraints.Drag\n           \n        },\n        {\n            id:\"heptagon\",\n            offsetX:295,\n            offsetY:160,\n            height: 80,\n            shape: { type: 'Basic', shape: 'Heptagon' },\n            annotations: [{ content: 'Delete = False' }],\n            constraints: ej.diagrams.NodeConstraints.Default & ~ ej.diagrams.NodeConstraints.Delete\n        },\n        {\n            id:\"directData\",\n            offsetX:410,\n            offsetY:160,\n            height: 80,\n            rotateAngle:-45,\n            shape: { type: 'Flow', shape: 'DirectData' },\n            annotations: [{ content: 'Rotate = False' }],\n            constraints: ej.diagrams.NodeConstraints.Default &~ ej.diagrams.NodeConstraints.Rotate\n        },\n        {\n            id:\"Plus\",\n            offsetX:530,\n            offsetY:160,\n            height: 80,\n            shape: { type: 'Basic', shape: 'Plus' },\n            annotations: [{ content: 'TextEdit = False',constraints:ej.diagrams.AnnotationConstraints.ReadOnly }],\n        },\n        {\n            id:\"decision\",\n            offsetX:630,\n            offsetY:160,\n            height: 80,\n            shape: { type: 'Flow', shape: 'Decision' },\n            annotations: [{ content: 'Resizing = False' }],\n           constraints: ej.diagrams.NodeConstraints.Default & ~ ej.diagrams.NodeConstraints.Resize\n        },\n        {\n            id:\"textNode2\",\n            // Position of the node\n            offsetX:350,\n            offsetY: 280,\n            height: 50,\n            width: 550,\n            //Customizes the appearances such as text, font, fill, and stroke.\n            style : { strokeColor : 'none', fill : 'none', color : 'black', textAlign : 'Center' },\n            constraints : ej.diagrams.NodeConstraints.None,\n            //Sets type of the node\n            shape: { type: 'Text', content: 'Use Connector Constraints to restrict end-users from performing certain operations on Connector.' },\n        },\n    ];\n    //Initializes the connectors for the diagram\n    var connectors = [{\n        id: \"select\",\n        type: 'Orthogonal',\n        annotations: [{ content: 'Selection = False' , horizontalAlignment: 'Right' , verticalAlignment: 'Bottom' }],\n         constraints: ej.diagrams.ConnectorConstraints.Default & ~ej.diagrams.ConnectorConstraints.Select,\n        sourcePoint: {\n            x: 40,\n            y: 350\n        },\n        targetPoint: {\n            x: 120,\n            y: 430\n        }\n    },\n    {\n        id: \"connector2\",\n        type: 'Orthogonal',\n        annotations: [{ content: 'Dragging = True',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n        constraints: ej.diagrams.ConnectorConstraints.Default | ~ej.diagrams.ConnectorConstraints.Drag,\n        sourcePoint: {\n            x: 140,\n            y: 350\n        },\n        targetPoint: {\n            x: 220,\n            y: 430\n        }\n    },\n    {\n        id: \"delete\",\n        type: 'Orthogonal',\n        annotations: [{ content: 'Delete = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n        constraints: (ej.diagrams.ConnectorConstraints.Default | ej.diagrams.ConnectorConstraints.DragSegmentThumb) &~(ej.diagrams.ConnectorConstraints.Delete | ej.diagrams.ConnectorConstraints.Drag),\n        sourcePoint: {\n            x: 250,\n            y: 350\n        },\n        targetPoint: {\n            x: 320,\n            y: 430\n        }\n    },\n    {\n        id: \"endThumb\",\n        type: 'Orthogonal',\n        annotations: [{ content: 'EndThumb = False' ,horizontalAlignment: 'Right' , verticalAlignment: 'Bottom' }],\n        constraints:(ej.diagrams.SelectorConstraints.All ) &~ ( ej.diagrams.SelectorConstraints.ConnectorSourceThumb | ej.diagrams.SelectorConstraints.ConnectorTargetThumb),\n        sourcePoint: {\n            x: 360,\n            y: 350\n        },\n        targetPoint: {\n            x: 440,\n            y: 430\n        }\n    },\n    {\n        id: \"draggable\",\n        type: 'Orthogonal',\n        annotations: [{ content: 'EndDraggable = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n        constraints: (ej.diagrams.ConnectorConstraints.Default | ej.diagrams.ConnectorConstraints.DragSegmentThumb) &~(ej.diagrams.ConnectorConstraints.DragSourceEnd | ej.diagrams.ConnectorConstraints.DragTargetEnd),\n        sourcePoint: {\n            x: 460,\n            y: 350\n        },\n        targetPoint: {\n            x: 540,\n            y: 430\n        }\n    },\n    {\n        id: \"segmentThumb\",\n        type: 'Orthogonal',\n        annotations: [{ content: 'SegmentThumb = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n        constraints: ej.diagrams.ConnectorConstraints.Default &~ ej.diagrams.ConnectorConstraints.Drag,\n        sourcePoint: {\n            x: 580,\n            y: 350\n        },\n        targetPoint: {\n            x: 660,\n            y: 430\n        }\n    },];\n    // Function to set default values for nodes\n    function nodeDefaults(nodes) {\n        // Apply default settings if the node is not 'textNode1' or 'textNode2'\n        if(nodes.id !== \"textNode1\" && nodes.id !== \"textNode2\") {\n        nodes.width = 80;\n        nodes.style.fill = '#C7E6FF';\n        nodes.style.strokeColor = '#1587FF';\n        }\n    }\n    // Function to set default values for connectors\n    function connectorDefaults(connectors) {\n        connectors.style.strokeColor = '#6BA5D7';\n        connectors.style.strokeWidth = 2;\n        connectors.targetDecorator.style.strokeColor = '#6BA5D7';\n        connectors.targetDecorator.style.fill = '#6BA5D7';\n        return connectors;  // Return the modified connector\n    }\n    //Initializes the user handles for the diagram\n    var handles = [\n        {\n            name: 'delete', pathData: \"M 7.04 22.13 L 92.95 22.13 L 92.95 88.8 C 92.95 91.92 91.55 94.58 88.76 96.74 C 85.97 98.91 82.55 100 78.52 100 L 21.48 100 C 17.45 100 14.03 98.91 11.24 96.74 C 8.45 94.58 7.04 91.92 7.04 88.8 z M 32.22 0 L 67.78 0 L 75.17 5.47 L 100 5.47 L 100 16.67 L 0 16.67 L 0 5.47 L 24.83 5.47 z\",\n            visible: true, offset: 0.5, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n        }\n    ];\n    // Function to handle actions performed by user handles\n    function getTool(action) {\n        var tool;\n        // Check if the action is 'delete'\n        if (action === 'delete') {\n             // Remove the selected object from the diagram\n            diagram.remove();\n        }\n        // Return the tool (undefined in this case)\n        return tool;\n    }\n    // CheckBox used to enable zooming of the diagram\n    var Zooming = new ej.buttons.CheckBox({ label: 'Zooming',checked:true, \n    change:function () { \n        // Toggle the zoom constraint for the diagram\n            diagram.constraints = diagram.constraints ^ ej.diagrams.DiagramConstraints.Zoom;\n     }});\n     // Append the Zooming CheckBox to the element with id 'zooming'\n    Zooming.appendTo('#zooming');\n\n    // CheckBox used to enable undo/redo in the diagram\n    var undoRedo = new ej.buttons.CheckBox({ label: 'Undo/Redo', checked:true,\n    change:function () { \n        // Toggle the undo/redo constraint for the diagram\n        diagram.constraints = diagram.constraints ^ ej.diagrams.DiagramConstraints.UndoRedo ;\n        diagram.dataBind();\n     } });\n     // Append the undoRedo CheckBox to the element with id 'undoRedo'\n    undoRedo.appendTo('#undoRedo');\n    \n    //CheckBox used to enable editing\n    var Editing = new ej.buttons.CheckBox({ label: 'Editing',checked:true,\n    change:function (args) { \n        // Iterate through all nodes in the diagram\n        for (var i = 0; i < diagram.nodes.length; i++) {\n            var node = diagram.nodes[i];\n            // Check if the node has annotations with content\n              if (node.annotations.length > 0 && node.annotations[0].content) {\n                // If editing is enabled, remove ReadOnly constraint for annotations except 'Plus' node\n                if (args.checked) {\n                  if (node.id !== 'Plus') {\n                    node.annotations[0].constraints =\n                      node.annotations[0].constraints ^\n                      ej.diagrams.AnnotationConstraints.ReadOnly;\n                  }\n                } else {\n                    // If editing is disabled, add ReadOnly constraint for annotations\n                  node.annotations[0].constraints =\n                    node.annotations[0].constraints |\n                    ej.diagrams.AnnotationConstraints.ReadOnly;\n                }\n              }\n        }\n        // Iterate through all connectors in the diagram\n          for (var x = 0; x < diagram.connectors.length; x++) {\n            var connector = diagram.connectors[x];\n             // Check if the connector has annotations with content\n              if (connector.annotations.length > 0 && connector.annotations[0].content) {\n                if (args.checked) {\n                    // If editing is enabled, handle 'select' connector differently\n                  if (connector.id === 'select') {\n                    connector.constraints =\n                      connector.constraints &\n                      ~ej.diagrams.ConnectorConstraints.Select;\n                  } else {\n                    // Remove ReadOnly constraint for connector annotations\n                    connector.annotations[0].constraints =\n                      connector.annotations[0].constraints ^\n                      ej.diagrams.AnnotationConstraints.ReadOnly;\n                  }\n                } else {\n                    // If editing is disabled, add ReadOnly constraint for connector annotations\n                  connector.annotations[0].constraints =\n                    connector.annotations[0].constraints ^\n                    ej.diagrams.AnnotationConstraints.ReadOnly;\n                }\n              }\n          }\n          diagram.dataBind(); // Update the diagram with the new constraints\n    }});\n    // Append the Editing CheckBox to the element with id 'editing'\n    Editing.appendTo('#editing');\n   // CheckBox used to enable selection in the diagram\n    var Selectable = new ej.buttons.CheckBox({ label: 'Selectable' ,checked:true,\n    change:function (args) { \n         // Iterate through all nodes in the diagram\n        for (var i = 0; i < diagram.nodes.length; i++) {\n            var node = diagram.nodes[i];\n            if (args.checked) {\n                // If selection is enabled, add the Select constraint to the node\n                node.constraints  = node.constraints | ej.diagrams.NodeConstraints.Select;\n            } \n            else \n            {\n                // If selection is disabled, remove the Select constraint from the node\n                node.constraints = node.constraints &~  ej.diagrams.NodeConstraints.Select;\n            }\n            diagram.dataBind(); // Update the diagram with the new constraints\n        }\n        // Iterate through all connectors in the diagram\n        for (var j = 0; j < diagram.connectors.length; j++) {\n            var connector = diagram.connectors[j];\n            if (args.checked) {\n                // If selection is enabled\n                if(connector.id ===\"select\"){\n                    // Toggle the Select constraint for the 'select' connector\n                    connector.constraints=connectors.constraints^ej.diagrams.ConnectorConstraints.Select;\n                }\n                else{\n                    // Add the Select constraint to other connectors\n                    connector.constraints  = connector.constraints | ej.diagrams.ConnectorConstraints.Select;\n                }\n            } \n            else\n            {\n                // If selection is disabled\n                if(connector.id ===\"endThumb\"){\n                    // Toggle the Select constraint for the 'endThumb' connector\n                    connector.constraints=connectors.constraints^ej.diagrams.ConnectorConstraints.Select;\n                }\n                else\n                {\n                     // Remove the Select constraint from other connectors\n                connector.constraints = connector.constraints &~ ej.diagrams.ConnectorConstraints.Select;\n                }\n            }\n            diagram.dataBind(); // Update the diagram with the new constraints\n        }\n        \n    }});\n    // Append the Selectable CheckBox to the element with id 'selectable'\n    Selectable.appendTo('#selectable');\n    // CheckBox used to enable dragging interactions in the diagram\n    var Draggable = new ej.buttons.CheckBox({ label: 'Draggable',checked:true,\n    change:function (args) { \n         // Iterate through all nodes in the diagram\n        for (var i = 0; i < diagram.nodes.length; i++) {\n            var nodes = diagram.nodes[i];\n            if (args.checked) {\n                // If dragging is enabled, disable drag for the 'ellipse' node and enable drag for other nodes\n                if(nodes.id ===\"ellipse\"){\n                        nodes.constraints = ej.diagrams.NodeConstraints.Default & ~ ej.diagrams.NodeConstraints.Drag;\n                }\n                else{\n                    nodes.constraints = nodes.constraints | ej.diagrams.NodeConstraints.Drag;\n                }\n            } \n            else {\n                 // If dragging is disabled, remove the drag constraint from all nodes\n                    nodes.constraints = nodes.constraints &~ ej.diagrams.NodeConstraints.Drag;\n            }\n            diagram.dataBind(); // Update the diagram with the new constraints\n        }\n        // Iterate through all connectors in the diagram\n        for (var j = 0; j < diagram.connectors.length; j++) {\n            var connectors = diagram.connectors[j];\n            if (args.checked) {\n                // If dragging is enabled, add the drag constraint to all connectors\n                connectors.constraints = connectors.constraints | ej.diagrams.ConnectorConstraints.Drag;   \n            } else \n            {\n                // If dragging is disabled, remove the drag constraint from all connectors\n                connectors.constraints = connectors.constraints  &~ ej.diagrams.ConnectorConstraints.Drag;   \n            }\n            diagram.dataBind(); // Update the diagram with the new constraints\n        }\n    }});\n    // Append the Draggable CheckBox to the element with id 'draggable'\n    Draggable.appendTo('#draggable');  \n        \n        //CheckBox used to enable context menu on right click\n        var Contextmenu = new ej.buttons.CheckBox({ label: 'Context Menu',checked:true,\n        change:function (args) { \n            if (args.checked) {\n                // If context menu is enabled, show the context menu\n                diagram.contextMenuSettings.show = true;\n                diagram.refresh();\n                } \n            else {\n                // If context menu is disabled, hide the context menu\n                diagram.contextMenuSettings.show = false;\n                }\n            diagram.dataBind(); // Update the diagram with the new settings\n        }});\n        // Append the Contextmenu CheckBox to the element with id 'contextMenu'\n        Contextmenu.appendTo('#contextMenu');\n        // Function to handle selection changes in the diagram\n        selectionChange = function (args) \n        {\n            if(args.state === 'Changing')\n            {\n                if(args.type === 'Addition')\n                {\n                    if(args.newValue[0].id === \"endThumb\")\n                {\n                    // Disable connector source and target thumbs for 'endThumb' connector\n                    diagram.selectedItems.constraints =(ej.diagrams.SelectorConstraints.All ) &~ ( ej.diagrams.SelectorConstraints.ConnectorSourceThumb | ej.diagrams.SelectorConstraints.ConnectorTargetThumb) ;\n                    args.newValue[0].constraints = (ej.diagrams.ConnectorConstraints.Default  | ej.diagrams.ConnectorConstraints.DragSegmentThumb) &~ (ej.diagrams.ConnectorConstraints.Drag);\n                }\n                else{\n                    // Enable all constraints for selected items\n                    diagram.selectedItems.constraints = ej.diagrams.SelectorConstraints.All;\n                    }\n                }\n                else\n                {\n                    // Enable all constraints for selected items\n                    diagram.selectedItems.constraints = ej.diagrams.SelectorConstraints.All;\n                }\n                            \n            }  \n            if(args.state === \"Changed\")\n            {\n                // If a node is selected, enable user handles\n                if(args.newValue.length>0 && args.newValue[0] instanceof ej.diagrams.Node){\n                    diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All|ej.diagrams.SelectorConstraints.UserHandle, userHandles: handles };\n                    }\n                    else{\n                        // If a connector other than 'endThumb' is selected, disable user handles\n                        if(args.newValue.length>0 && args.newValue[0].id !== \"endThumb\"){\n                            diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All &~ ej.diagrams.SelectorConstraints.UserHandle };\n                        }\n                        else{\n                            // Disable user handles and connector thumbs for 'endThumb'\n                            diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All &~(ej.diagrams.SelectorConstraints.UserHandle|ej.diagrams.SelectorConstraints.ConnectorSourceThumb | ej.diagrams.SelectorConstraints.ConnectorTargetThumb)   };\n                        }\n                    }\n            }\n        } ;\n        //Initializes the diagram\n        var diagram = new ej.diagrams.Diagram({\n            width: '100%', height: '550px', nodes: nodes, connectors: connectors,\n            contextMenuSettings: {\n                show: true,   \n            },\n            rulerSettings: {\n                showRulers: true\n            },\n            selectionChange: function (args) { selectionChange(args); },\n            selectedItems: { constraints: ej.diagrams.SelectorConstraints.UserHandle, userHandles: handles },\n            getCustomTool: getTool,// Set the custom tool handler\n            getConnectorDefaults: function (connectors) {\n                return connectorDefaults(connectors); // Set the default connector settings\n            },\n            getNodeDefaults: function (nodes) {\n                return nodeDefaults(nodes); // Set the default node settings\n            }\n        }, '#diagram');\n\n"}