{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/history-manager/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-8 control-section\">\n    <style>\n        /* These are proprty panel CSS */\n        #historyPropertySection .row {\n            margin-left: 0px;\n            margin-right: 0px;\n        }\n\n        #historyControlSection.content-wrapper {\n            border: 1px solid #D7D7D7;\n        }\n\n        #historyPropertySection .listbox {\n            width: 100%;\n            height: 50%;\n        }\n\n        #historyPropertySection .heading {\n            color: #807f7f;\n            font-size: 15px;\n            height: 50px;\n            width: 100%;\n            border-bottom: 1px solid #d9dedd;\n            padding: 10px;\n        }\n    </style>\n\n    <div id=\"historyControlSection\" class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div id=\"historyPropertySection\" class=\"col-lg-4 property-section\" style=\"padding-right: 0px\">\n    <div class=\"property-panel-header\">\n        History manager settings\n    </div>\n    <div class=\"row property-panel-content\" id=\"appearance\">\n        <div class=\"row property-panel-content\">\n            <div class=\"row\">\n                <div class=\"listbox\" style=\"height:100%;border: 1px solid #e0e0e0\">\n                    <div class=\"heading\" style=\"height:40px\">\n                        <span>\n                            Undo Stack\n                        </span>\n                        <div style=\"float: right; margin-top: -5px\">\n                            <button id=\"undo\" style=\"width:100%\">\n                                Undo\n                            </button>\n                        </div>\n                    </div>\n                    <div id=\"undoList\"></div>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 10px\">\n                <div class=\"listbox\" style=\"height:100%;border: 1px solid #e0e0e0\">\n                    <div class=\"heading\" style=\"height:40px\">\n                        <span>\n                            Redo Stack\n                        </span>\n                        <div style=\"float: right; margin-top: -5px\">\n                            <button id=\"redo\" style=\"width:100%\">\n                                Redo\n                            </button>\n                        </div>\n                    </div>\n                    <div id=\"redoList\"></div>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 10px\">\n                <div style=\"display: table;height: 35px; padding-left: 0px\" class=\"col-xs-6\">\n                    <div style=\"display: table-cell; vertical-align: middle\">Stack Limit</div>\n                </div>\n                <div class=\"col-xs-6\" style=\"padding-left: 0px; padding-right: 0px\">\n                    <input type=\"text\" id=\"StackLimit\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 10px\">\n                <div class=\"col-xs-6\" style=\"padding-left: 0px\">\n                    <button id=\"startGroupAction\" title=\"startGroupAction\" style=\"width:100%;overflow: hidden;text-overflow: ellipsis\">\n                        Start Group Action\n                    </button></div>\n                <div class=\"col-xs-6\" style=\"padding-left: 0px; padding-right: 0px\">\n                    <button id=\"clearHistory\" title=\"clearHistory\" style=\"width:100%\">\n                        Clear\n                    </button>\n                </div>\n            </div>\n\n        </div>\n\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}/*jslint esversion: 6 */\nej.diagrams.Diagram.Inject(ej.diagrams.UndoRedo);\n\n\n\n    // Helper function to create a NodeModel with default parameters\n    function createNode(\n        id,\n        offsetX,\n        offsetY,\n        fill,\n        strokeColor,\n        shape,\n        content,\n        width = 70,\n        height = 40,\n        ports = []) {\n        return {\n            id,\n            offsetX,\n            offsetY,\n            style: { fill, strokeColor },\n            width,\n            height,\n            shape: { type: 'Flow', shape: shape },\n            annotations: [{ content: content }],\n            ports\n        };\n    }\n\n    // Initialize Diagram Nodes using the createNode function\n    let nodes = [\n        createNode('node1', 400, 30, '#FFB2B2', '#FFB2B2', 'Terminator', 'Start'),\n        createNode('node2', 400, 100, '#DCDCDC', '#DCDCDC', 'Process', 'Design', undefined, undefined, [{ id: 'designPort', offset: { x: 0, y: 0.5 } }]),\n        createNode('node3', 400, 180, '#DCDCDC', '#DCDCDC', 'Process', 'Coding', undefined, undefined, [{ id: 'codingPort', offset: { x: 0, y: 0.5 } }]),\n        createNode('node4', 400, 260, '#DCDCDC', '#DCDCDC', 'Process', 'Testing'),\n        createNode('node5', 400, 340, '#A2D8B0', '#A2D8B0', 'Decision', 'Errors?', 80, 60),\n        createNode('node6', 400, 430, '#FFB2B2', '#FFB2B2', 'Terminator', 'End'),\n        createNode('node7', 220, 180, '#A2D8B0', '#A2D8B0', 'Decision', 'Design Error?', 100, 60, [\n            { id: 'porterror', offset: { x: 0.5, y: 0 } },\n            { id: 'portcoding', offset: { x: 1, y: 0.5 } },\n            { id: 'portdesign', offset: { x: 0.5, y: 1 } }\n        ])\n    ];\n\n    // Initialize Diagram Connectors using the createConnector function\n    let connectors = [\n        createConnector('connector1', 'node1', 'node2'),\n        createConnector('connector2', 'node2', 'node3'),\n        createConnector('connector3', 'node3', 'node4'),\n        createConnector('connector4', 'node4', 'node5'),\n        createConnector('connector5', 'node5', 'node6', [{ content: 'No', style: { fill: 'white' } }]),\n        createConnector('connector6', 'node5', 'node7', [{ content: 'Yes', style: { fill: 'white' } }], [{ type: 'Orthogonal', length: 150, direction: 'Left' }]),\n        createConnector('connector7', 'node7', 'node3', [{ content: 'No', style: { fill: 'white' } }], [{ type: 'Orthogonal', length: 10, direction: 'Left' }], 'portcoding', 'codingPort'),\n        createConnector('connector8', 'node7', 'node2', [{ content: 'Yes', style: { fill: 'white' } }], [], 'porterror', 'designPort')\n    ];\n\n    // Helper function to create a ConnectorModel with default parameters\n    function createConnector(\n        id,\n        sourceID,\n        targetID,\n        annotations,\n        segments = [],\n        sourcePortID = '',\n        targetPortID = '') {\n        return {\n            id,\n            sourceID,\n            targetID,\n            annotations,\n            type: 'Orthogonal',\n            segments,\n            sourcePortID,\n            targetPortID\n        };\n    }\n    var diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '600px', nodes: nodes, connectors: connectors,\n        getNodeDefaults: getNodeDefaults,\n        snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\n        getConnectorDefaults: function (obj) {\n            obj.style.fill = '#707070';\n            obj.targetDecorator.style.fill = '#707070';\n            obj.targetDecorator.style.strokeColor = '#707070';\n        }\n    });\n    diagram.appendTo('#diagram');\n    // Callback function when history changes\n    diagram.historyChange = function (arg) {\n        updateHistoryLists();\n    };\n    // Fit diagram to page height\n    diagram.fitToPage({ mode: 'Height' });\n    // Numeric text box for stack limit\n    var stackLimitTextBox = new ej.inputs.NumericTextBox({\n        value: 0, min: 0, max: 50, width: '100%',\n        format: '##.##', step: 1,\n        change: function (args) {\n            diagram.setStackLimit(args.value);\n        }\n    });\n    stackLimitTextBox.appendTo('#StackLimit');\n    // ListView for redo history\n    var listviewInstance = new ej.lists.ListView({\n        fields: { value: 'value', text: 'text' },\n        headerTitle: 'Device settings',\n        height: \"180px\",\n    });\n    listviewInstance.appendTo(\"#redoList\");\n    // ListView for undo history\n    var listview = new ej.lists.ListView({\n        fields: { value: 'value', text: 'text' },\n        headerTitle: 'Device settings',\n        height: \"180px\",\n    });\n    listview.appendTo(\"#undoList\");\n    // Button to clear history\n    var clearHistory = new ej.buttons.Button({\n        content: 'Clear History',\n    });\n    clearHistory.appendTo('#clearHistory');\n    clearHistory.element.onclick = function () {\n        diagram.clearHistory();\n        updateHistoryLists();\n    };\n    // Toggle button for starting and ending group action\n    var startGroupAction = new ej.buttons.Button({\n        isToggle: true,\n    });\n    startGroupAction.appendTo('#startGroupAction');\n    startGroupAction.element.onclick = function () {\n        if (startGroupAction.element.classList.contains('e-active')) {\n            startGroupAction.content = 'End Group Action';\n            diagram.startGroupAction();\n        }\n        else {\n            diagram.endGroupAction();\n            startGroupAction.content = 'Start Group Action';\n        }\n    };\n    // Button for undo action\n    var undoButton = new ej.buttons.Button({\n        disabled: true\n    });\n    undoButton.appendTo('#undo');\n    undoButton.element.onclick = function () {\n        diagram.undo();\n    };\n    // Button for redo action\n    var redoButton = new ej.buttons.Button({\n        disabled: true\n    });\n    redoButton.appendTo('#redo');\n    redoButton.element.onclick = function () {\n        diagram.redo();\n    };\n\n    // Function to define default properties for Node \n    function getNodeDefaults(obj) {\n        obj.annotations[0].style.color = '#111111';\n        return obj;\n    }\n    // Function to update lists and button states based on history\n    function updateHistoryLists() {\n        var historyManager = diagram.historyManager;\n        var undoStack = historyManager.undoStack;\n        var redoStack = historyManager.redoStack;\n        var undo = undoStack.map(item => ({ text: item.type, value: item.type }));\n        var redo = redoStack.map(item => ({ text: item.type, value: item.type }));\n\n        undoButton.disabled = undo.length === 0;\n        redoButton.disabled = redo.length === 0;\n\n        updateListView('#undoList', undo);\n        updateListView('#redoList', redo);\n    }\n\n    function updateListView(selector, data) {\n        var listView = document.querySelector(selector).ej2_instances[0];\n        listView.dataSource = data;\n        listView.fields = { text: 'text', value: 'value' };\n        listView.index = 0;\n        listView.dataBind();\n    }\n\n"}