{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/uml-class-diagram/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n  <link href=\"https://ej2.syncfusion.com/demos/src/diagram/styles/diagram-common.css\" rel=\"stylesheet\">\n  <style>\n    /* These styles are used for aligning palette and diagram */\n    .diagram-umlclass .sb-mobile-palette {\n        width: 250px;\n        height: 559px;\n        float: left;\n    }\n\n    .diagram-umlclass .sb-mobile-palette-bar {\n        display: none;\n    }\n\n    .diagram-umlclass .sb-mobile-diagram {\n        width: calc(99% - 242px);\n        height: 559px;\n        float: left;\n        border: 1px solid rgba(0, 0, 0, 0.12);\n        border-left: none;\n    }\n\n    @media (max-width: 550px) {\n        .diagram-umlclass .sb-mobile-palette {\n            z-index: 19;\n            position: absolute;\n            display: none;\n            transition: transform 300ms linear, visibility 0s linear 300ms;\n            width: 39%;\n            height: 100%;\n        }\n        .diagram-umlclass .sb-mobile-diagram {\n            width: 60%;\n            height: 100%;\n            float: left;\n            left: 0px;\n        }\n        .diagram-umlclass .sb-mobile-palette-bar {\n            display: block;\n            width: 100%;\n            background: #fafafa;\n            padding: 10px 10px;\n            border: 0.5px solid #e0e0e0;\n            min-height: 40px;\n        }\n        .diagram-umlclass #palette-icon {\n            font-size: 20px;\n        }\n    }\n\n    .diagram-umlclass .sb-mobile-palette-open {\n        position: absolute;\n        display: block;\n        right: 15px;\n    }\n\n</style>\n  <div id=\"umlclassDiagram\" style=\"width: 100%;\" class=\"diagram-umlclass\">\n    <div class=\"sb-mobile-palette-bar\">\n        <div id=\"palette-icon\" style=\"float: right;\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n    </div>\n    <div id=\"palette-space\" class=\"sb-mobile-palette\">\n        <div id=\"symbolpalette\" style=\"width:90%;\"></div>\n    </div>\n    <div id=\"diagram-space\" class=\"sb-mobile-diagram\" style=\"float: right;\">\n      <div id=\"diagram\" class=\"diagramclass\"></div>\n  </div>\n</div>\n\n\n</div></div></body></html>","index.js":"{{ripple}}/**\n * Class Diagram\n */\n\n\n\n\n  //Set default values for a node.\n  function getNodeDefaults(node) {\n    node.style = { fill: \"#26A0DA\", strokeColor: \"white\" };\n    //set the style of annotations for a given node.\n    if (node.annotations.length > 0) {\n      for (var i = 0; i < node.annotations.length; i++) {\n        node.annotations[i].style.color = \"white\";\n      }\n    }\n    return node;\n  }\n  function getConnectorDefaults(connector) {\n    return connector;\n  }\n  // Create and return a connector object with specified properties during initial rendering\n  function createConnector(Id, sourceID, targetID) {\n    var connector = {};\n    connector.id = Id;\n    connector.sourceID = sourceID;\n    connector.targetID = targetID;\n    return connector;\n  }\n  // Create and return a node object with specified properties during initial rendering\n  function createNode(Id, offsetX, offsetY, className) {\n    var node = {};\n    node.id = Id;\n    node.offsetX = offsetX;\n    node.offsetY = offsetY;\n    node.shape = {\n      type: \"UmlClassifier\",\n      classShape: {\n        name: className\n      },\n      classifier: \"Class\"\n    };\n    return node;\n  }\n  function createProperty(name, type) {\n    return { name: name, type: type };\n  }\n  function createMethods(name, type) {\n    return { name: name, type: type };\n  }\n  //Initialize nodes for the diagram.\n  var nodes = [\n    {\n      id: \"Patient\",\n      shape: {\n        type: \"UmlClassifier\",\n        classShape: {\n          name: \"Patient\",\n          attributes: [\n            createProperty(\"accepted\", \"Date\"),\n            createProperty(\"sickness\", \"History\"),\n            createProperty(\"prescription\", \"String[*]\"),\n            createProperty(\"allergies\", \"String[*]\")\n          ],\n          methods: [createMethods(\"getHistory\", \"History\")]\n        },\n        classifier: \"Class\"\n      },\n      offsetX: 200,\n      offsetY: 250\n    },\n    {\n      id: \"Doctor\",\n      shape: {\n        type: \"UmlClassifier\",\n        classShape: {\n          name: \"Doctor\",\n          attributes: [\n            createProperty(\"specialist\", \"String[*]\"),\n            createProperty(\"locations\", \"String[*]\")\n          ]\n        },\n        classifier: \"Class\"\n      },\n      offsetX: 240,\n      offsetY: 545\n    },\n    {\n      id: \"Person\",\n      shape: {\n        type: \"UmlClassifier\",\n        classShape: {\n          name: \"Person\",\n          attributes: [\n            createProperty(\"name\", \"Name\"),\n            createProperty(\"title\", \"String[*]\"),\n            createProperty(\"gender\", \"Gender\")\n          ]\n        },\n        classifier: \"Class\"\n      },\n      offsetX: 405,\n      offsetY: 105\n    },\n    {\n      id: \"Hospital\",\n      shape: {\n        type: \"UmlClassifier\",\n        classShape: {\n          name: \"Hospital\",\n          attributes: [\n            createProperty(\"name\", \"Name\"),\n            createProperty(\"address\", \"Address\"),\n            createProperty(\"phone\", \"Phone\")\n          ],\n          methods: [createMethods(\"getDepartment\", \"String\")]\n        },\n        classifier: \"Class\"\n      },\n      offsetX: 638,\n      offsetY: 100\n    },\n    {\n      id: \"Department\",\n      shape: {\n        type: \"UmlClassifier\",\n        classShape: {\n          name: \"Department\",\n          methods: [createMethods(\"getStaffCount\", \"Int\")]\n        },\n        classifier: \"Class\"\n      },\n      offsetX: 638,\n      offsetY: 280\n    },\n    {\n      id: \"Staff\",\n      shape: {\n        type: \"UmlClassifier\",\n        classShape: {\n          name: \"Staff\",\n          attributes: [\n            createProperty(\"joined\", \"Date\"),\n            createProperty(\"education\", \"string[*]\"),\n            createProperty(\"certification\", \"string[*]\"),\n            createProperty(\"languages\", \"string[*]\")\n          ],\n          methods: [\n            createMethods(\"isDoctor\", \"bool\"),\n            createMethods(\"getHistory\", \"bool\")\n          ]\n        },\n        classifier: \"Class\"\n      },\n      offsetX: 635,\n      offsetY: 455\n    },\n    createNode(\"OperationStaff\", 410, 455, \"OperationStaff\"),\n    createNode(\"Nurse\", 410, 545, \"Nurse\"),\n    createNode(\"Surgeon\", 240, 665, \"Surgeon\"),\n    createNode(\"AdministrativeStaff\", 632, 605, \"AdministrativeStaff\"),\n    createNode(\"FrontDeskStaff\", 630, 695, \"FrontDeskStaff\"),\n    createNode(\"TechnicalStaff\", 928, 445, \"TechnicalStaff\"),\n    createNode(\"Technician\", 815, 535, \"Technician\"),\n    createNode(\"Technologist\", 1015, 535, \"Technologist\"),\n    createNode(\"SurgicalTechnologist\", 1015, 630, \"SurgicalTechnologist\")\n  ];\n  //Initialize connector for the diagram.\n  var connectors = [\n    createConnector(\"connect1\", \"Patient\", \"Person\"),\n    createConnector(\"connect2\", \"Person\", \"Hospital\"),\n    createConnector(\"connect3\", \"Department\", \"Hospital\"),\n    createConnector(\"connect4\", \"OperationStaff\", \"Patient\"),\n    createConnector(\"connect5\", \"Doctor\", \"OperationStaff\"),\n    createConnector(\"connect6\", \"Nurse\", \"OperationStaff\"),\n    createConnector(\"connect7\", \"Surgeon\", \"Doctor\"),\n    createConnector(\"connect8\", \"FrontDeskStaff\", \"AdministrativeStaff\"),\n    createConnector(\"connect9\", \"Technician\", \"TechnicalStaff\"),\n    createConnector(\"connect10\", \"Technologist\", \"TechnicalStaff\"),\n    createConnector(\"connect11\", \"SurgicalTechnologist\", \"Technologist\"),\n    createConnector(\"connect12\", \"Staff\", \"Department\"),\n    createConnector(\"connect13\", \"Staff\", \"Person\"),\n    createConnector(\"connect14\", \"OperationStaff\", \"Staff\"),\n    createConnector(\"connect15\", \"AdministrativeStaff\", \"Staff\"),\n    createConnector(\"connect16\", \"TechnicalStaff\", \"Staff\")\n  ];\n  //Initialize diagram control\n  var diagram = new ej.diagrams.Diagram({\n    width: '100%', height: '100%',\n    nodes: nodes,\n    connectors: connectors,\n    //Set default values for nodes\n    getNodeDefaults: getNodeDefaults,\n    getConnectorDefaults: getConnectorDefaults,\n    created: function () { diagram.fitToPage(); }\n  });\n  diagram.appendTo(\"#diagram\");\n\n  // Initialize the palettes displayed in the symbol palette\n  var palettes = [\n    {\n      id: 'UmlActivity', expanded: true, title: 'UML Classifier Nodes', symbols: [\n        {\n          id: 'class',\n          shape: {\n            type: 'UmlClassifier',\n            classShape: {\n              attributes: [\n                { name: 'accepted', type: 'Date', isSeparator: true },\n                { name: 'sickness', type: 'History' },\n                { name: 'prescription', type: 'String[*]' },\n                { name: 'allergies', type: 'String[*]' }\n              ],\n              methods: [{ name: 'getHistory', style: {}, parameters: [{ name: 'Date', style: {} }], type: 'History' }],\n              name: 'Patient'\n            },\n            classifier: 'Class'\n          },\n        },\n        {\n          id: 'Interface',\n          shape: {\n            type: 'UmlClassifier',\n            interfaceShape: {\n              name: \"Bank Account\",\n              attributes: [{\n                name: \"owner\",\n                type: \"String[*]\", style: {}\n              },\n              {\n                name: \"balance\",\n                type: \"Dollars\"\n              }],\n              methods: [{\n                name: \"deposit\", style: {},\n                parameters: [{\n                  name: \"amount\",\n                  type: \"Dollars\",\n                  style: {}\n                }],\n              }]\n            },\n            classifier: 'Interface'\n          },\n        },\n        {\n          id: 'Enumeration',\n          shape: {\n            type: 'UmlClassifier',\n            enumerationShape: {\n              name: 'AccountType',\n              members: [\n                {\n                  name: 'Checking Account', style: {}\n                },\n                {\n                  name: 'Savings Account'\n                },\n                {\n                  name: 'Credit Account'\n                }\n              ]\n            },\n            classifier: 'Enumeration'\n          },\n        },\n      ]\n\n    },\n    {\n      id: 'umlConnectorrs', expanded: true, title: 'UML Classifier Connectors', symbols: [\n        {\n          id: 'Composition',\n          sourcePoint: { x: 100, y: 200 },\n          targetPoint: { x: 200, y: 300 },\n          type: 'Straight',\n          shape: { type: 'UmlClassifier', relationship: 'Composition' }\n        },\n        {\n          id: 'BiDirectional',\n          type: 'Straight',\n          sourcePoint: { x: 300, y: 200 },\n          targetPoint: { x: 400, y: 300 },\n          shape: { type: 'UmlClassifier', relationship: 'Aggregation', associationType: 'BiDirectional' }\n        },\n        {\n          id: 'Directional',\n          type: 'Straight',\n          sourcePoint: { x: 500, y: 200 },\n          targetPoint: { x: 600, y: 300 },\n          shape: { type: 'UmlClassifier', relationship: 'Association', associationType: 'Directional' }\n        },\n        {\n          id: 'Association',\n          type: 'Straight',\n          sourcePoint: { x: 700, y: 200 },\n          targetPoint: { x: 800, y: 300 },\n          shape: { type: 'UmlClassifier', relationship: 'Association' }\n        },\n        {\n          id: 'Inheritance',\n          type: 'Straight',\n          sourcePoint: { x: 900, y: 200 },\n          targetPoint: { x: 1000, y: 300 },\n          shape: { type: 'UmlClassifier', relationship: 'Inheritance' }\n        },\n        {\n          id: 'Interfaces',\n          type: 'Straight',\n          sourcePoint: { x: 100, y: 400 },\n          targetPoint: { x: 200, y: 500 },\n          shape: { type: 'UmlClassifier', relationship: 'Interface' }\n        },\n        {\n          id: 'Dependency',\n          type: 'Straight',\n          sourcePoint: { x: 300, y: 400 },\n          targetPoint: { x: 400, y: 500 },\n          shape: { type: 'UmlClassifier', relationship: 'Dependency' }\n        },\n        {\n          id: 'Realization',\n          type: 'Straight',\n          sourcePoint: { x: 500, y: 400 },\n          targetPoint: { x: 600, y: 500 },\n          shape: { type: 'UmlClassifier', relationship: 'Realization' }\n        },\n        {\n          id: \"OneToMany\",\n          type: 'Straight',\n          sourcePoint: {\n            x: 700,\n            y: 400\n          },\n          targetPoint: {\n            x: 800,\n            y: 500\n          },\n          annotations: [{\n            margin: {\n              top: 10,\n              left: 10,\n              right: 10,\n              bottom: 20\n            }\n          }\n          ],\n          shape: {\n            type: \"UmlClassifier\",\n            relationship: 'Dependency',\n            multiplicity: {\n              type: 'OneToMany',\n              source: {\n                optional: true,\n                lowerBounds: '89',\n                upperBounds: '67'\n              },\n              target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n            }\n          }\n        },\n        {\n          id: \"ManyToMany\",\n          sourcePoint: {\n            x: 900,\n            y: 400\n          },\n          targetPoint: {\n            x: 1000,\n            y: 500\n          },\n          annotations: [{\n            margin: {\n              top: 10,\n              left: 10,\n              right: 10,\n              bottom: 20\n            }\n          }\n          ],\n          shape: {\n            type: \"UmlClassifier\",\n            relationship: 'Dependency',\n            multiplicity: {\n              type: 'ManyToMany',\n              source: {\n                optional: true,\n                lowerBounds: '89',\n                upperBounds: '67'\n              },\n              target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n            }\n          }\n        },\n        {\n          id: \"OneToOne\",\n          sourcePoint: { x: 100, y: 600 },\n          targetPoint: { x: 200, y: 700 },\n          annotations: [{\n            margin: {\n              top: 10,\n              left: 10,\n              right: 10,\n              bottom: 20\n            }\n          }\n          ],\n          shape: {\n            type: \"UmlClassifier\",\n            relationship: 'Dependency',\n            multiplicity: {\n              type: 'OneToOne',\n              source: {\n                optional: true,\n                lowerBounds: '89',\n                upperBounds: '67'\n              },\n              target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n            }\n          }\n        },\n        {\n          id: \"ManyToOne\",\n          sourcePoint: { x: 300, y: 600 },\n          targetPoint: { x: 400, y: 700 },\n          annotations: [{\n            margin: {\n              top: 10,\n              left: 10,\n              right: 10,\n              bottom: 20\n            }\n          }\n          ],\n          shape: {\n            type: \"UmlClassifier\",\n            relationship: 'Dependency',\n            multiplicity: {\n              type: 'ManyToOne',\n              source: {\n                optional: true,\n                lowerBounds: '89',\n                upperBounds: '67'\n              },\n              target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n            }\n          }\n        },\n        {\n          id: \"OneToMany\",\n          sourcePoint: { x: 500, y: 600 },\n          targetPoint: { x: 600, y: 700 },\n          annotations: [{\n            margin: {\n              top: 10,\n              left: 10,\n              right: 10,\n              bottom: 20\n            }\n          }\n          ],\n          shape: {\n            type: \"UmlClassifier\",\n            relationship: 'Dependency',\n            multiplicity: {\n              type: 'OneToMany',\n            }\n          }\n        }\n      ]\n    }\n\n  ];\n  //Initializes the symbol palette\n  var palette = new ej.diagrams.SymbolPalette({\n    expandMode: 'Multiple',\n    palettes: palettes,\n    width: '100%', height: '100%',\n    symbolMargin: { left: 12, right: 12, top: 12, bottom: 12 },\n    symbolHeight: 90, symbolWidth: 100,\n    getNodeDefaults: function (symbol) {\n      symbol.width = 100;\n      symbol.height = 100;\n    },\n    getSymbolInfo: function (symbol) {\n      return { fit: true, description: { text: symbol.id, }, tooltip: symbol.addInfo ? symbol.addInfo.tooltip : symbol.id };\n    }\n  });\n\n  palette.appendTo('#symbolpalette');\n\n"}