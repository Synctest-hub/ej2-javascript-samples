{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/diagram-events/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><style>\n\n  /* Symbol palette alignment CSS */\n  .diagram-events-control-section .sb-mobile-palette {\n    width: 200px;\n    height: 100%;\n    float: left;\n  }\n\n  .diagram-events-control-section .sb-mobile-palette-bar {\n    display: none;\n  }\n  /* Diagram alignment CSS */\n  .diagram-events-control-section .sb-mobile-diagram {\n    width: calc(100% - 200px);\n    height: 100%;\n    float: left;\n    border: 1px solid #d9dedd;\n  }\n\n  @media (max-width: 550px) {\n    .diagram-events-control-section .sb-mobile-palette {\n      z-index: 19;\n      position: absolute;\n      display: none;\n      transition: transform 300ms linear, visibility 0s linear 300ms;\n      width: 39%;\n      height: 100%;\n    }\n\n    .diagram-events-control-section .sb-mobile-palette-bar {\n      display: block;\n      width: 100%;\n      background: #fafafa;\n      padding: 10px 10px;\n      border: 0.5px solid #e0e0e0;\n      min-height: 40px;\n    }\n\n    .diagram-events-control-section .sb-mobile-diagram {\n        width: 100%;\n        height: 100%;\n        float: left;\n        left: 0px;\n      }\n  }\n\n  .diagram-events-control-section .sb-mobile-palette-open {\n    position: absolute;\n    display: block;\n    right: 15px;\n  }\n  /* Event property panel CSS */\n  .diagram-events-property-section .event-tracer {\n    width: 240px;\n    height: 700px;\n    min-height: 700px;\n    float: left;\n  }\n\n  .diagram-events-property-section .diagramEvents-heading {\n    color: #807f7f;\n    font-size: 15px;\n    height: 50px;\n    width: 100%;\n    border-bottom: 1px solid #d9dedd;\n    padding: 10px;\n  }\n  /* This color is to indicate the event name in specific color */\n  #EventLog b {\n   color: #388e3c;\n  }\n\n  hr {\n    margin: 1px 10px 1px 0px;\n    border-top: 1px solid #eee;\n  }\n  /* Property panel CSS */\n  .property-section {\n    padding-top: 20px;\n    padding-bottom: 20px;\n    height: 740px;\n    padding-right: 0px;\n  }\n\n  .diagram-events-property-section .evtbtn { \n    float: right; \n  }\n\n  .diagram-events-property-section .diagramEvents-listbox {\n    width: 100%;\n    height: 50%;\n  }\n\n  .diagram-events-property-section .event-tracer .prop-grid {\n    width: 100%;\n    height: 50%;\n  }\n\n  .diagram-events-property-section #EventLog {\n    height: calc(100% - 50px);\n    padding: 15px;\n    overflow: auto;\n    width: 100%;\n  }\n  .diagram-events-control-section{\n    display: flex;\n  }\n</style>\n<div class=\"col-lg-8 control-section\">\n    <div id=\"diagramEventsControlSection\" class=\"content-wrapper diagram-events-control-section\" style=\"width:100%;background: white\">\n      <div id=\"palette-space\" class=\"sb-mobile-palette\">\n        <div id=\"symbolpalette\" style=\"width:90%;\"></div>\n      </div>\n      <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n        <div id=\"diagram\"></div>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-lg-4 property-section\">\n    <div id=\"diagramEventsPropertySection\" class=\"diagram-events-property-section\" style=\"height:100%;border: 1px solid #e0e0e0\">\n      <div class=\"diagramEvents-listbox\">\n        <div class=\"diagramEvents-heading\" style=\"height:40px\"><span>Client-side events</span></div>\n        <div id=\"listview-def\" tabindex=\"1\"></div>\n      </div>\n      <div class=\"prop-grid content\" style=\"height:50%; border-top: 1px solid #e0e0e0\">\n        <div class=\"diagramEvents-heading\">\n          <span style=\"display: inline-block;margin-top: 5px;\">Event arguments</span>\n          <div class=\"evtbtn\"><button id=\"clearButton\">Clear</button></div>\n        </div>\n        <div id=\"EventLog\">\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  \n  </div></body></html>","index.js":"{{ripple}}// Inject necessary dependencies for the diagram\nej.diagrams.Diagram.Inject(ej.diagrams.UndoRedo, ej.diagrams.DiagramContextMenu, ej.diagrams.Snapping);\n\n// Function to define default properties for symbols in the diagram\nfunction getSymbolDefaults(symbol) {\n    symbol.width = 50;\n    symbol.height = 50;\n    symbol.constraints = ej.diagrams.NodeConstraints.Default | ej.diagrams.NodeConstraints.AllowDrop;\n    symbol.style.strokeColor = '#757575';\n}\n\n// Event handler for symbol info event\nfunction getSymbolInfo(symbol) {\n    return { fit: true };\n}\n\n// Event handler for drag enter event\nfunction dragEnter(args) {\n    getEventDetails(args);\n}\n\n// Event handler for drag leave event\nfunction dragLeave(args) {\n    getEventDetails(args);\n}\n\n// Event handler for drag over event\nfunction dragOver(args) {\n    if (args.target) {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for click event\nfunction click(args) {\n    getEventDetails(args);\n}\n\n// Event handler for history change event\nfunction historyChange(args) {\n    getEventDetails(args);\n}\n\n// Event handler for double click event\nfunction doubleClick(args) {\n    getEventDetails(args);\n}\n\n// Event handler for text edit event\nfunction textEdit(args) {\n    getEventDetails(args);\n}\n\n// Event handler for scroll change event\nfunction scrollChange(args) {\n    getEventDetails(args);\n}\n\n// Event handler for selection change event\nfunction selectionChange(args) {\n    // Check if the state is Changed and get event details\n    if (args.state === 'Changed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for size change event\nfunction sizeChange(args) {\n     // Check if the state is completed and get event details\n    if (args.state === 'Completed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for connection change event\nfunction connectionChange(args) {\n     // Check if the state is changed and get event details\n    if (args.state === 'Changed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for source point change event\nfunction sourcePointChange(args) {\n     // Check if the state is completed and get event details\n    if (args.state === 'Completed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for target point change event\nfunction targetPointChange(args) {\n    // Check if the state is completed and get event details\n    if (args.state === 'Completed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for property change event\nfunction propertyChange(args) {\n    getEventDetails(args);\n}\n\n// Event handler for position change event\nfunction positionChange(args) {\n    if (args.state === 'Completed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for rotate change event\nfunction rotateChange(args) {\n    // Check if the state is completed and get event details\n    if (args.state === 'Completed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for collection change event\nfunction collectionChange(args) {\n    // Check if the state is Changed and get event details\n    if (args.state === 'Changed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for mouse enter event\nfunction mouseEnter(args) {\n    getEventDetails(args);\n}\n\n// Event handler for mouse leave event\nfunction mouseLeave(args) {\n    getEventDetails(args);\n}\n\n// Event handler for mouse over event\nfunction mouseOver(args) {\n    getEventDetails(args);\n}\n\n// Event handler for context menu open event\nfunction contextMenuOpen(args) {\n    getEventDetails(args);\n}\n\n// Event handler for context menu before item render event\nfunction contextMenuBeforeItemRender(args) {\n    getEventDetails(args);\n}\n\n// Event handler for context menu click event\nfunction contextMenuClick(args) {\n    getEventDetails(args);\n}\n\n// tslint:disable-next-line:max-func-body-length\n\n\n     // Define data for the ListView\n    var data = [\n        { text: 'Drag enter', id: 'dragEnter' },\n        { text: 'Drag leave', id: 'dragLeave' },\n        { text: 'Drag over', id: 'dragOver' },\n        { text: 'Click', id: 'click', isChecked: true },\n        { text: 'History change', id: 'historyChange', isChecked: true },\n        { text: 'Double click', id: 'doubleClick' },\n        { text: 'Text edit', id: 'textEdit', isChecked: true },\n        { text: 'Scroll change', id: 'scrollChange' },\n        { text: 'Selection change', id: 'selectionChange', isChecked: true },\n        { text: 'Size change', id: 'sizeChange', isChecked: true },\n        { text: 'Connection change', id: 'connectionChange', isChecked: true },\n        { text: 'SourcePoint change', id: 'sourcePointChange' },\n        { text: 'TargetPoint change', id: 'targetPointChange' },\n        { text: 'Position change', id: 'positionChange', isChecked: true },\n        { text: 'Rotate change', id: 'rotateChange', isChecked: true },\n        { text: 'Collection change', id: 'collectionChange', isChecked: true },\n        { text: 'Mouse enter', id: 'mouseEnter' },\n        { text: 'Mouse leave', id: 'mouseLeave' },\n        { text: 'Mouse over', id: 'mouseOver' },\n        { text: 'Context menu open', id: 'contextMenuOpen' },\n        { text: 'Context menu before item render', id: 'contextMenuBeforeItemRender' },\n        { text: 'Context menu click', id: 'contextMenuClick' }\n    ];\n\n    //Initialize ListView component\n    var listObj = new ej.lists.ListView({\n        //Set defined data to dataSource property\n        dataSource: data,\n        height: \"calc(100% - 40px)\",\n        //Enables checkbox\n        showCheckBox: true\n    });\n\n    //Render initialized ListView component\n    listObj.appendTo('#listview-def');\n\n    //Render initialized button component\n    var button = new ej.buttons.Button();\n    button.appendTo('#clearButton');\n\n    //Initializes diagram control\n    var diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '700px',\n        contextMenuSettings: { show: true },\n        snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\n        dragEnter: dragEnter,\n        dragLeave: dragLeave,\n        dragOver: dragOver,\n        click: click,\n        historyChange: historyChange,\n        doubleClick: doubleClick,\n        textEdit: textEdit,\n        scrollChange: scrollChange,\n        selectionChange: selectionChange,\n        sizeChange: sizeChange,\n        connectionChange: connectionChange,\n        sourcePointChange: sourcePointChange,\n        targetPointChange: targetPointChange,\n        propertyChange: propertyChange,\n        positionChange: positionChange,\n        rotateChange: rotateChange,\n        collectionChange: collectionChange,\n        mouseEnter: mouseEnter,\n        mouseLeave: mouseLeave,\n        mouseOver: mouseOver,\n        contextMenuOpen: contextMenuOpen,\n        contextMenuBeforeItemRender: contextMenuBeforeItemRender,\n        contextMenuClick: contextMenuClick\n    });\n    diagram.appendTo('#diagram');\n    clearEventLog();\n\n    //Initialize the basicshapes for the symbol palatte\n    var basicShapes = [\n        { id: 'RectangleNode', shape: { type: 'Basic', shape: 'Rectangle' } },\n        { id: 'EllipseNode', shape: { type: 'Basic', shape: 'Ellipse' } },\n        { id: 'ParallelogramNode', shape: { type: 'Basic', shape: 'Parallelogram' } },\n        { id: 'TriangleNode', shape: { type: 'Basic', shape: 'Triangle' } },\n        { id: 'HexagonNode', shape: { type: 'Basic', shape: 'Hexagon' } },\n        { id: 'PentagonNode', shape: { type: 'Basic', shape: 'Pentagon' } },\n        { id: 'CylinderNode', shape: { type: 'Basic', shape: 'Cylinder' } },\n        { id: 'PlusNode', shape: { type: 'Basic', shape: 'Plus' } },\n        { id: 'HeptagonNode', shape: { type: 'Basic', shape: 'Heptagon' } },\n        { id: 'OctagonNode', shape: { type: 'Basic', shape: 'Octagon' } },\n        { id: 'TrapezoidNode', shape: { type: 'Basic', shape: 'Trapezoid' } },\n        { id: 'DecagonNode', shape: { type: 'Basic', shape: 'Decagon' } },\n        { id: 'RightTriangleNode', shape: { type: 'Basic', shape: 'RightTriangle' } },\n        { id: 'DiamondNode', shape: { type: 'Basic', shape: 'Diamond' } },\n        { id: 'StarNode', shape: { type: 'Basic', shape: 'Star' } }\n    ];\n\n    //Initializes connector symbols for the symbol palette\n    var connectorSymbols = [\n        {\n            id: 'connector1', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'Arrow', style:{strokeColor: '#757575', fill: '#757575'} }\n        },\n        {\n            id: 'connector2', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'connector3', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'Arrow', style:{strokeColor: '#757575', fill: '#757575'} }\n        },\n        {\n            id: 'connector4', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'connector5', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'None' }\n        },\n    ];\n\n    var palettes = [\n        { id: 'basic', expanded: true, symbols: basicShapes, iconCss: 'e-ddb-icons e-basic', title: 'Basic Shapes' },\n        { id: 'connectors', expanded: true, symbols: connectorSymbols, iconCss: 'e-ddb-icons e-connector', title: 'Connectors' }\n    ];\n\n    //Initializes the symbol palette\n    var palette = new ej.diagrams.SymbolPalette({\n        expandMode: 'Multiple', palettes: palettes,\n        width: '100%', height: '700px', symbolHeight: 60, symbolWidth: 60,\n        symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 },\n        getNodeDefaults: getSymbolDefaults, getSymbolInfo: getSymbolInfo,\n         //Sets the default values of a Connectors\n        getConnectorDefaults: function (connector) {\n            connector.style = { strokeWidth: 1 , strokeColor: '#757575' };\n        },\n    });\n    palette.appendTo('#symbolpalette');\n\n     // Event handler for clearing the event log\n    document.getElementById('clearButton').onclick = function (args) {\n        var data = document.getElementById(\"EventLog\");\n        for (var i = data.childNodes.length - 1; i >= 0; i--) {\n            data.removeChild(data.childNodes[i]);\n        }\n    };\n\n\n// Function to get event details based on selected items\nfunction getEventDetails(args) {\n    var listView = document.getElementById(\"listview-def\");\n    var listViewComponent = listView.ej2_instances[0];\n    var selectedItems = listViewComponent.getSelectedItems();\n    if (selectedItems.data.length > 0) {\n        var elementName = getName(selectedItems, args);\n        if (elementName) {\n            eventInformation(args);\n        }\n    }\n}\n\n// Function to check if the event name matches any selected item\nfunction getName(selectedItems, args) {\n    for (var i = 0; i < selectedItems.data.length; i++) {\n        var eventName = selectedItems.data[i].id;\n        if (eventName === args.name) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// Function to clear the event log\nfunction clearEventLog() {\n    var data = document.getElementById('EventLog');\n    data.innerHTML = '';\n}\n\n// Function to display event information in the event log\nfunction eventInformation(args) {\n    var span = document.createElement('span');\n    span.innerHTML = 'Diagram ' + args.name.bold() + ' event called' + '<hr>';\n    var log = document.getElementById('EventLog');\n    log.insertBefore(span, log.firstChild);\n}\n\n"}