{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/shape-gallery/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section diagram-shapes\" style=\"width: 100%\">\n    <div id=\"diagram\"></div>\n </div>\n\n</div></body></html>","index.js":"{{ripple}}ej.diagrams.Diagram.Inject(ej.diagrams.DataBinding, ej.diagrams.BpmnDiagrams);\n\n// Function to create basic shapes\nfunction createBasicShape(shape, content) {\n    return {\n        shape: { type: 'Basic', shape: shape },\n        annotations: [{ content: content }]\n    };\n}\n\n// Function to create flow shapes\nfunction createFlowShape(shape, content) {\n    return {\n        shape: { type: 'Flow', shape: shape },\n        annotations: [{ content: content }]\n    };\n}\n\n// Function to create BPMN shapes\nfunction createBpmnShape(shape, content, event) {\n    return {\n        shape: { type: 'Bpmn', shape: shape, event: event },\n        annotations: [{ content: content }]\n    };\n}\n// Basic shapes model\nvar basicShapeModel = [\n    { shape: { type: 'Text', content: 'Basic Shapes' }, constraints: ej.diagrams.NodeConstraints.PointerEvents,\n      style: { fontSize: 16, fill: 'None', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 }\n    },\n    createBasicShape('Rectangle', 'Rectangle'),\n    createBasicShape('Ellipse', 'Ellipse'),\n    createBasicShape('Triangle', 'Triangle'),\n    createBasicShape('Plus', 'Plus'),\n    createBasicShape('Star', 'Star'),\n    createBasicShape('Pentagon', 'Pentagon'),\n    createBasicShape('Heptagon', 'Heptagon'),\n    createBasicShape('Octagon', 'Octagon'),\n    createBasicShape('Trapezoid', 'Trapezoid'),\n    createBasicShape('Decagon', 'Decagon'),\n    createBasicShape('RightTriangle', 'Right Triangle'),\n    createBasicShape('Parallelogram', 'Parallelogram')\n];\n\n// Flow shapes model\nvar flowShapeModel = [\n    { shape: { type: 'Text', content: 'Flow Shapes' }, constraints: ej.diagrams.NodeConstraints.PointerEvents,\n      style: { fontSize: 16, fill: 'None', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 }\n    },\n    createFlowShape('Terminator', 'Terminator'),\n    createFlowShape('Process', 'Process'),\n    createFlowShape('Decision', 'Decision'),\n    createFlowShape('Document', 'Document'),\n    createFlowShape('PreDefinedProcess', 'Predefined Process'),\n    createFlowShape('PaperTap', 'Paper Tape'),\n    createFlowShape('DirectData', 'Direct Data'),\n    createFlowShape('SequentialData', 'Direct Data'),\n    createFlowShape('Sort', 'Sort'),\n    createFlowShape('MultiDocument', 'Multi-Document'),\n    createFlowShape('Collate', 'Collate'),\n    createFlowShape('SummingJunction', 'Summing Junction'),\n    createFlowShape('Or', 'Or'),\n    createFlowShape('InternalStorage', 'Internal Storage'),\n    createFlowShape('Extract', 'Extract'),\n    createFlowShape('ManualOperation', 'Manual Operation'),\n    createFlowShape('Merge', 'Merge'),\n    createFlowShape('OffPageReference', 'Off-Page Reference'),\n    createFlowShape('SequentialAccessStorage', 'Sequential Access Storage'),\n    createFlowShape('Data', 'Data'),\n    createFlowShape('Card', 'Card')\n];\n\n// BPMN shapes model\nvar bpmnShapeModel = [\n    {\n        shape: { type: 'Text', content: 'BPMN Shapes' }, constraints: ej.diagrams.NodeConstraints.PointerEvents,\n        style: { fontSize: 16, fill: 'none', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 }\n    },\n    createBpmnShape('Event', 'Start Event', { event: 'Start', trigger: 'None' }),\n    createBpmnShape('Event', 'Intermediate Event', { event: 'Intermediate', trigger: 'None' }),\n    createBpmnShape('Event', 'End Event', { event: 'End', trigger: 'None' }),\n    createBpmnShape('Gateway', 'Gateway', undefined),\n    createBpmnShape('Activity', 'Task', { activity: 'Task' }),\n    {\n        shape: {\n            type: 'Bpmn', shape: 'Activity', activity: {\n                activity: 'SubProcess',\n                subProcess: {\n                    type: 'Transaction', transaction: {\n                        success: { visible: false }, failure: { visible: false }, cancel: { visible: false }\n                    }\n                }\n            },\n        },\n        annotations: [{ content: 'Transaction' }]\n    },\n    createBpmnShape('Message', 'Message', undefined),\n    createBpmnShape('DataObject', 'Data Object', undefined),\n    createBpmnShape('DataSource', 'Data Source', undefined),\n    createBpmnShape('Group', 'Group', undefined),\n    createBpmnShape('TextAnnotation', 'Text Annotation', undefined)\n];\n\n/**\n * Sample for Shape gallery.\n */\nvar shape = [\n    { shapeName: 'Basic Shapes', shapeId: 'Basic' },\n    { shapeName: 'Flow Shapes', shapeId: 'Flow' },\n    { shapeName: 'BPMN Shapes', shapeId: 'Bpmn' },\n];\n\n//create and return the Nodes collection.\nfunction getNodes() {\n    var nodes1 =  basicShapeModel.concat(flowShapeModel).concat(bpmnShapeModel);\n    var offsetx = 60;\n    var offsety = 50;\n    var count = 1;\n    for (var i = 0; i < nodes1.length; i++) {\n        var node = nodes1[i];\n        node.width = 40;\n        node.height = 40;\n        node.offsetX = offsetx;\n        node.offsetY = offsety;\n        if (node.shape.type === 'Flow') {\n            var shapeType = node.shape.shape;\n            switch (shapeType) {\n                case 'Process':\n                case 'Terminator':\n                    node.height = 20;\n                    break;\n                case 'Decision':\n                    node.height = 35;\n                    break;\n                case 'Document':\n                case 'DirectData':\n                case 'MultiDocument':\n                case 'PreDefinedProcess':\n                    node.height = 30;\n                    break;\n            }\n        }\n\n        if (node.shape.type !== \"Text\") {\n            var label=node.annotations[0];\n            label.verticalAlignment = 'Top';\n            label.offset = { y: 1 };\n            label.margin = { top: 10 };\n\n            offsetx += 90;\n            if (count % 10 === 0) {\n                offsety = offsety + 100;\n                offsetx = 60;\n            }\n            count++;\n        }\n        if (node.shape.type === 'Text') {\n            offsetx = 60;\n            offsety += 50;\n            count = 1;\n            node.width = 150;\n            node.height = 100;\n            node.offsetX = 90;\n            if (node.shape.content !== 'Basic Shapes') {\n                node.offsetX = 90;\n                node.offsetY = offsety + 50;\n                offsety = offsety + 100;\n            }\n        }\n    }\n    return nodes1;\n}\n\n    var objects = getNodes();\n    //Initialize diagram control\n    var diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '800px', snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\n        nodes: objects,\n        //Defines the default node properties\n        getNodeDefaults: function (obj, diagram) {\n            return obj;\n        },\n        created: function () { diagram.fitToPage({ mode: 'Height' }); }\n    });\n    diagram.appendTo('#diagram');\n    \n\n"}