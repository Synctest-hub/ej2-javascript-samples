{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/swimlane/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <link href=\"https://ej2.syncfusion.com/demos/src/diagram/styles/diagram-common.css\" rel=\"stylesheet\">\n    <style>\n        /* These styles are used for aligning palette and diagram */\n        .diagram-Swimlane .sb-mobile-palette {\n            width: 195px;\n            height: 559px;\n            float: left;\n        }\n\n        .diagram-Swimlane .sb-mobile-palette-bar {\n            display: none;\n        }\n\n        .diagram-Swimlane .sb-mobile-diagram {\n            width: calc(100% - 197px);\n            height: 559px;\n            float: left;\n            border: 1px solid rgba(0, 0, 0, 0.12);\n            border-left: none;\n        }\n\n        @media (max-width: 550px) {\n            .diagram-Swimlane .sb-mobile-palette {\n                z-index: 19;\n                position: absolute;\n                display: none;\n                transition: transform 300ms linear, visibility 0s linear 300ms;\n                width: 39%;\n                height: 100%;\n            }\n            .diagram-Swimlane .sb-mobile-diagram {\n                width: 100%;\n                height: 100%;\n                float: left;\n                left: 0px;\n            }\n            .diagram-Swimlane .sb-mobile-palette-bar {\n                display: block;\n                width: 100%;\n                background: #fafafa;\n                padding: 10px 10px;\n                border: 0.5px solid #e0e0e0;\n                min-height: 40px;\n            }\n        }\n    </style>\n<div id=\"swimlaneDiagram\" style=\"width: 100%;\" class=\"diagram-Swimlane\">\n    <div class=\"sb-mobile-palette-bar\">\n        <div id=\"palette-icon\" style=\"float: right;\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n    </div>\n    <div id=\"palette-space\" class=\"sb-mobile-palette\">\n        <div id=\"symbolpalette\" style=\"width:90%;\"></div>\n    </div>\n    <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}/**\n * Default Swimlane sample\n */\nej.diagrams.Diagram.Inject(ej.diagrams.UndoRedo);\n\n\n    //Create and add ports for node.\n    var port = [\n        { id: 'Port1', offset: { x: 0, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Connect | ej.diagrams.PortVisibility.Hover, constraints: ej.diagrams.PortConstraints.Default | ej.diagrams.PortConstraints.Draw },\n        { id: 'Port2', offset: { x: 0.5, y: 0 }, visibility: ej.diagrams.PortVisibility.Connect | ej.diagrams.PortVisibility.Hover, constraints: ej.diagrams.PortConstraints.Default | ej.diagrams.PortConstraints.Draw },\n        { id: 'Port3', offset: { x: 1, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Connect | ej.diagrams.PortVisibility.Hover, constraints: ej.diagrams.PortConstraints.Default | ej.diagrams.PortConstraints.Draw },\n        { id: 'Port4', offset: { x: 0.5, y: 1 }, visibility: ej.diagrams.PortVisibility.Connect | ej.diagrams.PortVisibility.Hover, constraints: ej.diagrams.PortConstraints.Default | ej.diagrams.PortConstraints.Draw }\n    ];\n\n    //To enhance the functionality of a webpage for mobile devices by adding a click event listener \n    function addEvents() {\n        var isMobileDevice = window.matchMedia('(max-width:550px)').matches;\n        if (isMobileDevice) {\n            var paletteIcons = document.getElementById('palette-icon');\n            if (paletteIcons) {\n                paletteIcons.addEventListener('click', openPalette, false);\n            }\n        }\n    }\n    //To manage the visibility state of the palette space on a webpage for mobile devices\n    function openPalette() {\n        var paletteSpaces = document.getElementById('palette-space');\n        isMobileDevice = window.matchMedia('(max-width:550px)').matches;\n        if (isMobileDevice) {\n            if (!paletteSpaces.classList.contains('sb-mobile-palette-open')) {\n                paletteSpaces.classList.add('sb-mobile-palette-open');\n            }\n            else {\n                paletteSpaces.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n\n    var bounds = document.getElementById('diagram-space').getBoundingClientRect();\n    var pathData = 'M 120 24.9999 C 120 38.8072 109.642 50 96.8653 50 L 23.135' +\n        ' 50 C 10.3578 50 0 38.8072 0 24.9999 L 0 24.9999 C' +\n        '0 11.1928 10.3578 0 23.135 0 L 96.8653 0 C 109.642 0 120 11.1928 120 24.9999 Z';\n    // Initialize the nodes for the diagram.\n    var nodes = [\n        {\n            id: 'swimlane',\n            shape: {\n                type: 'SwimLane',\n                orientation: 'Horizontal',\n                header: {\n                    annotation: { content: 'SALES PROCESS FLOW CHART', style: { fill: 'transparent' } },\n                    height: 50, style: { fontSize: 11 },\n                },\n                lanes: [\n                    {\n                        id: 'stackCanvas1',\n                        header: {\n                            annotation: { content: 'Consumer' }, width: 50,\n                            style: { fontSize: 11 }\n                        },\n                        height: 100,\n                        children: [\n                            {\n                                id: 'node1',\n                                annotations: [\n                                    {\n                                        content: 'Consumer learns \\n of product',\n                                        style: { fontSize: 11 }\n                                    }\n                                ],\n                                margin: { left: 60, top: 30 },\n                                height: 40, width: 100, ports: port\n                            },\n                            {\n                                id: 'node2',\n                                shape: { type: 'Flow', shape: 'Decision' },\n                                annotations: [\n                                    {\n                                        content: 'Does \\n Consumer want \\nthe product',\n                                        style: { fontSize: 11 }\n                                    }\n                                ],\n                                margin: { left: 200, top: 20 },\n                                height: 60, width: 120, ports: port\n                            },\n                            {\n                                id: 'node3',\n                                annotations: [\n                                    {\n                                        content: 'No sales lead',\n                                        style: { fontSize: 11 }\n                                    }\n                                ],\n                                margin: { left: 380, top: 30 }, shape: { type: 'Path', data: pathData },\n                                height: 40, width: 100, ports: port\n                            },\n                            {\n                                id: 'node4',\n                                annotations: [\n                                    {\n                                        content: 'Sell to consumer',\n                                        style: { fontSize: 11 }\n                                    }\n                                ],\n                                margin: { left: 510, top: 30 },\n                                height: 40, width: 100, ports: port\n                            }\n                        ],\n                    },\n                    {\n                        id: 'stackCanvas2',\n                        header: {\n                            annotation: { content: 'Marketing' }, width: 50,\n                            style: { fontSize: 11 }\n                        },\n                        height: 100,\n                        children: [\n                            {\n                                id: 'node5',\n                                annotations: [{ content: 'Create marketing campaigns' }],\n                                margin: { left: 60, top: 20 },\n                                height: 40, width: 100, ports: port\n                            },\n                            {\n                                id: 'node6',\n                                annotations: [{ content: 'Marketing finds sales leads' }],\n                                margin: { left: 210, top: 20 },\n                                height: 40, width: 100, ports: port\n                            }\n                        ],\n                    },\n                    {\n                        id: 'stackCanvas3',\n                        header: {\n                            annotation: { content: 'Sales' }, width: 50,\n                            style: { fontSize: 11 }\n                        },\n                        height: 100,\n                        children: [\n                            {\n                                id: 'node7',\n                                annotations: [{ content: 'Sales receives lead' }],\n                                margin: { left: 210, top: 30 },\n                                height: 40, width: 100, ports: port\n                            }\n                        ],\n                    },\n                    {\n                        id: 'stackCanvas4',\n                        header: {\n                            annotation: { content: 'Success' }, width: 50,\n                            style: { fontSize: 11 }\n                        },\n                        height: 100,\n                        children: [\n                            {\n                                id: 'node8',\n                                annotations: [{ content: 'Success helps \\n retain consumer \\n as a customer' }],\n                                margin: { left: 510, top: 20 },\n                                height: 50, width: 100, ports: port\n                            }\n                        ],\n                    },\n                ],\n                phases: [\n                    {\n                        id: 'phase1', offset: 170,\n                        header: { annotation: { content: 'Phase' } }\n                    }\n                ],\n                phaseSize: 20,\n            },\n            offsetX: bounds.width / 2, offsetY: bounds.height / 2,\n            height: 100,\n            width: 650\n        },\n    ];\n    //Set the default values of a node.\n    function getNodeDefaults(node) {\n        node.style.strokeColor = '#717171';\n        node.style.strokeWidth = 1;\n        return node;\n    }\n    //Set the default values of a Connector.\n    function getConnectorDefaults(connector) {\n        if ((connector.id.indexOf(\"straight\") !== -1) || (connector.id.indexOf(\"straightdashed\") !== -1)) {\n            connector.type = 'Straight';\n        }\n        else {\n            connector.type = 'Orthogonal';\n        }\n        setConnectorStyles(connector, '#717171');\n        return connector;\n    }\n    //set styles for connector\n    function setConnectorStyles(connector, color) {\n        connector.targetDecorator.style.strokeColor = color;\n        connector.targetDecorator.style.fill = color;\n        connector.style.strokeColor = color;\n        connector.style.strokeWidth = 1;\n    }\n    //Initialize the Connectors for the diagram\n    var connectors = [\n        {\n            id: 'connector1', sourceID: 'node1',\n            targetID: 'node2'\n        },\n        {\n            id: 'connector2', sourceID: 'node2',\n            targetID: 'node3', annotations: [{ content: 'No', style: { fill: 'white' } }]\n        },\n        {\n            id: 'connector3', sourceID: 'node4',\n            targetID: 'node8'\n        },\n        {\n            id: 'connector4', sourceID: 'node2',\n            targetID: 'node6', annotations: [{ content: 'Yes', style: { fill: 'white' } }]\n        },\n        {\n            id: 'connector5', sourceID: 'node5',\n            targetID: 'node1'\n        },\n        {\n            id: 'connector6', sourceID: 'node6',\n            targetID: 'node7'\n        },\n        {\n            id: 'connector7', sourcePortID: 'Port1', targetPortID: 'Port3', sourceID: 'node4',\n            targetID: 'node7'\n        },\n    ];\n    //Initializes diagram control\n    var diagram = new ej.diagrams.Diagram({\n        // sets the height and width of the diagram.\n        width: '100%', height: '100%',\n        // sets the nodes and connectors of the diagram.\n        nodes: nodes, connectors: connectors,\n        getNodeDefaults: getNodeDefaults,\n        getConnectorDefaults: getConnectorDefaults,\n        snapSettings: {\n            constraints: ej.diagrams.SnapConstraints.All & ~ej.diagrams.SnapConstraints.ShowLines\n        },\n\n        //Define custom menu items\n        contextMenuSettings: {\n            show: true, items: [\n                {\n                    text: 'Copy', id: 'Copy', target: '.e-diagramcontent', iconCss: 'e-menu-icon e-icons e-copy'\n                },\n                {\n                    text: 'Cut', id: 'Cut', target: '.e-diagramcontent', iconCss: 'e-menu-icon e-icons e-cut'\n                },\n                {\n                    text: 'Paste', id: 'Paste', target: '.e-diagramcontent', iconCss: 'e-menu-icon e-icons e-paste'\n                },\n                {\n                    text: 'InsertLaneBefore', id: 'InsertLaneBefore', target: '.e-diagramcontent',\n                },\n                {\n                    text: 'InsertLaneAfter', id: 'InsertLaneAfter', target: '.e-diagramcontent',\n                }],\n            showCustomMenuOnly: true,\n        },\n        //Open the context menu \n        contextMenuOpen: function (args) {\n            for (var i = 0; i < args.items.length; i++) {\n                var item = args.items[i];\n                if ((diagram.selectedItems.connectors.length + diagram.selectedItems.nodes.length) > 0) {\n                    if (item.id === 'InsertLaneBefore' || item.id === 'InsertLaneAfter') {\n                        if (diagram.selectedItems.connectors.length || (diagram.selectedItems.nodes.length && !(diagram.selectedItems.nodes[0]).isLane)) {\n                            args.hiddenItems.push(item.text);\n                        }\n                    }\n                } else {\n                    args.hiddenItems.push(item.text);\n                }\n            }\n        },\n        //Handle click event for menu items.\n        contextMenuClick: function (args) {\n            if (args.item.id === 'InsertLaneBefore' || args.item.id === 'InsertLaneAfter') {\n                if (diagram.selectedItems.nodes.length > 0 && (diagram.selectedItems.nodes[0]).isLane) {\n                    var index;\n                    var node = diagram.selectedItems.nodes[0];\n                    var swimlane = diagram.getObject((diagram.selectedItems.nodes[0]).parentId);\n                    var shape = swimlane.shape;\n                    var existingLane = ej.diagrams.cloneObject(shape.lanes[0]);\n                    var newLane = {\n                        id: ej.diagrams.randomId(),\n                        header: {\n                            width: existingLane.header.width, height: existingLane.header.height,\n                            style: existingLane.header.style\n                        },\n                        style: existingLane.style,\n                        height: existingLane.height, width: existingLane.width,\n                    };\n\n                    if (shape.orientation === 'Horizontal') {\n                        var exclude = 0;\n                        exclude += (shape.header) ? 1 : 0;\n                        exclude += (shape.phases.length) ? 1 : 0;\n                        index = node.rowIndex - exclude;\n                        newLane.header.width = existingLane.header.width;\n                        newLane.header.height = existingLane.height;\n                    } else {\n                        index = node.columnIndex - (shape.phases.length) ? 1 : 0;\n                        newLane.header.width = existingLane.width;\n                        newLane.header.height = existingLane.header.height;\n                    }\n                    if (args.item.id === 'InsertLaneBefore') {\n                        diagram.addLanes(swimlane, [newLane], index);\n                    } else {\n                        diagram.addLanes(swimlane, [newLane], index + 1);\n                    }\n                    diagram.clearSelection();\n                }\n            } else if (args.item.id === 'Cut') {\n                diagram.cut();\n            } else if (args.item.id === 'Copy') {\n                diagram.copy();\n            } else if (args.item.id === 'Paste') {\n                diagram.paste();\n            }\n        },\n        //Set the node style for the DragEnter element.\n        dragEnter: function (args) {\n            var obj = args.element;\n            if (obj instanceof ej.diagrams.Node) {\n                var shape = obj.shape;\n                if (shape.isLane) {\n                    if (shape.orientation === 'Horizontal') {\n                        shape.lanes[0].height = 100;\n                        shape.lanes[0].width = 400;\n                    } else if (shape.orientation === 'Vertical') {\n                        shape.lanes[0].height = 400;\n                        shape.lanes[0].width = 100;\n                    }\n                }\n            }\n        },\n        selectedItems: { constraints: ej.diagrams.SelectorConstraints.All & ~ej.diagrams.SelectorConstraints.Rotate }\n\n    });\n    diagram.appendTo('#diagram');\n    // Check if the current environment is a device and fit diagram to page if true\n    if (ej.base.Browser.isDevice) {\n        diagram.fitToPage();\n    }\n    // Initializes the palettes for display in the symbol palette \n    var palettes = [\n        {\n            // Initialize flowshapes for the palettes \n            id: 'flow', expanded: true, title: 'Flow Shapes', symbols: [\n                {\n                    id: 'Terminator', width: 50, height: 60, addInfo: { tooltip: 'Terminator' }, shape: { type: 'Flow', shape: 'Terminator' }, ports: port\n                },\n                {\n                    id: 'Process', addInfo: { tooltip: 'Process' }, width: 50, height: 60, shape: { type: 'Flow', shape: 'Process' }, ports: port\n                },\n                {\n                    id: 'Decision', addInfo: { tooltip: 'Decision' }, width: 50, height: 50, shape: { type: 'Flow', shape: 'Decision' }, ports: port\n                },\n                {\n                    id: 'Document', addInfo: { tooltip: 'Document' }, width: 50, height: 50, shape: { type: 'Flow', shape: 'Document' }, ports: port\n                },\n                {\n                    id: 'PreDefinedProcess', addInfo: { tooltip: 'Predefined process' }, width: 50, height: 50, shape: { type: 'Flow', shape: 'PreDefinedProcess' }, ports: port\n                },\n                {\n                    id: 'data', addInfo: { tooltip: 'Data' }, width: 50, height: 50, shape: { type: 'Flow', shape: 'Data' }, ports: port,\n                },\n            ]\n        },\n        {\n            // Initialize Swimlane for the palettes \n            id: 'swimlaneShapes', expanded: true,\n            title: 'Swimlane Shapes',\n            symbols: [\n                {\n                    id: 'horizontalSwimlane', addInfo: { tooltip: 'Horizontal swimlane' },\n                    shape: {\n                        type: 'SwimLane', lanes: [\n                            {\n                                id: 'lane1',\n                                height: 60, width: 150,\n                                header: { width: 50, height: 50, style: { fontSize: 11 } },\n                            }\n                        ],\n                        orientation: 'Horizontal', isLane: true\n                    },\n                    height: 60,\n                    width: 140,\n                    offsetX: 70,\n                    offsetY: 30,\n                }, {\n                    id: 'verticalSwimlane', addInfo: { tooltip: 'Vertical swimlane' },\n                    shape: {\n                        type: 'SwimLane',\n                        lanes: [\n                            {\n                                id: 'lane1',\n                                height: 150, width: 60,\n                                header: { width: 50, height: 50, style: { fontSize: 11 } },\n                            }\n                        ],\n                        orientation: 'Vertical', isLane: true\n                    },\n                    height: 140,\n                    width: 60,\n                    offsetX: 70,\n                    offsetY: 30,\n                }, {\n                    id: 'verticalPhase', addInfo: { tooltip: 'Vertical phase' },\n                    shape: {\n                        type: 'SwimLane',\n                        phases: [{ style: { strokeWidth: 1, strokeDashArray: '3,3' } }],\n                        annotations: [{ text: '' }],\n                        orientation: 'Vertical', isPhase: true\n                    },\n                    height: 60,\n                    width: 140\n                }, {\n                    id: 'horizontalPhase', addInfo: { tooltip: 'Horizontal phase' },\n                    shape: {\n                        type: 'SwimLane',\n                        phases: [{ style: { strokeWidth: 1, strokeDashArray: '3,3' } }],\n                        annotations: [{ text: '' }],\n                        orientation: 'Horizontal', isPhase: true\n                    },\n                    height: 60,\n                    width: 140,\n                }\n            ]\n        },\n        {\n            // Initialize connectors for the palettes \n            id: 'connectors', expanded: true, symbols: [\n                {\n                    id: 'orthogonal', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 }\n                },\n                {\n                    id: 'orthogonaldashed', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n                    style: { strokeDashArray: '4 4' }\n                },\n                {\n                    id: 'straight', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n                },\n                {\n                    id: 'straightdashed', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n                    style: { strokeDashArray: '4 4' }\n                }\n            ], title: 'Connectors'\n        }\n    ];\n    //Initializes the symbol palette\n    var palette = new ej.diagrams.SymbolPalette({\n        expandMode: 'Multiple',\n        palettes: palettes,\n        width: '100%', height: '100%',\n        symbolMargin: { left: 8, right: 8, top: 8, bottom: 8 },\n        symbolHeight: 48, symbolWidth: 48,\n        getNodeDefaults: getNodeDefaults,\n        getConnectorDefaults: getConnectorDefaults,\n        getSymbolInfo: function (symbol) {\n            return { tooltip: symbol.addInfo ? symbol.addInfo.tooltip : symbol.id };\n        },\n\n    });\n\n    palette.appendTo('#symbolpalette');\n    addEvents();\n\n\n"}