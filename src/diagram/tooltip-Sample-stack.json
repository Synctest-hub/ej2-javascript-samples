{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/tooltip-Sample/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-8 control-section\">\n    <div id=\"tooltipDiagramSection\" class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div id=\"tooltipPropertySection\" class=\"col-lg-4 property-section\" style=\"padding-left: 0px\">\n    <table id=\"property\" title=\"Tooltip settings\">\n        <tbody><tr>\n            <td>\n                <div>\n                    Relative mode\n                </div>\n            </td>\n            <td>\n                <div>\n                    <input id=\"mode\" type=\"text\">\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>\n                    Position\n                </div>\n            </td>\n            <td>\n                <div>\n                    <input id=\"position\" type=\"text\">\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>\n                    Animation\n                </div>\n            </td>\n            <td>\n                <div>\n                    <input type=\"text\" id=\"duration\" style=\"width: 85%\" min=\"100\" max=\"2000\" step=\"100\" value=\"100\">\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>\n                    Effect\n                </div>\n            </td>\n            <td>\n                <div>\n                    <input id=\"effect\" type=\"text\">\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>\n                    Sticky Mode\n                </div>\n            </td>\n            <td>\n                <div style=\"padding-top:0px;padding-left: 0px;\">\n                    <input type=\"checkbox\" id=\"checked\" unchecked=\"false\">\n                </div>\n            </td>\n        </tr>\n    </tbody></table>\n</div>\n\n\n</div></body></html>","index.js":"{{ripple}}\nej.diagrams.Diagram.Inject(ej.diagrams.BpmnDiagrams);\n\n\n\n        //Initialize Diagram Nodes\n        var nodes = [\n            {\n                id: 'node1', width: 60, height: 60, offsetX: 35, offsetY: 120,\n                annotations: [{ content: 'Customer query', offset: { x: 0.5, y: 1 }, margin: { top: 15 } }],\n                tooltip: { content: 'Queries from the customer' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'Message' } }\n            },\n            {\n                id: 'node2', width: 75, height: 70, offsetX: 140, offsetY: 120,\n                annotations: [{ content: 'Enough details?', offset: { x: 0.50, y: 0.50 } }],\n                tooltip: { content: 'Whether the provided information is enough?' }, shape: { type: 'Bpmn', shape: 'Gateway' }\n            },\n            {\n                id: 'node3', width: 60, height: 50, offsetX: 270, offsetY: 120,\n                annotations: [{ content: 'Analyse', offset: { x: 0.50, y: 0.50 } }],\n                tooltip: { content: 'Analysing the query' },\n                shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } },\n            },\n            {\n                id: 'node4', width: 75, height: 70, offsetX: 370, offsetY: 120, shape: {\n                    type: 'Bpmn', shape: 'Gateway',\n                    gateway: { type: 'Exclusive' }\n                },\n                tooltip: { content: 'proceed to validate?' },\n            },\n            {\n                id: 'node5', width: 75, height: 70, offsetX: 570, offsetY: 120,\n                annotations: [{ content: 'Validate', offset: { x: 0.50, y: 0.50 } }],\n                tooltip: { content: 'Whether the reported/requested bug/feature is valid?' }, shape: { type: 'Bpmn', shape: 'Gateway' }\n            },\n            {\n                id: 'node6', width: 60, height: 60, offsetX: 720, offsetY: 120,\n                tooltip: { content: 'Send the invalid message to customer' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\n            },\n            {\n                id: 'node7', width: 60, height: 50, offsetX: 140, offsetY: 280,\n                annotations: [{ content: 'Request', offset: { x: 0.50, y: 0.50 }, margin: { top: 5 } }],\n                tooltip: { content: 'Requesting for more information' },\n                shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task', task: { type: 'Send' } } }\n            },\n            {\n                id: 'node8', width: 60, height: 60, offsetX: 370, offsetY: 280,\n                tooltip: { content: 'Share the User Guide/Knowledge Base link' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'Message' } }\n            },\n            {\n                id: 'node9', width: 70, height: 50, offsetX: 570, offsetY: 280,\n                annotations: [{ content: 'Log bug/feature', offset: { x: 0.50, y: 0.50 } }], tooltip: { content: 'Log the bug/feature' },\n                shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } }\n            },\n            {\n                id: 'node10', width: 75, height: 55, offsetX: 390, offsetY: 430,\n                annotations: [{ content: 'Implement', offset: { x: 0.50, y: 0.50 } }], tooltip: { content: 'Fix the bug/Add the feature' },\n                shape: {\n                    type: 'Bpmn', shape: 'Activity', activity: {\n                        activity: 'SubProcess', subProcess: {\n                            collapsed: false,\n                            events: [{ event: 'Intermediate', trigger: 'Timer', offset: { x: 0.5, y: 1 }, width: 25, height: 25 }]\n                        }\n                    }\n                }\n            },\n            {\n                id: 'node11', width: 60, height: 60, offsetX: 265, offsetY: 430, tooltip: { content: 'Provide the solution' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\n            },\n            {\n                id: 'node12', width: 60, height: 60, offsetX: 720, offsetY: 430, tooltip: { content: 'Share the task details' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\n            },\n            {\n                id: 'node13', width: 60, height: 60, offsetX: 570, offsetY: 430, shape: {\n                    type: 'Bpmn', shape: 'Gateway',\n                    gateway: { type: 'Parallel' }\n                },\n                tooltip: { content: 'can log?' },\n            },\n        ];\n    //Initialize Diagram connectors\n    var connectors = [\n        { id: 'connector1', sourceID: 'node1', targetID: 'node2' },\n        { id: 'connector2', sourceID: 'node2', targetID: 'node3' },\n        { id: 'connector3', sourceID: 'node3', targetID: 'node4' },\n        {\n            id: 'connector4', sourceID: 'node4', targetID: 'node5',\n            annotations: [{ content: 'Feature/Bug', offset: 0.5, style: { fill: 'white', textWrapping: 'Wrap' } }]\n        },\n        {\n            id: 'connector5', sourceID: 'node5', targetID: 'node6',\n            annotations: [{ content: 'Invalid', offset: 0.5, style: { fill: 'white' } }]\n        },\n        { id: 'connector6', sourceID: 'node2', targetID: 'node7' },\n        {\n            id: 'connector7', sourceID: 'node4', targetID: 'node8',\n            annotations: [{ content: 'How to?', offset: 0.5, style: { fill: 'white' } }]\n        },\n        { id: 'connector8', sourceID: 'node5', targetID: 'node9' },\n        { id: 'connector9', sourceID: 'node13', targetID: 'node12' },\n        {\n            id: 'connector10', sourceID: 'node7', targetID: 'node3', type: 'Orthogonal',\n            segments: [{ type: 'Orthogonal', length: 100, direction: 'Right' }, { type: 'Orthogonal', length: 100, direction: 'Top' }]\n        },\n        { id: 'connector11', sourceID: 'node13', targetID: 'node10' },\n        { id: 'connector12', sourceID: 'node10', targetID: 'node11' },\n        { id: 'connector13', sourceID: 'node9', targetID: 'node13' },\n    ];\n    //set content for diagram tooltip\n    function getcontent() {\n        var tooltipContent = document.createElement('div');\n        tooltipContent.innerHTML =\n            '<div style=\"border-width:1px;\"><span> Tooltip !!! </span> </div>';\n        return tooltipContent;\n    }\n    //set default value for connectors.\n    function getConnectorDefaults(connector, diagram) {\n        connector.type = 'Orthogonal';\n        connector.style = { strokeWidth: 2 };\n        return connector;\n    }\n    //set default value for Nodes.\n    function getNodeDefaults(obj) {\n        obj.offsetX += 0.5;\n        obj.offsetY += 0.5;\n        obj.constraints = ej.diagrams.NodeConstraints.Default | ej.diagrams.NodeConstraints.Tooltip;\n        obj.style = { strokeWidth: 2 };\n        return obj;\n    }\n\n    //Initializes diagram control\n    var diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '550px', connectors: connectors, nodes: nodes,\n        getConnectorDefaults: getConnectorDefaults,\n        getNodeDefaults: getNodeDefaults,\n        snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\n        tooltip: {\n            content: getcontent(), position: 'TopLeft', relativeMode: 'Object',\n            animation: { open: { effect: 'FadeZoomIn', delay: 100 }, close: { effect: 'FadeZoomOut', delay: 100 } }\n        }\n    });\n    diagram.appendTo('#diagram');\n    //Collection of relative modes for tooltip\n    var modevalue = [\n        { type: 'Object', text: 'Object' },\n        { type: 'Mouse', text: 'Mouse' },\n    ];\n    //Collection of positions for tooltip\n    var positionValue = [\n        { type: 'TopLeft', text: 'Top Left' },\n        { type: 'TopCenter', text: 'Top Center' },\n        { type: 'TopRight', text: 'Top Right' },\n        { type: 'BottomLeft', text: 'Bottom Left' },\n        { type: 'BottomCenter', text: 'Bottom Center' },\n        { type: 'BottomRight', text: 'Bottom Right' },\n        { type: 'LeftTop', text: 'Left Top' },\n        { type: 'LeftCenter', text: 'Left Center' },\n        { type: 'LeftBottom', text: 'Left Bottom' },\n        { type: 'RightTop', text: 'Right Top' },\n        { type: 'RightCenter', text: 'Right Center' },\n        { type: 'RightBottom', text: 'Right Bottom' },\n    ];\n    //Collection of effects for tooltip\n    var effectValue = [\n        { type: 'FadeIn', text: 'Fade In' },\n        { type: 'FadeOut', text: 'Fade Out' },\n        { type: 'FadeZoomIn', text: 'Fade Zoom In' },\n        { type: 'FadeZoomOut', text: 'Fade Zoom Out' },\n        { type: 'FlipXDownIn', text: 'FlipX Down In' },\n        { type: 'FlipXDownOut', text: 'FlipX Down Out' },\n        { type: 'FlipXUpIn', text: 'FlipX Up In' },\n        { type: 'FlipXUpOut', text: 'FlipX Up Out' },\n        { type: 'FlipYLeftIn', text: 'FlipY Left In' },\n        { type: 'FlipYLeftOut', text: 'FlipY Left Out' },\n        { type: 'FlipYRightIn', text: 'FlipY Right In' },\n        { type: 'FlipYRightOut', text: 'FlipY Right Out' },\n        { type: 'ZoomIn', text: 'Zoom In' },\n        { type: 'ZoomOut', text: 'Zoom Out' },\n        { type: 'None', text: 'None' },\n    ];\n    //Set relative mode for tooltip\n    var mode = new ej.dropdowns.DropDownList({\n        dataSource: modevalue,\n        fields: { value: 'type', text: 'text' }, popupWidth: 150,\n        width: '85%', index: 0,\n        change: function () {\n            if (mode.value === 'Mouse') {\n                diagram.tooltip.relativeMode = 'Mouse';\n            }\n            else {\n                diagram.tooltip.relativeMode = 'Object';\n            }\n        }\n    });\n    mode.appendTo('#mode');\n    //Set position for tooltip\n    var position = new ej.dropdowns.DropDownList({\n        dataSource: positionValue,\n        fields: { value: 'type', text: 'text' }, popupWidth: 150,\n        width: '85%', index: 0,\n        change: function (args) {\n            var nodes = diagram.nodes;\n            for (var i = 0; i < nodes.length; i++) {\n                if (nodes[i].tooltip) {\n                    nodes[i].tooltip.position = args.value;\n                    diagram.dataBind();\n                }\n            }\n        }\n    });\n    position.appendTo('#position');\n    //Set effect for tooltip\n    var effect = new ej.dropdowns.DropDownList({\n        dataSource: effectValue,\n        fields: { value: 'type', text: 'text' }, popupWidth: 150,\n        width: '85%', index: 0,\n        change: function (args) {\n            diagram.tooltip.animation.open.effect = args.value;\n            diagram.tooltip.animation.close.effect = args.value;\n        }\n    });\n    effect.appendTo('#effect');\n    //Set animation for tooltip\n    var animation = new ej.inputs.NumericTextBox({\n        format: '###.##',\n        change: function (args) {\n            diagram.tooltip.animation.close.duration = args.value;\n            diagram.tooltip.animation.open.duration = args.value;\n        }\n    });\n    animation.appendTo('#duration');\n    diagram.fitToPage({ mode: 'Width' });\n    //checkbox is used to enable or disable the sticky mode.\n    var stickyMode = new ej.buttons.CheckBox({\n        checked: false,\n        change: function (args) {\n            for (var j = 0; j < diagram.nodes.length; j++) {\n                if (args.checked) {\n                    diagram.tooltipObject.isSticky = true;\n                    diagram.nodes[j].tooltip.isSticky = true;\n                }\n                else {\n                    diagram.tooltipObject.isSticky = false;\n                    diagram.nodes[j].tooltip.isSticky = false;\n                }\n                diagram.dataBind();\n            }\n        }\n    });\n    stickyMode.appendTo('#checked');\n"}