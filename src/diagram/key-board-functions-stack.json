{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/key-board-functions/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-8 control-section\">\n        <style>\n                /* Overall div */\n                .container-fluid {\n                    padding-left: 0px;\n                }\n                /* Property panel CSS */\n                .property-panel-header {\n                    padding-bottom: 0px;\n                }\n            \n                .property-panel-content {\n                    padding-top: 0px !important;\n                }\n            \n                @media (max-width: 550px) {\n                    .property-panel-content {\n                        padding-top: 0px !important;\n                    }\n                }\n            </style>\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div class=\"col-lg-3 property-section\">\n    <div>\n        <h4 class=\"property-panel-header\">Built-In Commands</h4>\n        <div class=\"property-panel-content\">\n            <table id=\"property1\" style=\"font-size: 12px;\">\n                <tbody>\n                    <tr>\n                        <td style=\"width:60%;\">\n                            <h5>Command</h5>\n                        </td>\n                        <td style=\"width:40%;\">\n                            <h5>Gesture</h5>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"width:61%;\">Select All </td>\n                        <td style=\"width:39%;\">Ctrl + A</td>\n                    </tr>\n                    <tr>\n                        <td style=\"width:60%;\">Cut</td>\n                        <td style=\"width:40%;\">Ctrl + X</td>\n                    </tr>\n                    <tr>\n                        <td style=\"width:60%;\">Copy</td>\n                        <td style=\"width:40%;\">Ctrl + C</td>\n                    </tr>\n                    <tr>\n                        <td style=\"width:60%;\">Paste</td>\n                        <td style=\"width:40%;\">Ctrl + V</td>\n                    </tr>\n                    <tr>\n                        <td style=\"width:60%;\">Undo</td>\n                        <td style=\"width:40%;\">Ctrl + Z</td>\n                    </tr>\n                    <tr>\n                        <td style=\"width:60%;\">Redo</td>\n                        <td style=\"width:40%;\">Ctrl + Y</td>\n                    </tr>\n                    <tr>\n                        <td style=\"width:60%;\">Delete</td>\n                        <td style=\"width:40%;\">Delete</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    <div>\n        <h4 class=\"property-panel-header\">Custom Commands</h4>\n        <div class=\"property-panel-content\">\n            <table id=\"property2\" style=\"font-size: 12px;\">\n                <tbody>\n                    <tr>\n                        <td style=\"width:60%;\">\n                            <h5>Command\n                                </h5><h5>\n                        </h5></td>\n                        <td style=\"width:40%;\">\n                            <h5>Gesture</h5>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"width:60%;\">Group</td>\n                        <td style=\"width:40%;\">Ctrl + G</td>\n                    </tr>\n                    <tr>\n                        <td style=\"width:60%;\">Ungroup</td>\n                        <td style=\"width:40%;\">Ctrl + U</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    <div>\n        <h4 class=\"property-panel-header\">Modified Commands</h4>\n        <div class=\"property-panel-content\">\n            <table id=\"property3\" style=\"font-size: 12px;\">\n                <tbody>\n                    <tr>\n                        <td style=\"width:70%;\">\n                            <h5>Command\n                                </h5><h5>\n                        </h5></td>\n                        <td style=\"width:30%;\">\n                            <h5>Gesture</h5>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"width:60%;\">Navigate to Parent Node </td>\n                        <td style=\"width:40%;\">Up Arrow</td>\n                    </tr>\n                    <tr>\n                        <td style=\"width:60%;\">Navigate to Child Node </td>\n                        <td style=\"width:40%;\">Down Arrow</td>\n                    </tr>\n                    <tr>\n                        <td style=\"width:60%;\">Navigate to Previous Child </td>\n                        <td style=\"width:40%;\">Left Arrow</td>\n                    </tr>\n                    <tr>\n                        <td style=\"width:60%;\">Navigate to Next Child </td>\n                        <td style=\"width:40%;\">Right Arrow</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n\n</div>\n\n</div></body></html>","index.js":"{{ripple}}/**\n * Key Board Interaction sample\n */\n// tslint:disable-next-line:max-func-body-length\n //Custom command for Diagraming elements.\n\n// Initializes the default settings and configuration for the diagram control.\n\n     //Retrieves the command manager settings for the diagram, including custom commands and their associated gestures.\n function getCommandManagerSettings() {\n    var commandManager = {\n        commands: [{\n                name: 'customGroup',\n                canExecute: function () {\n                    if (diagram.selectedItems.nodes.length > 0 || diagram.selectedItems.connectors.length > 0) {\n                        return true;\n                    }\n                    return false;\n                },\n                execute: function () {\n                    diagram.group();\n                },\n                gesture: {\n                    key: ej.diagrams.Keys.G,\n                    keyModifiers: ej.diagrams.KeyModifiers.Control\n                }\n            },\n            {\n                name: 'customUnGroup',\n                canExecute: function () {\n                    if (diagram.selectedItems.nodes[0].children) {\n                        return true;\n                    }\n                    return false;\n                },\n                execute: function () {\n                    diagram.unGroup();\n                },\n                gesture: {\n                    key: ej.diagrams.Keys.U,\n                    keyModifiers: ej.diagrams.KeyModifiers.Control\n                }\n            },\n            {\n                name: 'navigationDown',\n                canExecute: function () {\n                    return true;\n                },\n                execute: function () {\n                    navigateLevels(true);\n                },\n                gesture: { key: ej.diagrams.Keys.Down },\n            },\n            {\n                name: 'navigationUp',\n                canExecute: function () {\n                    return true;\n                },\n                execute: function () {\n                    navigateLevels(false);\n                },\n                gesture: { key: ej.diagrams.Keys.Up },\n            },\n            {\n                name: 'navigationLeft',\n                canExecute: function () {\n                    return true;\n                },\n                execute: function () {\n                    navigateToSiblings(true);\n                },\n                gesture: { key: ej.diagrams.Keys.Right },\n            },\n            {\n                name: 'navigationRight',\n                canExecute: function () {\n                    return true;\n                },\n                execute: function () {\n                    navigateToSiblings(false);\n                },\n                gesture: { key: ej.diagrams.Keys.Left },\n            }]\n    };\n    return commandManager;\n}\n// Navigates between levels in a diagram based on the selected node's relationship with its parent or child.\nfunction navigateLevels(isParent) {\n    var selectedNode = diagram.selectedItems.nodes[0];\n    if (selectedNode) {\n        var connectorId = isParent ? selectedNode.outEdges[0] : selectedNode.inEdges[0];\n        var altNode = isParent ? getNode(connectorId, false) : getNode(connectorId, true);\n        selectNode(altNode);\n    }\n}\n//Navigates to the right or left sibling node of the currently selected node in a diagram.\nfunction navigateToSiblings(isRightSibling) {\n    var selectedNode = diagram.selectedItems.nodes[0];\n    if (selectedNode) {\n        var connectorId = selectedNode.inEdges[0];\n        var altConnectorId = '';\n        var parentNode = getNode(connectorId, true);\n        if (parentNode && parentNode.length > 0) {\n            for (var i = 0; i < parentNode[0].outEdges.length; i++) {\n                if (parentNode[0].outEdges[i] === connectorId) {\n                    altConnectorId = isRightSibling ? parentNode[0].outEdges[i + 1] : parentNode[0].outEdges[i - 1];\n                }\n            }\n            var sibling = getNode(altConnectorId, false);\n            selectNode(sibling);\n        }\n    }\n}\n// Retrieves the node connected to the specified connector based on whether it's the parent or child node.\nfunction getNode(name, isParent) {\n    var node = [];\n    var connector = diagram.getObject(name);\n    if (connector) {\n        node.push(diagram.getObject(isParent ? (connector.sourceID) : (connector.targetID)));\n    }\n    return node;\n}\n//Selects the specified node(s) in the diagram.\nfunction selectNode(node) {\n    if (node && node.length > 0) {\n        diagram.clearSelection();\n        diagram.select(node);\n    }\n}\n    //Initialize shape\n    var shape = { type: 'Basic', shape: 'Ellipse', cornerRadius: 10 };\n    //initialize the diagram control\n     var diagram = new ej.diagrams.Diagram({\n        width: '100%', height: 645,\n        snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\n        contextMenuSettings: { show: true },\n        getNodeDefaults: function (node) {\n            if (!node.children) {\n                node.shape = shape;\n                node.width = 70;\n                node.height = 70;\n            }\n            return node;\n        },\n        layout: {\n            type: 'HierarchicalTree'\n        },\n        dataSourceSettings: {\n            id: 'id', parentId: 'ancestor', dataSource: new ej.data.DataManager(window.keyBoardData),\n            doBinding: function (nodeModel, data) {\n                nodeModel.annotations = [{\n                    content: data.id,\n                    style: { color: 'white' }\n                }\n                ];\n                nodeModel.style = {\n                    strokeColor: 'transparent',\n                    fill: data.fill\n                };\n            }\n        },\n        commandManager: getCommandManagerSettings()\n    });\n    diagram.appendTo('#diagram');\n   \n\n"}