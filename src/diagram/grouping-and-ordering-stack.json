{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/grouping-and-ordering/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><style>\n    /* For toolbar width and height */\n    .db-toolbar-container {\n        width: 100% ;\n       height: 44px;\n    }\n    /* Symbol palette alignment */\n    .db-palette-parent {\n        background-color:#fafafa;\n        width: 255px!important;\n        float: left;\n        height:calc(100% - 28px);\n    }\n    /* Diagram alignment */\n    .db-diagram-container {\n        width:calc(100% - 260px);\n        height: 100%;\n        float: right;\n    }\n</style>\n<div class=\"control-section\" style=\"width: 100%\">\n    <div class=\"db-toolbar-container\">\n        <div id=\"toolbarEditor\"></div>\n    </div>\n    <div>\n        <div class=\"db-palette-parent\">\n            <div id=\"symbolpalette\"></div>\n        </div>\n        <div class=\"db-diagram-container\">\n            <div id=\"diagram\"></div>\n        </div>\n    </div>\n    \n    \n</div>\n    \n    \n    </div></body></html>","index.js":"{{ripple}}/* jshint esversion: 6 */\n/**\n * Sample for Grouping and Ordering diagram\n */\n\n\n\n\n  // Function to create a node\n  function createNode(id, offsetX, offsetY, width, height, shape, annotations, cornerRadius) {\n    return {\n      id: id,\n      offsetX: offsetX,\n      offsetY: offsetY,\n      width: width,\n      height: height,\n      shape: { type: \"Basic\", shape: shape, cornerRadius: cornerRadius },\n      annotations: annotations,\n    };\n  }\n\n  // Function to create a group node\n  function groupNode(id, children, padding, annotations) {\n    return {\n      id: id,\n      children: children,\n      padding: padding,\n      annotations: annotations\n    };\n  }\n\n  // Initialize nodes\n  var nodes = [\n    createNode('Diamond', 350, 250, 100, 100, 'Diamond', [{ content: 'Decision' }]),\n    createNode('ellipse', 150, 250, 100, 60, 'Ellipse', [{ content: 'Start/Stop' }]),\n    createNode('rectangle', 150, 400, 100, 60, 'Rectangle', [{ content: 'Process' }]),\n    createNode('node1', 150, 100, 100, 55, 'Rectangle'),\n    createNode('node2', 350, 100, 90, 55, 'Rectangle', [], 5),\n    groupNode('group', ['node1', 'node2'], { left: 10, right: 10, top: 10, bottom: 10 }, [{ content: 'Group 1' }])\n  ];\n\n  //Initializes diagram control\n  var diagram = new ej.diagrams.Diagram({\n    width: '100%', height: '500px',\n    nodes: nodes,\n    rulerSettings: { showRulers: true },\n    drawingObject: { type: 'Orthogonal' },\n    selectionChange: function (args) { selectionChange(args); },\n    onUserHandleMouseDown: function (args) { handleUserHandleClick(args); },\n  });\n  diagram.appendTo('#diagram');\n\n  // Initializes the user handles for interactive actions.\n  var handles = [\n    {\n      name: 'Clone', pathData: 'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z', tooltip: { content: 'Clone' },\n      visible: true, offset: 1, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n    {\n      name: 'Delete', pathData: 'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z', tooltip: { content: 'Delete' },\n      visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n    {\n      name: 'Draw', pathData: 'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z', tooltip: { content: 'Draw' },\n      visible: true, offset: 0.5, side: 'Right', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n  ];\n\n\n  //Disables specific toolbar items based on the presence of annotations in selected items.\n  disableMultiselectedItems = function (selectedItems) {\n    for (i = 0; i < selectedItems.length; i++) {\n      if (selectedItems[i].annotations[0] !== undefined) {\n        // Enable toolbar items when annotations are present\n        toolbarObj.items.find(item => item.id === 'FontStyle').disabled = false;\n        toolbarObj.items.find(item => item.id === 'FontSize').disabled = false;\n        toolbarObj.items.find(item => item.id === 'Bold').disabled = false;\n        toolbarObj.items.find(item => item.id === 'Italic').disabled = false;\n        toolbarObj.items.find(item => item.id === 'Underline').disabled = false;\n        toolbarObj.items.find(item => item.id === 'FontColor').disabled = false;\n      }\n\n      // Disable toolbar items when annotations are not present\n      else {\n        toolbarObj.items.find(item => item.id === 'FontStyle').disabled = true;\n        toolbarObj.items.find(item => item.id === 'FontSize').disabled = true;\n        toolbarObj.items.find(item => item.id === 'Bold').disabled = true;\n        toolbarObj.items.find(item => item.id === 'Italic').disabled = true;\n        toolbarObj.items.find(item => item.id === 'Underline').disabled = true;\n        toolbarObj.items.find(item => item.id === 'FontColor').disabled = true;\n      }\n    }\n  };\n\n  //Handles changes in the selection state.\n  selectionChange = function (args) {\n    if (args.state === \"Changed\") {\n      var selectedItems = diagram.selectedItems.nodes;\n      selectedItems = selectedItems.concat(diagram.selectedItems.connectors);\n      // Disabling toolbar items when no items are selected\n      if (selectedItems.length === 0) {\n        for (var i = 0; i < toolbarObj.items.length; i++) {\n          var itemId = toolbarObj.items[i].id;\n          if (itemId === \"Group\" || itemId === \"UnGroup\" || itemId === \"BringForward\" || itemId === \"BringToFront\" ||\n            itemId === \"SendBackward\" || itemId === \"SendToBack\" || itemId === \"Bold\" || itemId === \"Italic\" ||\n            itemId === \"Underline\" || itemId === \"FontStyle\" || itemId === \"FontSize\" || itemId === \"FontColor\") {\n            toolbarObj.items[i].disabled = true;\n          }\n        }\n      }\n\n      // Handling single item selection\n      if (selectedItems.length === 1) {\n        enableItems();\n        disableMultiselectedItems(selectedItems);\n        // Enabling or disabling specific toolbar items based on selection type\n        if (selectedItems[0].children !== undefined && selectedItems[0].children.length > 0) {\n          toolbarObj.items.find(item => item.id === 'UnGroup').disabled = false;\n          disableMultiselectedItems(selectedItems);\n        }\n        else {\n          toolbarObj.items.find(item => item.id === 'Group').disabled = true;\n          toolbarObj.items.find(item => item.id === 'UnGroup').disabled = true;\n        }\n      }\n\n      // Handling multiple items selection\n      if (selectedItems.length > 1) {\n        enableItems();\n        toolbarObj.items.find(item => item.id === 'Group').disabled = false;\n        toolbarObj.items.find(item => item.id === 'UnGroup').disabled = true;\n        disableMultiselectedItems(selectedItems);\n      }\n\n      // Handling specific scenarios when nodes are selected\n      if (args.newValue.length > 0 && args.newValue[0] instanceof ej.diagrams.Node) {\n        diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All | ej.diagrams.SelectorConstraints.UserHandle, userHandles: handles };\n        // Manipulating selected nodes and their properties\n        if (diagram.selectedItems.nodes.length > 0) {\n          drawingNode = diagram.selectedItems.nodes[diagram.selectedItems.nodes.length - 1];\n        }\n      }\n      else {\n        // Resetting selection constraints when other types are selected\n        diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All & ~ej.diagrams.SelectorConstraints.UserHandle };\n      }\n    }\n  };\n\n  // Enables specific toolbar items.\n  function enableItems() {\n    toolbarObj.items.find(item => item.id === 'BringForward').disabled = false;\n    toolbarObj.items.find(item => item.id === 'BringToFront').disabled = false;\n    toolbarObj.items.find(item => item.id === 'SendBackward').disabled = false;\n    toolbarObj.items.find(item => item.id === 'SendToBack').disabled = false;\n  }\n\n  //method to add functionality to user handle\n  handleUserHandleClick = function (args) {\n    switch (args.element.name) {\n      case 'Delete':\n        diagram.remove();\n        break;\n      case 'Clone':\n        diagram.paste(diagram.selectedItems.selectedObjects);\n        break;\n      case 'Draw':\n        diagram.drawingObject.shape = {};\n        diagram.drawingObject.type = diagram.drawingObject.type || 'Orthogonal';\n        diagram.drawingObject.sourceID = drawingNode.id;\n        diagram.dataBind();\n        break;\n    }\n  };\n\n  //Apply the appearence of the Annotation \n  function updateAnnotationValue(value, fontSize, fontFamily, index, isSelected) {\n    for (var i = 0; i < diagram.selectedItems.nodes.length; i++) {\n      var node = diagram.selectedItems.nodes[i];\n      for (var j = 0; j < node.annotations.length; j++) {\n        var annotationstyle = node.annotations[j].style;\n        if (value === 'fontsize') {\n          annotationstyle.fontSize = fontSize;\n        } else if (value === 'fontfamily') {\n          annotationstyle.fontFamily = fontFamily.toString();\n        }\n        else if (value === 'bold') {\n          annotationstyle.bold = !annotationstyle.bold;\n          isSelected = annotationstyle.bold;\n        }\n        else if (value === 'italic') {\n          annotationstyle.italic = !annotationstyle.italic;\n          isSelected = annotationstyle.italic;\n        }\n        else if (value === 'underline') {\n          if (annotationstyle.textDecoration === \"None\") {\n            annotationstyle.textDecoration = 'Underline';\n            isSelected = true;\n          }\n          else {\n            annotationstyle.textDecoration = 'None';\n            isSelected = false;\n          }\n        }\n        var toolbarTextStyle = document.getElementById(\"toolbarEditor\");\n        if (toolbarTextStyle) {\n          toolbarTextStyle = toolbarTextStyle.ej2_instances[0];\n        }\n        if (toolbarTextStyle.items[index] !== undefined) {\n          var cssClass = toolbarTextStyle.items[index].cssClass;\n          toolbarTextStyle.items[index].cssClass = isSelected ? cssClass + ' tb-item-selected' : cssClass.replace(' tb-item-selected', '');\n          toolbarTextStyle.dataBind();\n        }\n        diagram.dataBind();\n      }\n    }\n  }\n  // Initialization of font size numeric text box\n  var fontSize = new ej.inputs.NumericTextBox({\n    value: 12, min: 1, max: 30, width: '110px',\n    format: '##.##', step: 2,\n    change: function (args) {\n      updateAnnotationValue('fontsize', args.value);\n    }\n  });\n  fontSize.appendTo('#fontSize');\n\n  // Initialization of font family type\n  var fontTypeList = [\n    { type: 'Arial', text: 'Arial' },\n    { type: 'Aharoni', text: 'Aharoni' },\n    { type: 'Bell MT', text: 'Bell MT' },\n    { type: 'Fantasy', text: 'Fantasy' },\n    { type: 'Segoe UI', text: 'Segoe UI' },\n    { type: 'Times New Roman', text: 'Times New Roman' },\n    { type: 'Verdana', text: 'Verdana' }\n  ];\n\n  // Initialization of font family dropdown list\n  var fontFamily = new ej.dropdowns.DropDownList({\n    dataSource: fontTypeList,\n    fields: { value: 'type', text: 'text' }, popupWidth: 150,\n    width: '100%', placeholder: 'select a font type', index: 0,\n    change: function (args) {\n      updateAnnotationValue('fontfamily', null, args.value.toString());\n    }\n  });\n  fontFamily.appendTo('#fontfamily');\n\n  // Initialization of font color picker\n  var fontColors = new ej.inputs.ColorPicker({\n    mode: 'Palette',\n    value: '#000',\n    change: function (arg) {\n      for (var i = 0; i < diagram.selectedItems.nodes.length; i++) {\n        var nodes = diagram.selectedItems.nodes[i];\n        for (var j = 0; j < nodes.annotations.length; j++) {\n          nodes.annotations[j].style.color = arg.currentValue.rgba;\n          diagram.dataBind();\n        }\n      }\n    }\n  });\n  fontColors.appendTo('#fontColors');\n\n  //Handles toolbar item clicks and performs corresponding actions.\n  function toolbarClick(args) {\n    switch (args.item.tooltipText) {\n      case 'Group':\n        // Group selected items\n        diagram.group();\n        // Disable Group button and enable UnGroup button\n        toolbarObj.items.find(item => item.id === 'Group').disabled = true;\n        toolbarObj.items.find(item => item.id === 'UnGroup').disabled = false;\n        break;\n      case 'UnGroup':\n        // Ungroup selected items\n        diagram.unGroup();\n        break;\n      case 'Bring Forward':\n        // Bring selected item(s) forward\n        diagram.moveForward();\n        break;\n      case 'Bring To Front':\n        // Bring selected item(s) to front\n        diagram.bringToFront();\n        break;\n      case 'Send Backward':\n        // Send selected item(s) backward\n        diagram.sendBackward();\n        break;\n      case 'Send To Back':\n        // Send selected item(s) to back\n        diagram.sendToBack();\n        break;\n      case 'Bold':\n        // Toggle bold style for selected annotation(s)\n        updateAnnotationValue('bold', args.value, null, 11);\n        break;\n      case 'Italic':\n        // Toggle italic style for selected annotation(s)\n        updateAnnotationValue('italic', args.value, null, 12);\n        break;\n      case 'Underline':\n        // Toggle underline style for selected annotation(s)\n        updateAnnotationValue('underline', args.value, null, 13);\n        break;\n    }\n    // Bind diagram data after actions\n    diagram.dataBind();\n  }\n\n  //create the Toolbar and adding items in ToolBar.\n  var toolbarObj = new ej.navigations.Toolbar({\n    clicked: toolbarClick,\n    items: [\n      // Grouping/UnGrouping buttons\n      {\n        id: 'Group',\n        type: 'Button',\n        tooltipText: 'Group',\n        prefixIcon: 'e-icons e-group-1',\n        disabled: true\n      },\n      {\n        id: 'UnGroup',\n        type: 'Button',\n        tooltipText: 'UnGroup',\n        prefixIcon: 'e-icons e-ungroup-1',\n        disabled: true\n      },\n      { id: 'Separator1', type: 'Separator' },\n      {\n        id: 'BringForward',\n        type: 'Button',\n        tooltipText: 'Bring Forward',\n        prefixIcon: 'e-icons e-bring-forward',\n        disabled: true\n      },\n      {\n        id: 'BringToFront',\n        type: 'Button',\n        tooltipText: 'Bring To Front',\n        prefixIcon: 'e-icons e-bring-to-front',\n        disabled: true\n      },\n      {\n        id: 'SendBackward',\n        type: 'Button',\n        tooltipText: 'Send Backward',\n        prefixIcon: 'e-icons e-send-backward',\n        disabled: true\n      },\n      {\n        id: 'SendToBack',\n        type: 'Button',\n        tooltipText: 'Send To Back',\n        prefixIcon: 'e-icons e-send-to-back',\n        disabled: true\n      },\n      {\n        id: 'Separator2', type: 'Separator',\n        template: '<div style=\"margin-left:1px;\"></div>'\n      },\n      {\n        // Custom font family dropdown template\n        id: 'FontStyle',\n        type: 'Input',\n        tooltipText: 'Font Style',\n        align: 'Left',\n        template: fontFamily,\n        disabled: true\n      },\n      {\n        id: 'Separator3', type: 'Separator',\n        template: '<div style=\"margin-left:5px;\"></div>'\n      },\n      {\n        // Custom font size numeric text box template\n        id: 'FontSize',\n        type: 'Input',\n        tooltipText: 'Font Size',\n        align: 'Left',\n        template: fontSize,\n        disabled: true,\n        style: \"margin-left:3px\"\n      },\n      // Font styling buttons (Bold, Italic, Underline)\n      {\n        id: 'Bold',\n        type: 'Button',\n        tooltipText: 'Bold',\n        prefixIcon: 'e-icons e-bold',\n        disabled: true,\n        cssClass: 'tb-item-start'\n      },\n      {\n        id: 'Italic',\n        type: 'Button',\n        tooltipText: 'Italic',\n        prefixIcon: 'e-icons e-italic',\n        disabled: true,\n        cssClass: 'tb-item-middle'\n      },\n      {\n        id: 'Underline',\n        type: 'Button',\n        tooltipText: 'Underline',\n        prefixIcon: 'e-icons e-underline',\n        disabled: true,\n        cssClass: 'tb-item-end'\n      },\n      {\n        // Font Color picker\n        id: 'FontColor',\n        type: 'Input',\n        tooltipText: 'Font Color',\n        align: 'Left',\n        template: fontColors,\n        disabled: true\n      },\n    ],\n  });\n  // Appends the toolbar to the specified HTML element\n  toolbarObj.appendTo('#toolbarEditor');\n\n  // Function to create a basic shapes\n  function createBasicShape(id, shape) {\n    return {\n      id: id,\n      shape: { type: \"Basic\", shape: shape },\n      style: { strokeWidth: 2 }\n    };\n  }\n\n  // Initialize basic shapes\n  var basicShapes = [\n    createBasicShape('Rectangle', 'Rectangle'),\n    createBasicShape('Ellipse', 'Ellipse'),\n    createBasicShape('Hexagon', 'Hexagon'),\n    createBasicShape('Parallelogram', 'Parallelogram'),\n    createBasicShape('Triangle', 'Triangle'),\n    createBasicShape('Plus', 'Plus'),\n    createBasicShape('Star', 'Star'),\n    createBasicShape('Pentagon', 'Pentagon'),\n    createBasicShape('Heptagon', 'Heptagon'),\n    createBasicShape('Octagon', 'Octagon'),\n    createBasicShape('Trapezoid', 'Trapezoid'),\n    createBasicShape('Decagon', 'Decagon'),\n    createBasicShape('RightTriangle', 'RightTriangle'),\n    createBasicShape('Cylinder', 'Cylinder'),\n    createBasicShape('Diamond', 'Diamond')\n  ];\n\n  // Initialize a SymbolPalette control\n  var palette = new ej.diagrams.SymbolPalette({\n    expandMode: 'Multiple', // Set the mode for expanding palettes\n    width: '100%', // Set the width of the symbol palette\n    height: '100%', // Set the height of the symbol palette\n    symbolWidth: 50, // Set the width of each symbol in the palette\n    symbolHeight: 50, // Set the height of each symbol in the palette\n    palettes: [\n      { id: 'basicShapes', expanded: true, symbols: basicShapes, iconCss: 'e-ddb-icons e-flow', title: 'Basic Shapes' },\n    ],\n    symbolMargin: { left: 5, right: 5, top: 5, bottom: 10 },\n  });\n  // Append the symbol palette to the specified HTML element\n  palette.appendTo('#symbolpalette');\n"}