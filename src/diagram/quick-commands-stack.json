{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/quick-commands/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><script id=\"fixeduserhandletemplate\" type=\"text/x-template\">\n    <div style=\"width:100%;height:100%\">\n        <button style=\"background-color:black; border-radius:50%; width:25px; height:25px; border:none; cursor:context-menu; padding:0; display:flex; align-items:center; justify-content:center; background-image:url(https://ej2.syncfusion.com/javascript/demos/src/diagram/Images/user-handle/delete.png); background-size:cover; background-position:center;\">\n        </button>\n    </div>\n</script>\n<div class=\"col-lg-8 control-section\">\n        <style>\n                /* Css for images in property panel  */\n                .diagram-property .image-pattern-style {\n                    background-color: white;\n                    background-size: contain;\n                    background-repeat: no-repeat;\n                    height: 50px;\n                    width: calc((100% - 18px) / 3);\n                    cursor: pointer;\n                    border: 1px solid #D5D5D5;\n                    background-position: center;\n                    float: left;\n                }\n            \n                .diagram-property .image-pattern-style:hover {\n                    border-color: gray;\n                    border-width: 2px;\n                }\n                /* Property panel CSS */\n                .diagram-property .row {\n                    margin: 10px 0px 0px 0px;\n                }\n                \n                .diagram-property .row-header {\n                    font-size: 15px;\n                    font-weight: 500;\n                    margin-top: 10px\n                }\n                /* Selection indicator */\n                .diagram-property .e-selected-style {\n                    border-color: #006CE6;\n                    border-width: 2px;\n                }\n                .property-section .e-remove-selection {\n                    cursor: not-allowed;\n                }\n                 .e-remove-selection .property-section-content {\n                    pointer-events: none;\n                }\n                        \n            </style>\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div class=\"col-lg-4 property-section diagram-property\">\n    <div class=\"row\">\n        <div class=\"property-panel-header\">\n            Properties\n        </div>\n        <div id=\"propertypanel\" class=\"e-remove-selection\">\n            <div class=\"property-section-content\">\n            <div class=\"row property-panel-content\" id=\"appearance\">\n                <div class=\"row row-header\">\n                    Alignment\n                </div>\n                <div class=\"row\" style=\"padding-top: 8px\">\n                    <div class=\"image-pattern-style e-selected-style\" id=\"left\" style=\"background-image: url(//ej2.syncfusion.com/javascript/demos/src/diagram/Images/user-handle/bottoml.png); margin-right: 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"right\" style=\"background-image: url(//ej2.syncfusion.com/javascript/demos/src/diagram/Images/user-handle/bottomr.png); margin: 0px 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"topr\" style=\"background-image: url(//ej2.syncfusion.com/javascript/demos/src/diagram/Images/user-handle/topr.png);\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"row property-panel-content\" id=\"pattern\">\n                <div class=\"row row-header\">\n                    Appearance\n                </div>\n                <div class=\"row\" style=\"padding-top: 8px\">\n                    <div class=\"image-pattern-style\" id=\"pattern1\" style=\"background-image: url(//ej2.syncfusion.com/javascript/demos/src/diagram/Images/user-handle/pattern1.png); margin-right: 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"pattern2\" style=\"background-image: url(//ej2.syncfusion.com/javascript/demos/src/diagram/Images/user-handle/pattern2.png); margin: 0px 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"pattern3\" style=\"background-image: url(//ej2.syncfusion.com/javascript/demos/src/diagram/Images/user-handle/pattern3.png);\">\n                    </div>\n                </div>\n            </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}/*jshint esversion: 6 */\n/**\n * UserHandle\n */\n\n\n\n    //Defines the nodes collection in diagram\n    var nodes = [\n        {\n            id: 'NewIdea', width: 150, height: 60, offsetX: 300, offsetY: 60, shape: { type: 'Flow', shape: 'Terminator' },\n            annotations: [{ content: 'New idea identified' }],\n        }, {\n            id: 'Meeting', width: 150, height: 60, offsetX: 300, offsetY: 155, shape: { type: 'Flow', shape: 'Process' },\n            annotations: [{ content: 'Meeting with board' }]\n        }, {\n            id: 'BoardDecision', width: 150, height: 110, offsetX: 300, offsetY: 280, shape: { type: 'Flow', shape: 'Decision' },\n            annotations: [{ content: 'Board decides \\n whether to proceed' }]\n        }, {\n            id: 'Project', width: 150, height: 100, offsetX: 300, offsetY: 430, shape: { type: 'Flow', shape: 'Decision' },\n            annotations: [{ content: 'Find Project manager' }]\n        }, {\n            id: 'End', width: 150, height: 60, offsetX: 300, offsetY: 555, shape: { type: 'Flow', shape: 'Process' },\n            annotations: [{ content: 'Implement and Deliver' }]\n        }, {\n            id: 'Decision', width: 250, height: 60, offsetX: 550, offsetY: 60, shape: { type: 'Flow', shape: 'Card' },\n            annotations: [{ content: 'Decision process for new software ideas', }],\n            fixedUserHandles: [{ padding: { left: 2, right: 2, top: 2, bottom: 2 }, offset: { x: 1.1, y: 0.5 }, width: 20, height: 20, }],\n        }, {\n            id: 'Reject', width: 150, height: 60, offsetX: 550, offsetY: 280, shape: { type: 'Flow', shape: 'Process' },\n            annotations: [{ content: 'Reject' }]\n        }, {\n            id: 'Resources', width: 150, height: 60, offsetX: 550, offsetY: 430, shape: { type: 'Flow', shape: 'Process' },\n            annotations: [{ content: 'Hire new resources' }]\n        }\n    ];\n    //Defines the connectors collection in diagram\n    var connectors = [\n        { id: 'connector1', type: 'Straight', sourceID: 'NewIdea', targetID: 'Meeting' },\n        { id: 'connector2', type: 'Straight', sourceID: 'Meeting', targetID: 'BoardDecision' },\n        { id: 'connector3', type: 'Straight', sourceID: 'BoardDecision', targetID: 'Project' },\n        { id: 'connector4', type: 'Straight', sourceID: 'Project', targetID: 'End' },\n        { id: 'connector5', type: 'Straight', sourceID: 'BoardDecision', targetID: 'Reject' },\n        { id: 'connector6', type: 'Straight', sourceID: 'Project', targetID: 'Resources' }\n    ];\n\n    //Enable the clone Tool for UserHandle.\n    function getTool(action) {\n        var tool;\n        if (action === 'clone') {\n            tool = new CloneTool(diagram.commandHandler);\n        }\n        return tool;\n    }\n\n\n    //set the position of the userhandle.\n    function setUserHandlePosition(offset, side, target) {\n        diagram.selectedItems.userHandles[0].offset = offset;\n        diagram.selectedItems.userHandles[0].side = side;\n\n    }\n    //set the style of the userhandle.\n    function applyUserHandleStyle(bgcolor, target) {\n        diagram.selectedItems.userHandles[0].backgroundColor = bgcolor;\n        diagram.selectedItems.userHandles[0].pathColor = 'White';\n\n    }\n\n    //Defines the user handle collection for nodes in diagram\n    var handles = [\n        {\n            name: 'clone', pathData: 'M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,' +\n                '0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z ' +\n                'M68.5,72.5h-30V34.4h30V72.5z',\n            visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n        }\n    ];\n    var __extends = (this && this.__extends) || (function () {\n        var extendStatics = Object.setPrototypeOf ||\n            /* jshint proto: true */\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return function (d, b) {\n            extendStatics(d, b);\n            function __() { this.constructor = d; }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n    })();\n    //function to clone object \n    var CloneTool = (function (_super) {\n        __extends(CloneTool, _super);\n        function CloneTool() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        //Defines the clone tool for copying node or connector objects.\n        CloneTool.prototype.mouseDown = function (args) {\n            var newObject;\n            if (diagram.selectedItems.nodes.length > 0) {\n                newObject = ej.diagrams.cloneObject(diagram.selectedItems.nodes[0]);\n            }\n            else {\n                newObject = ej.diagrams.cloneObject(diagram.selectedItems.connectors[0]);\n            }\n            newObject.id += ej.diagrams.randomId();\n            diagram.paste([newObject]);\n            if (diagram.selectedItems.connectors.length > 0) {\n                args.source = diagram.connectors[diagram.connectors.length - 1];\n            }\n            else {\n                args.source = diagram.nodes[diagram.nodes.length - 1];\n            }\n            args.sourceWrapper = args.source.wrapper;\n            _super.prototype.mouseDown.call(this, args);\n            this.inAction = true;\n        };\n        return CloneTool;\n    }(ej.diagrams.MoveTool));\n    // Defines the content of the diagram.\n    var diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '600px', nodes: nodes,\n        connectors: connectors,\n        selectedItems: { constraints: ej.diagrams.SelectorConstraints.UserHandle, userHandles: handles },\n        snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\n        fixedUserHandleTemplate: '#fixeduserhandletemplate',\n        fixedUserHandleClick: function (args) {\n            diagram.remove(args.element);\n        },\n        // Sets default values for a Node.\n        getNodeDefaults: function (node) {\n            return {\n                style: { fill: '#578CA9', strokeColor: 'none' },\n                annotations: [{ style: { color: 'white' } }]\n            };\n        },\n        //set CustomTool \n        getCustomTool: getTool,\n        selectionChange: function (arg) {\n            var propertyAppearance = document.getElementById('propertypanel');\n            var blockSelectedElement = document.getElementsByClassName('e-remove-selection');\n            if (arg.newValue) {\n                if ((arg.newValue[0] instanceof ej.diagrams.Node) || (arg.newValue[0] instanceof ej.diagrams.Connector)) {\n                    if (blockSelectedElement.length) {\n                        blockSelectedElement[0].classList.remove('e-remove-selection');\n                    }\n                }\n                else {\n                    if (!propertyAppearance.classList.contains('e-remove-selection')) {\n                        propertyAppearance.classList.add('e-remove-selection');\n                    }\n                }\n            }\n        }\n\n    });\n    diagram.appendTo('#diagram');\n    diagram.fitToPage();\n    diagram.select([diagram.nodes[0]]);\n    //Change the postion of the UserHandle\n    document.getElementById('appearance').onclick = function (args) {\n        var target = args.target;\n        var appearanceBlock = document.getElementById('appearance');\n\n        if (target.className === 'image-pattern-style') {\n            switch (target.id) {\n                case 'left':\n                    setUserHandlePosition(0, 'Bottom', target);\n                    break;\n                case 'right':\n                    setUserHandlePosition(1, 'Bottom', target);\n                    break;\n                case 'topr':\n                    setUserHandlePosition(0, 'Right', target);\n                    break;\n            }\n        }\n    };\n    //Change the appearence of the UserHandle\n    document.getElementById('pattern').onclick = function (args) {\n        var target = args.target;\n        var patternBlock = document.getElementById('pattern');\n\n        if (target.className === 'image-pattern-style') {\n            switch (target.id) {\n                case 'pattern1':\n                    applyUserHandleStyle('#1E90FF', target);\n                    break;\n                case 'pattern2':\n                    applyUserHandleStyle('#3CB371', target);\n                    break;\n                case 'pattern3':\n                    applyUserHandleStyle('#FF6347', target);\n                    break;\n            }\n        }\n    };\n\n\n\n\n\n\n"}