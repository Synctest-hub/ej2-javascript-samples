{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/zoom-and-pan/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div>\n        <div id=\"toolbar\" style=\"width: 100%\"></div>\n    </div>\n    <div id=\"diagram\"></div>\n    \n    \n</div></div></body></html>","index.js":"{{ripple}}/* jshint esversion: 6 */\n/**\n * Default Zoom and Pan sample\n */\n\n\n\n    //Toolbar functionality\n    function handleToolbarClick(args) {\n        switch (args.item.tooltipText) {\n            case 'Zoom In':\n                var zoomin = { type: 'ZoomIn', zoomFactor: 0.2 };\n                diagram.zoomTo(zoomin);\n                break;\n            case 'Zoom Out':\n                var zoomout = { type: 'ZoomOut', zoomFactor: 0.2 };\n                diagram.zoomTo(zoomout);\n                break;\n            case 'Reset':\n                diagram.reset();\n                break;\n            case 'Pan Tool':\n                diagram.tool = ej.diagrams.DiagramTools.ZoomPan;\n                break;\n            case 'Pointer':\n                diagram.clearSelection();\n                diagram.drawingObject = {};\n                diagram.tool = ej.diagrams.DiagramTools.SingleSelect | ej.diagrams.DiagramTools.MultipleSelect;\n                break;\n            case 'Fit To Page':\n                diagram.fitToPage();\n                break;\n            case 'Bring Into View':\n                //(EJ2-70843-sampleIssue)- while clicking the bring Into view without selectiong nodes means exception occurs and it is resolved\n                if (diagram.selectedItems.nodes.length > 0) {\n                    var bound = diagram.selectedItems.nodes[0].wrapper.bounds;\n                    diagram.bringIntoView(bound);\n                }\n                break;\n            case 'Bring Into Center':\n                if (diagram.selectedItems.nodes.length > 0) {\n                    var bounds = diagram.selectedItems.nodes[0].wrapper.bounds;\n                    diagram.bringToCenter(bounds);\n                }\n                break;\n        }\n    }\n\n    //customize the visual representation of nodes within a diagram.\n    function setNodeTemplate(node) {\n        // Create an outer stack panel to contain image and text elements\n        var stackcontent = new ej.diagrams.StackPanel();\n        stackcontent.id = node.id + '_outerstack';\n        stackcontent.orientation = 'Horizontal';\n        stackcontent.style.strokeColor = 'gray';\n        stackcontent.padding = { left: 5, right: 10, top: 5, bottom: 5 };\n\n        // Create an image element to display employee image\n        var imageElement = new ej.diagrams.ImageElement();\n        imageElement.width = 50;\n        imageElement.height = 50;\n        imageElement.style.strokeColor = 'none';\n        imageElement.source = node.data.ImageUrl;\n        imageElement.id = node.id + '_pic';\n\n        // Create an inner stack panel to organize text elements\n        var innerStackPanel = new ej.diagrams.StackPanel();\n        innerStackPanel.style.strokeColor = 'none';\n        innerStackPanel.margin = { left: 5, right: 0, top: 0, bottom: 0 };\n        innerStackPanel.id = node.id + '_innerstack';\n\n        // Create a text element for displaying employee name\n        var textElement = new ej.diagrams.TextElement();\n        textElement.content = node.data.Name;\n        textElement.style.color = 'black';\n        textElement.style.bold = true;\n        textElement.style.strokeColor = 'none';\n        textElement.horizontalAlignment = 'Left';\n        textElement.style.fill = 'none';\n        textElement.id = node.id + '_text1';\n\n        // Create a TextElement for the node's designation\n        var desigTextElement = new ej.diagrams.TextElement();\n        desigTextElement.margin = { left: 0, right: 0, top: 5, bottom: 0 };\n        desigTextElement.content = node.data.Designation;\n        desigTextElement.style.color = 'black';\n        desigTextElement.style.strokeColor = 'none';\n        desigTextElement.style.fontSize = 12;\n        desigTextElement.style.fill = 'none';\n        desigTextElement.horizontalAlignment = 'Left';\n        desigTextElement.style.textWrapping = 'Wrap';\n        desigTextElement.id = node.id + '_desig';\n\n        // Add text elements to the inner StackPanel\n        innerStackPanel.children = [textElement, desigTextElement];\n\n        // Add image element and inner StackPanel to the outer StackPanel\n        stackcontent.children = [imageElement, innerStackPanel];\n\n        // Return the StackPanel containing the node's content\n        return stackcontent;\n    }\n    //Initializes diagram control\n    var diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '500px', selectionChange: selectionChange,\n        snapSettings: { constraints: 0 },\n        //Configrues hierarchical tree layout\n        layout: {\n            type: 'OrganizationalChart', margin: { top: 20 },\n            getLayoutInfo: function (tree) {\n                if (!tree.hasSubTree) {\n                    tree.orientation = 'Vertical';\n                    tree.type = 'Right';\n                }\n            }\n        },\n        dataSourceSettings: {\n            id: 'Id', parentId: 'ReportingPerson', dataSource: new ej.data.DataManager(window.overviewData)\n        },\n        //Sets the default values of Nodes.\n        getNodeDefaults: function (node) {\n            node.height = 50;\n            node.style = { fill: 'transparent', strokeWidth: 2 };\n            return node;\n        },\n        //Sets the default values of connectors.\n        getConnectorDefaults: function (connector) {\n            connector.targetDecorator.shape = 'None';\n            connector.type = 'Orthogonal';\n            connector.style.strokeColor = 'gray';\n            return connector;\n        },\n        //customization of the node.\n        setNodeTemplate: function (node) {\n            return setNodeTemplate(node);\n        }\n    });\n    // Appends the diagram to a specified element\n    diagram.appendTo('#diagram');\n\n    /*eslint esversion: 6 */\n    // method to disable toolbar items \n    function selectionChange(args) {\n        if (args.state === 'Changed') {\n            var selectedItems = diagram.selectedItems.nodes;\n            // Disables toolbar items if no nodes are selected\n            if (selectedItems.length === 0) {\n                toolbarEditor.items.find(item => item.id === 'BringIntoView').disabled = true;\n                toolbarEditor.items.find(item => item.id === 'BringIntoCenter').disabled = true;\n            }\n            // Enables toolbar items if node is selected\n            if (selectedItems.length > 0) {\n                toolbarEditor.items.find(item => item.id === 'BringIntoView').disabled = false;\n                toolbarEditor.items.find(item => item.id === 'BringIntoCenter').disabled = false;\n            }\n        }\n    }\n\n    //create the Toolbar and adding items in ToolBar.\n    var toolbarEditor = new ej.navigations.Toolbar({\n        clicked: handleToolbarClick, // Event handler for toolbar item click\n        items: [\n            {\n                id: 'ZoomIn',\n                type: 'Button',\n                tooltipText: 'Zoom In',\n                prefixIcon: 'e-icons e-zoom-in',\n            },\n            {\n                id: 'ZoomOut',\n                type: 'Button',\n                tooltipText: 'Zoom Out',\n                prefixIcon: 'e-icons e-zoom-out',\n            },\n            {\n                id: 'Separator1', type: 'Separator'\n            },\n            {\n                id: 'Pointer',\n                type: 'Button',\n                tooltipText: 'Pointer',\n                prefixIcon: 'e-icons e-mouse-pointer',\n            },\n            {\n                id: 'PanTool',\n                type: 'Button',\n                tooltipText: 'Pan Tool',\n                prefixIcon: 'e-icons e-pan',\n            },\n            {\n                id: 'Separator2', type: 'Separator'\n            },\n            {\n                id: 'Reset',\n                type: 'Button',\n                tooltipText: 'Reset',\n                prefixIcon: 'e-icons e-reset',\n            },\n            {\n                id: 'FitToPage',\n                type: 'Button',\n                tooltipText: 'Fit To Page',\n                prefixIcon: 'e-icons e-zoom-to-fit',\n            },\n            {\n                id: 'Separator3', type: 'Separator'\n            },\n            {\n                id: 'BringIntoView',\n                type: 'Button',\n                tooltipText: 'Bring Into View',\n                prefixIcon: 'e-icons e-bring-to-view',\n                disabled: true\n            },\n            {\n                id: 'BringIntoCenter',\n                type: 'Button',\n                tooltipText: 'Bring Into Center',\n                prefixIcon: 'e-icons e-bring-to-center',\n                disabled: true\n            },\n        ]\n    });\n    toolbarEditor.appendTo('#toolbar');\n\n"}