{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/sequence-diagram/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n\n\n</div></body></html>","index.js":"{{ripple}}/**\r\n * Sequence Diagram\r\n */\r\n\r\n\r\n    //Function to Create nodes by the parameters\r\n    function createNode(id, width, height, offsetX, offsetY, shapeType, content, fill, bold) {\r\n        return {\r\n            id: id,\r\n            width: width,\r\n            height: height,\r\n            offsetX: offsetX,\r\n            offsetY: offsetY,\r\n            shape: { type: shapeType, content: content },\r\n            style: { fill: fill, bold: bold }\r\n        };\r\n    }\r\n    //Function to Create connectors by the parameters\r\n    function createConnector(id, sourceX, sourceY, targetX, targetY) {\r\n        return {\r\n            id: id,\r\n            type: 'Straight',\r\n            sourcePoint: { x: sourceX, y: sourceY },\r\n            targetPoint: { x: targetX, y: targetY },\r\n            targetDecorator: { shape: 'None' },\r\n            style: { strokeColor: '#A5A6A7' }\r\n        };\r\n    }\r\n    // Define nodes for the diagram\r\n    var nodes = [\r\n        createNode('employee', 100, 60, 100, 100, 'Text', 'Employee', 'transparent', true),\r\n        createNode('teamLead', 100, 60, 350, 100, 'Text', 'Team Lead', 'transparent', true),\r\n        createNode('dashboard', 100, 60, 600, 100, 'Text', 'Dashboard', 'transparent', true),\r\n        createNode('manager', 100, 60, 850, 100, 'Text', 'Manager', 'transparent', true),\r\n        createNode('leaveRequest', 100, 60, 225, 250, 'Text', 'Leave Request', 'transparent', false),\r\n        createNode('leaveApproval', 100, 60, 225, 484, 'Text', 'Leave Approval', 'transparent', false),\r\n        createNode('checkEmplyeeAvail', 175, 30, 470, 345, 'Text', 'Check Employee availability and task status', 'transparent', false),\r\n        createNode('forwardLeaveMssg', 150, 30, 600, 420, 'Text', 'Forward Leave Request', 'transparent', false),\r\n        createNode('noObjection', 150, 30, 600, 460, 'Text', 'No Objection', 'transparent', false),\r\n        //Basic shape nodes\r\n        {\r\n            id: 'employeeNode', shape: { type: 'Basic', shape: 'Rectangle' }, width: 10, height: 250, offsetX: 100, offsetY: 350,\r\n            style: { fill: 'orange', strokeColor: 'orange' },\r\n            ports: [{ id: 'p1', offset: { x: 1, y: 0.05 }, visibility: ej.diagrams.PortVisibility.hidden },\r\n            { id: 'p2', offset: { x: 1, y: 0.97 }, visibility: ej.diagrams.PortVisibility.hidden },]\r\n        },\r\n        {\r\n            id: 'teamLeadNode', shape: { type: 'Basic', shape: 'Rectangle' }, width: 10, height: 190, offsetX: 350, offsetY: 320,\r\n            style: { fill: 'orange', strokeColor: 'orange' },\r\n            ports: [{ id: 'p1', offset: { x: 0, y: 0.07 }, visibility: ej.diagrams.PortVisibility.hidden },\r\n            { id: 'p2', offset: { x: 1, y: 0.92 }, visibility: ej.diagrams.PortVisibility.hidden },\r\n            { id: 'p3', offset: { x: 1, y: 0.5 }, visibility: ej.diagrams.PortVisibility.hidden },]\r\n        },\r\n        {\r\n            id: 'dashboardNode', shape: { type: 'Basic', shape: 'Rectangle' }, width: 10, height: 25, offsetX: 600, offsetY: 320,\r\n            style: { fill: 'orange', strokeColor: 'orange' },\r\n            ports: [{ id: 'p1', offset: { x: 0, y: 0.5 }, visibility: ej.diagrams.PortVisibility.hidden }]\r\n        },\r\n        {\r\n            id: 'managerNode', shape: { type: 'Basic', shape: 'Rectangle' }, width: 10, height: 50, offsetX: 850, offsetY: 420,\r\n            style: { fill: 'orange', strokeColor: 'orange' },\r\n            ports: [{ id: 'p1', offset: { x: 0, y: 0.1 }, visibility: ej.diagrams.PortVisibility.hidden },\r\n            { id: 'p2', offset: { x: 0, y: 0.9 }, visibility: ej.diagrams.PortVisibility.hidden },]\r\n        },\r\n\r\n    ];\r\n    // Define connectors for the diagram\r\n    var connectors = [\r\n        // straight connectors \r\n        createConnector('employeeCon1', 100, 120, 100, 225),\r\n        createConnector('employeeCon2', 100, 475, 100, 600),\r\n        createConnector('teamLeanCon1', 350, 120, 350, 225),\r\n        createConnector('teamLeanCon2', 350, 415, 350, 600),\r\n        createConnector('dashboardCon1', 600, 120, 600, 307),\r\n        createConnector('dashboardCon2', 600, 333, 600, 600),\r\n        createConnector('managerCon1', 850, 120, 850, 395),\r\n        createConnector('managerCon2', 850, 445, 850, 600),\r\n\r\n        // arrow connectors\r\n        {\r\n            id: 'empToTeamLead', type: 'Straight', sourceID: 'employeeNode', sourcePortID: 'p1',\r\n            targetID: 'teamLeadNode', targetPortID: 'p1'\r\n        },\r\n        {\r\n            id: 'teamLeadToEmp', type: 'Straight', sourcePoint: { x: 350, y: 465 }, style: { strokeDashArray: '4 4' },\r\n            targetID: 'employeeNode', targetPortID: 'p2'\r\n        },\r\n        {\r\n            id: 'teamLeadToDash', type: 'Straight', sourceID: 'teamLeadNode', sourcePortID: 'p3',\r\n            targetID: 'dashboardNode', targetPortID: 'p1'\r\n        },\r\n        {\r\n            id: 'teamLeadToManager', type: 'Straight', sourceID: 'teamLeadNode', sourcePortID: 'p2',\r\n            targetID: 'managerNode', targetPortID: 'p1'\r\n        },\r\n        {\r\n            id: 'managerToTeamLead', type: 'Straight', sourceID: 'managerNode', sourcePortID: 'p2',\r\n            targetPoint: { x: 350, y: 440 }, style: { strokeDashArray: '4 4' }\r\n        },\r\n    ];\r\n    // Create a new instance of the diagram\r\n    var diagram = new ej.diagrams.Diagram({\r\n        width: '100%', height: '600px', nodes: nodes, connectors: connectors,\r\n        snapSettings: { constraints: 0 },\r\n        tool: ej.diagrams.DiagramTools.ZoomPan,\r\n        getConnectorDefaults: getConnectorDefaults,\r\n        created: function () {\r\n            diagram.fitToPage();\r\n        }\r\n    });\r\n    // Append the diagram to the DOM\r\n    diagram.appendTo('#diagram');\r\n    // Function to customize connector defaults\r\n    function getConnectorDefaults(connector) {\r\n        connector.targetDecorator.style = { fill: '#489ECC', strokeColor: '#489ECC' };\r\n        if (connector.targetDecorator.shape === 'Arrow') {\r\n            connector.style = { strokeColor: '#489ECC', strokeWidth: 2 };\r\n        }\r\n    }\r\n\r\n\r\n"}