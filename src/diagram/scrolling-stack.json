{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/scrolling/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <link href=\"https://ej2.syncfusion.com/demos/src/diagram/styles/diagram-common.css\" rel=\"stylesheet\">\n    <style>\n        /* To disable the scrollable area in property panel */\n        .diagram-scroll .disabledbutton {\n            pointer-events: none;\n            opacity: 0.4;\n        }\n    </style>\n    <div style=\"width: 100%;\" class=\"diagram-scroll\">\n        <div class=\"sb-mobile-palette-bar\">\n            <div id=\"palette-icon\" style=\"float: right;\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n        </div>\n        <div id=\"palette-space\" style=\"width:20%;float:left\">\n            <div id=\"symbolpalette\" style=\"width:90%;\"></div>\n        </div>\n        <div id=\"diagram-space\" style=\"width:59%;float:left\">\n            <div id=\"diagram\"></div>\n        </div>\n        <div id=\"properties\" style=\"width:20%;float:right\">\n            <div class=\"property-panel-header\">\n                Properties\n            </div>\n            <div class=\"row db-prop-row\">        \n                \n                <div class=\"col-xs-4 db-col-right db-prop-text-style\" style=\"padding-top: 14px\">\n                    <span class=\"db-prop-text-style db-spacing-text\">Scroll Limit</span>\n                </div>\n                <div class=\"col-xs-7 db-col-left\" style=\"padding-top: 10px;padding-right: 0px;\">\n                    <div class=\"db-text-input\">\n                        <input type=\"text\" id=\"scrollLimit\">\n                    </div>\n                </div>\n            </div>\n            <div id=\"scrollableDiv\">\n                <div class=\"property-panel-header\">\n                    Scrollable Area\n                </div>\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                    <div class=\"col-xs-12\" style=\"padding-right: 15px;\">\n                            <div style=\"width:10%;float:left;margin-top: 5px;\">\n                                <span class=\"texstyle\" style=\"display: block;\">X</span>\n                            </div>\n                            <div style=\"width:70%;float:right;padding-left: 20px;\">\n                                <input type=\"text\" id=\"x\">\n                            </div>\n                    </div>\n                </div>\n\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                    <div class=\"col-xs-12\" style=\"padding-right: 15px;\">\n                        <div style=\"width:10%;float:left;margin-top: 5px;\">\n                            <span class=\"texstyle\" style=\"width: fit-content;\">Y</span>\n                        </div>\n                        <div style=\"width:70%;float:right;padding-left: 20px;\">\n                            <input type=\"text\" id=\"y\">\n                        </div>\n                    </div>\n                </div>\n                \n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                    <div class=\"col-xs-12 db-col-left\">\n                            <div style=\"width:10%;float:left;margin-top: 5px;\">\n                                <span class=\"texstyle\">Width</span>\n                            </div>\n                            <div style=\"width:70%;float:right;padding-left: 20px;\">\n                                <input type=\"text\" id=\"width\">\n                            </div>\n                    </div>\n                </div>\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">    \n                    <div class=\"col-xs-12 db-col-right\">\n                        <div style=\"width:10%;float:left;margin-top: 5px;\">\n                            <span class=\"texstyle\">Height</span>\n                        </div>\n                        <div style=\"width:70%;float:right;padding-left: 20px\">\n                            <input type=\"text\" id=\"height\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div style=\"padding-top:5px;margin-top: 20px;\">\n                <div style=\"float:left\">Enable AutoScroll</div>\n                <div style=\"float: left;margin-left: 10px;\">\n                    <input type=\"checkbox\" id=\"checked\">\n                </div>\n            </div>\n            <div id=\"autoScrollDiv\" style=\"margin-top: 30px\">\n                <div class=\"property-panel-header\">\n                    AutoScroll border\n                </div>\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                    <div class=\"col-xs-12 db-col-left\">\n                            <div style=\"width:10%;float:left;margin-top: 5px;\">\n                                <span>Left</span>\n                            </div>\n                            <div style=\"width:70%;float:right;padding-left: 20px;\">\n                                <input type=\"text\" id=\"left\">\n                            </div>\n                    </div>\n                </div>\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                    <div class=\"col-xs-12 db-col-right\">\n                        <div style=\"width:10%;float:left;margin-top: 5px;\">\n                            <span>Top</span>\n                        </div>\n                        <div style=\"width:70%;float:right;padding-left: 20px;\">\n                            <input type=\"text\" id=\"top\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                    <div class=\"col-xs-12 db-col-left\">\n                            <div style=\"width:10%;float:left;margin-top: 5px;\">\n                                <span>Right</span>\n                            </div>\n                            <div style=\"width:70%;float:right;padding-left: 20px;\">\n                                <input type=\"text\" id=\"right\">\n                            </div>\n                    </div>\n                </div>\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                    <div class=\"col-xs-12 db-col-right\">\n                        <div style=\"width:10%;float:left;margin-top: 5px;\">\n                            <span>Bottom</span>\n                        </div>\n                        <div style=\"width:70%;float:right;padding-left: 20px;\">\n                            <input type=\"text\" id=\"bottom\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}/**\n * Default FlowShape sample\n */\nej.diagrams.Diagram.Inject(ej.diagrams.UndoRedo);\n\n\n\n    /* tslint:disable */\n    /*eslint eslint-comments/no-duplicate-disable: error */\n\n    /*eslint-disable no-undef */\n\n    //To enhance the functionality of a webpage for mobile devices by adding a click event listener \n    function addMobileEvents() {\n        var isMobileMode = window.matchMedia('(max-width:550px)').matches;\n        if (isMobileMode) {\n            var paletteIcon = document.getElementById('palette-icon');\n            if (paletteIcon) {\n                paletteIcon.addEventListener('click', openSymbolPalette, false);\n            }\n        }\n    }\n    //To manage the visibility state of the palette space on the webpage on a mobile device\n    function openSymbolPalette() {\n        var paletteSpace = document.getElementById('palette-space');\n        isMobileMode = window.matchMedia('(max-width:550px)').matches;\n        if (isMobileMode) {\n            if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n                paletteSpace.classList.add('sb-mobile-palette-open');\n            }\n            else {\n                paletteSpace.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n    //Sets the default values of a Connector.\n    function getConnectorDefaults(connector) {\n        setConnectorStyles(connector, '#757575');\n        return connector;\n    }\n    //set styles for connector\n    function setConnectorStyles(connector, color) {\n        connector.style.strokeWidth = 1;\n        connector.style.strokeColor = color;\n        connector.targetDecorator.style.fill = color;\n        connector.targetDecorator.style.strokeColor = color;\n    }\n    var scrollableArea = new ej.diagrams.Rect(0, 0, 1500, 1500);\n\n    //Initializes diagram control\n    var diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '700px',\n        rulerSettings: { showRulers: true },\n        pageSettings: { width: 1500, height: 1500 },\n        scrollSettings: {\n            scrollLimit: 'Infinity', canAutoScroll: true, autoScrollBorder: { left: 30, right: 30, top: 30, bottom: 30 },\n            scrollableArea: scrollableArea\n        },\n        getConnectorDefaults: getConnectorDefaults,\n        //Sets the node style for DragEnter element.\n        dragEnter: function (args) {\n            var node = args.element;\n            if (node instanceof ej.diagrams.Node) {\n                var nodeWidth = node.width;\n                var nodeHeight = node.height;\n                var ratio = 100 / node.width;\n                node.width = 100;\n                node.height *= ratio;\n                node.offsetX += (node.width - nodeWidth) / 2;\n                node.offsetY += (node.height - nodeHeight) / 2;\n                node.style = { fill: '#357BD2', strokeColor: 'white' };\n                node.annotations = [{ style: { color: 'white', fill: 'transparent' } }];\n            }\n        },\n        //Disable the scrollable area\n        created: function (args) {\n            var scrollElement = document.getElementById('scrollableDiv');\n            scrollElement.className = \"disabledbutton\";\n        }\n    });\n    diagram.appendTo('#diagram');\n    //Initialize the basicshapes for the symbol palette\n    var basicShapes = [\n        {\n            id: 'rectangle', shape: { type: 'Basic', shape: 'Rectangle' }\n        },\n        {\n            id: 'ellipse', shape: { type: 'Basic', shape: 'Ellipse' }\n        },\n        {\n            id: 'triangle', shape: { type: 'Basic', shape: 'Triangle' }\n        },\n        {\n            id: 'plus', shape: { type: 'Basic', shape: 'Plus' }\n        },\n        {\n            id: 'star', shape: { type: 'Basic', shape: 'Star' }\n        },\n        {\n            id: 'pentagon', shape: { type: 'Basic', shape: 'Pentagon' }\n        },\n        {\n            id: 'heptagon', shape: { type: 'Basic', shape: 'Heptagon' }\n        },\n        {\n            id: 'octagon', shape: { type: 'Basic', shape: 'Octagon' }\n        },\n        {\n            id: 'trapezoid', shape: { type: 'Basic', shape: 'Trapezoid' }\n        },\n        {\n            id: 'decagon', shape: { type: 'Basic', shape: 'Decagon' }\n        },\n        {\n            id: 'rightTriangle', shape: { type: 'Basic', shape: 'RightTriangle' }\n        },\n        {\n            id: 'parallelogram', shape: { type: 'Basic', shape: 'Parallelogram' }\n        },\n    ];\n    //Initialize the flowshapes for the symbol palette\n    var flowShapes = [\n        { id: 'terminator1', shape: { type: 'Flow', shape: 'Terminator' } },\n        { id: 'process1', shape: { type: 'Flow', shape: 'Process' } },\n        { id: 'extract1', shape: { type: 'Flow', shape: 'Extract' } },\n        { id: 'manualOperation1', shape: { type: 'Flow', shape: 'ManualOperation' } },\n        { id: 'merge1', shape: { type: 'Flow', shape: 'Merge' } },\n        { id: 'offPageReference1', shape: { type: 'Flow', shape: 'OffPageReference' } },\n        { id: 'sequentialAccessStorage1', shape: { type: 'Flow', shape: 'SequentialAccessStorage' } },\n        { id: 'annotation1', shape: { type: 'Flow', shape: 'Annotation' } },\n        { id: 'annotation21', shape: { type: 'Flow', shape: 'Annotation2' } },\n        { id: 'data1', shape: { type: 'Flow', shape: 'Data' } },\n        { id: 'summingJunction1', shape: { type: 'Flow', shape: 'SummingJunction' } },\n        { id: 'or1', shape: { type: 'Flow', shape: 'Or' } },\n        { id: 'internalStorage1', shape: { type: 'Flow', shape: 'InternalStorage' } },\n        { id: 'card1', shape: { type: 'Flow', shape: 'Card' } },\n        { id: 'delay1', shape: { type: 'Flow', shape: 'Delay' } },\n        { id: 'decision1', shape: { type: 'Flow', shape: 'Decision' } },\n        { id: 'document1', shape: { type: 'Flow', shape: 'Document' } },\n        { id: 'preDefinedProcess1', shape: { type: 'Flow', shape: 'PreDefinedProcess' } },\n        { id: 'paperTap1', shape: { type: 'Flow', shape: 'PaperTap' } },\n        { id: 'directData1', shape: { type: 'Flow', shape: 'DirectData' } },\n        { id: 'sequentialData1', shape: { type: 'Flow', shape: 'SequentialData' } },\n        { id: 'sort1', shape: { type: 'Flow', shape: 'Sort' } },\n        { id: 'multiDocument1', shape: { type: 'Flow', shape: 'MultiDocument' } },\n        { id: 'collate1', shape: { type: 'Flow', shape: 'Collate' } },\n    ];\n    //Initialize the connector for the symbol palette \n    var connectorSymbols = [\n        {\n            id: 'orthogonal', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 }\n        },\n        {\n            id: 'straight', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 }\n        },\n        {\n            id: 'straightConnector', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'orthogonalConnector', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'bezier', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'None' }\n        },\n    ];\n\n    //Initializes the symbol palette\n    var palette = new ej.diagrams.SymbolPalette({\n        expandMode: 'Single',\n        getNodeDefaults: function (symbol) {\n            var obj = symbol;\n            if (obj.id === 'terminator1' || obj.id === 'process1') {\n                obj.width = 80;\n                obj.height = 40;\n            }\n            else if (obj.id === 'decision1' || obj.id === 'document1' || obj.id === 'preDefinedProcess1' ||\n                obj.id === 'paperTap1' || obj.id === 'directData1' || obj.id === 'multiDocument1' || obj.id === 'data') {\n                obj.width = 50;\n                obj.height = 40;\n            }\n            else {\n                obj.width = 50;\n                obj.height = 50;\n            }\n            obj.style.strokeColor = '#757575';\n        },\n        palettes: [\n            { id: 'basic', expanded: true, symbols: basicShapes, iconCss: 'e-ddb-icons e-basic', title: 'Basic Shapes' },\n            { id: 'flow', expanded: false, symbols: flowShapes, iconCss: 'e-ddb-icons e-flow', title: 'Flow Shapes' },\n            { id: 'connectors', expanded: false, symbols: connectorSymbols, iconCss: 'e-ddb-icons e-connector', title: 'Connectors' }\n        ],\n        symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 },\n        getSymbolInfo: function (symbol) {\n            return { fit: true };\n        },\n        getConnectorDefaults: getConnectorDefaults,\n        width: '100%', height: '700px', symbolHeight: 60, symbolWidth: 60,\n    });\n    palette.appendTo('#symbolpalette');\n    addMobileEvents();\n    /* tslint:enable */\n\n    //Sets the scroll limit\n    var scrollLimitDatasource = [\n        { text: 'Infinity', value: 'Infinity' }, { text: 'Diagram', value: 'Diagram' },\n        { text: 'Limited', value: 'Limited' }\n    ];\n\n    //Initializes a dropdown for scrollLimit\n    var scrollLimit = new ej.dropdowns.DropDownList({\n        dataSource: scrollLimitDatasource,\n        fields: { text: 'text', value: 'value' },\n        value: 'Infinity',\n        change: function (args) {\n            var element = document.getElementById('scrollableDiv');\n            element.className = args.value === \"Limited\" ? \"\" : \"disabledbutton\";\n            diagram.scrollSettings.scrollLimit = args.value;\n        }\n    });\n    scrollLimit.appendTo('#scrollLimit');\n    //Initializes a checkbox to enable or disable autoscroll\n    var checkBoxObj = new ej.buttons.CheckBox({\n        checked: true,\n        change: function (args) {\n            var autoScrollElement = document.getElementById('autoScrollDiv');\n            if (args.checked) {\n                autoScrollElement.className = '';\n                diagram.scrollSettings.canAutoScroll = true;\n            } else {\n                autoScrollElement.className = 'disabledbutton';\n                diagram.scrollSettings.canAutoScroll = false;\n            }\n        }\n    });\n    checkBoxObj.appendTo('#checked');\n\n    var offsetXtextBox = new ej.inputs.TextBox({\n        // sets value to the NumericTextBox\n        value: 10,\n        change: function (args) {\n            diagram.scrollSettings.scrollableArea.x = Number(args.value);\n        }\n    });\n    // Renders initialized NumericTextBox \n    offsetXtextBox.appendTo('#x');\n    var offsetYtextBox = new ej.inputs.TextBox({\n        // sets value to the NumericTextBox\n        value: 10,\n        change: function (args) {\n            diagram.scrollSettings.scrollableArea.y = Number(args.value);\n        }\n    });\n\n    // Renders initialized NumericTextBox\n    offsetYtextBox.appendTo('#y');\n\n    var widthTextBox = new ej.inputs.TextBox({\n        // sets value to the NumericTextBox\n        value: 1500,\n        change: function (args) {\n            diagram.scrollSettings.scrollableArea.width = Number(args.value);\n        }\n    });\n\n    // Renders initialized NumericTextBox\n    widthTextBox.appendTo('#width');\n\n    var heightTextBox = new ej.inputs.TextBox({\n        // sets value to the NumericTextBox\n        value: 1500,\n        change: function (args) {\n            diagram.scrollSettings.scrollableArea.height = Number(args.value);\n        }\n    });\n\n    // Renders initialized NumericTextBox\n    heightTextBox.appendTo('#height');\n\n    var leftTextBox = new ej.inputs.TextBox({\n        // Sets value to the NumericTextBox\n        value: 30,\n        change: function (args) {\n            diagram.scrollSettings.autoScrollBorder.left = Number(args.value);\n        }\n    });\n\n    // Renders initialized NumericTextBox\n    leftTextBox.appendTo('#left');\n\n    var rightTextBox = new ej.inputs.TextBox({\n        // Sets value to the NumericTextBox\n        value: 30,\n        change: function (args) {\n            diagram.scrollSettings.autoScrollBorder.right = Number(args.value);\n        }\n    });\n\n    // Renders initialized NumericTextBox\n    rightTextBox.appendTo('#right');\n\n    var topTextBox = new ej.inputs.TextBox({\n        // Sets value to the NumericTextBox\n        value: 30,\n        change: function (args) {\n            diagram.scrollSettings.autoScrollBorder.top = Number(args.value);\n        }\n    });\n\n    // Renders initialized NumericTextBox\n    topTextBox.appendTo('#top');\n\n    var bottomTextBox = new ej.inputs.TextBox({\n        // Sets value to the NumericTextBox\n        value: 30,\n        change: function (args) {\n            diagram.scrollSettings.autoScrollBorder.bottom = Number(args.value);\n        }\n    });\n\n    // Renders initialized NumericTextBox\n    bottomTextBox.appendTo('#bottom');\n\n\n\n"}