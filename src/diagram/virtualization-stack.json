{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/virtualization/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div>\n        <div id=\"toolbar\" style=\"width: 100%\"></div>\n    </div>\n\n    <div id=\"diagram\"></div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}/**\n * virtualization sample\n */\n\n\n    // tslint:disable-next-line:max-func-body-length\n    var bound = new ej.diagrams.Rect(100, 100, 500, 100);\n    var diagram;\n    // Handles the click event for the context menu items.\n    function onClick(args) {\n        switch (args.item.tooltipText) {\n            case 'ZoomIn':\n                diagram.zoomTo({ type: 'ZoomIn', zoomFactor: 0.2 });\n                break;\n            case 'ZoomOut':\n                diagram.zoomTo({ type: 'ZoomOut', zoomFactor: 0.2 });\n                break;\n            case 'Reset':\n                diagram.reset();\n                diagram.fitToPage({ mode: 'Page', region: 'CustomBounds', margin: { left: 50, right: 50 }, customBounds: bound });\n                break;\n        }\n    }\n    // Generates virtualized data for the diagram based on the provided window.virtualizationData.\n    function dataVirtualization() {\n        var i = 0;\n        var data = [];\n        var parentName = window.virtualizationData[0].Name;\n        data.push({ 'Name': parentName, 'Parent': \"\" });\n        i++;\n        for (var j = 1; j < 100; j++) {\n            var name = window.virtualizationData[i].Name;\n            data.push({ 'Name': name, 'Parent': parentName });\n            i++;\n            for (var k = 0; k < 2; k++) {\n                data.push({ 'Name': window.virtualizationData[i].Name, 'Parent': name });\n                i++;\n            }\n        }\n        return data;\n    }\n    var virtualData = new ej.data.DataManager(dataVirtualization());\n    //Initializes diagram control\n    diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '500px',\n        //Configrues hierarchical tree layout\n        layout: {\n            type: 'HierarchicalTree',\n            margin: { left: 10, top: 10 },\n            horizontalSpacing: 40.0,\n            verticalSpacing: 50.0,\n            orientation: 'TopToBottom',\n        },\n        //Sets the default values of nodes\n        getNodeDefaults: function (node) {\n            node.shape = { type: 'Text', content: node.data.Name, shape: 'Rectangle', cornerRadius: 5 };\n            node.style = { fill: '#659be5', strokeColor: 'none', color: 'white', strokeWidth: 2 };\n            node.backgroundColor = '#659be5';\n            node.shape.margin = { left: 5, right: 5, bottom: 5, top: 5 };\n            node.width = 80;\n            node.height = 30;\n            return node;\n        },\n        //Sets the default values of connectors\n        getConnectorDefaults: function (connector) {\n            connector.type = 'Orthogonal';\n            connector.cornerRadius = 7;\n            connector.targetDecorator.height = 7;\n            connector.targetDecorator.width = 7;\n            connector.style.strokeColor = '#6d6d6d';\n        },\n        //Configures data source\n        dataSourceSettings: {\n            dataSource: virtualData,\n            parentId: \"Parent\",\n            id: \"Name\",\n        },\n        //Disables all interactions except zoom/pan\n        tool: ej.diagrams.DiagramTools.ZoomPan,\n        //Enables the virtualization constraint\n        constraints: ej.diagrams.DiagramConstraints.Default | ej.diagrams.DiagramConstraints.Virtualization,\n        snapSettings: { constraints: 0 },\n        created: function () {\n            //fit the diagram to the page with respect to mode and region\n            diagram.fitToPage(\n                {\n                    mode: 'Page',\n                    region: 'CustomBounds',\n                    margin: { left: 50, right: 50 },\n                    customBounds: bound\n                });\n        },\n    });\n    diagram.appendTo('#diagram');\n    //create the Toolbar and add ZoomIn,ZoomOut and Reset options in ToolBar.\n    var toolbarObj = new ej.navigations.Toolbar({\n        clicked: onClick,\n        items: [\n            { type: 'Button', text: 'Zoom In', tooltipText: 'ZoomIn', prefixIcon: 'e-ddb-icons e-zoomin' }, { type: 'Separator' },\n            { type: 'Button', text: 'Zoom Out', tooltipText: 'ZoomOut', prefixIcon: 'e-ddb-icons e-zoomout' }, { type: 'Separator' },\n            { type: 'Button', text: 'Reset', tooltipText: 'Reset', prefixIcon: 'e-diagram-icons e-diagram-reset' }\n        ]\n    });\n    toolbarObj.appendTo('#toolbar');\n"}