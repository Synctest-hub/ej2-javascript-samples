{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/port/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><style>\n    .sb-child-row {\n        margin-top: 8px;\n    }\n\n    .property-section .e-remove-selection {\n        cursor: not-allowed;\n    }\n\n    .row-header {\n        font-size: 13px;\n        font-weight: 500;\n        padding-left: 10px\n    }\n    /* To disable pointer events when there is no selection in diagram */\n    .e-remove-selection .property-section-content {\n        pointer-events: none;\n    }\n</style>\n<div class=\"col-lg-8 control-section\">\n    <div id=\"diagram\"></div>\n</div>\n<div class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-header\">\n        Properties\n    </div>\n    <div class=\"property-panel-content\">\n        <div id=\"propertypanel\" class=\"e-remove-selection\">\n            <div class=\"property-section-content\">\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Visibility\n                        </div>\n                        <div>\n                            <input type=\"text\" id=\"portsVisiblity\">\n                        </div>\n                    </div>\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Shape\n                        </div>\n                        <div>\n                            <input type=\"text\" id=\"shape\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Fill Color\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <input type=\"text\" id=\"fill\">\n                        </div>\n                    </div>\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Stroke Color\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <input type=\"text\" id=\"border\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Stroke Width\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <input type=\"text\" id=\"width\">\n                        </div>\n                    </div>\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Size\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <input type=\"text\" id=\"size\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n</div></body></html>","index.js":"{{ripple}}\n//Sets up the default configuration for the diagram.\n\n    var diagram;\n    var portVisibilityDrop;\n    var portFillDrop;\n    var portBorderDrop;\n    var portShapeDrop;\n    var portWidthNum;\n    var portSizeNum;\n    //Retrieves the ports of the currently selected node in the diagram.\n    function getPort() {\n        var node = diagram.selectedItems.nodes[0];\n        var port = [];\n        if (node) {\n            port = node.ports;\n        }\n        return port;\n    }\n    //enable or disable the property panel based on the Selection.\n    function selectionChange(args) {\n        if (args.state === 'Changed') {\n            var appearance = document.getElementById('propertypanel');\n            var selectedElement = document.getElementsByClassName('e-remove-selection');\n            if (args.newValue) {\n\n                if (args.newValue[0] instanceof ej.diagrams.Node && selectedElement.length) {\n                    selectedElement[0].classList.remove('e-remove-selection');\n                    var port = getPort()[0];\n                    portVisibilityDrop.value = port.visibility;\n                    portVisibilityDrop.dataBind();\n                    portFillDrop.value = port.style.fill;\n                    portFillDrop.dataBind();\n                    portBorderDrop.value = port.style.strokeColor;\n                    portBorderDrop.dataBind();\n                    portShapeDrop.value = port.shape;\n                    portShapeDrop.dataBind();\n                    portSizeNum.value = port.height;\n                    portSizeNum.dataBind();\n                    portWidthNum.value = port.style.strokeWidth;\n                    portWidthNum.dataBind();\n                }\n            }\n        }\n    }\n    //change the Visibility of the Port.\n    function portVisibilityChange(args) {\n        var port = getPort();\n        if (port) {\n            for (var j = 0; j < port.length; j++) {\n                port[j].visibility = portVisibilityDrop.value;\n            }\n            diagram.dataBind();\n        }\n    }\n    //set the appearence of the Port.\n    function applyPortStyle(value) {\n        var port = getPort();\n        for (var j = 0; j < port.length; j++) {\n            if (value === 'size') {\n\n                port[j].height = portSizeNum.value;\n                port[j].width = portSizeNum.value;\n\n            } else if (value === 'strokewidth') {\n                port[j].style.strokeWidth = portWidthNum.value;\n            }\n        }\n        diagram.dataBind();\n    }\n    //change the shape of the Port.\n    function portShapeChange(args) {\n        var port = getPort();\n        for (var j = 0; j < port.length; j++) {\n            switch (portShapeDrop.value) {\n                case 'X':\n                    port[j].shape = 'X';\n                    break;\n                case 'Circle':\n                    port[j].shape = 'Circle';\n                    break;\n                case 'Square':\n                    port[j].shape = 'Square';\n                    break;\n                case 'Custom':\n                    port[j].shape = 'Custom';\n                    port[j].pathData = 'M6.805,0L13.61,10.703L0,10.703z';\n                    break;\n            }\n            diagram.dataBind();\n        }\n\n    }\n    //Function to Create nodes by the parameters\n    function createNode(id, offsetX, offsetY, annotationContent, ports) {\n        return {\n            id: id,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            annotations: [{ content: annotationContent }],\n            ports: ports\n        };\n    }\n    //Function to Create connector by the parameters\n    function createConnector(id, sourceID, sourcePortID, targetID, targetPortID) {\n        return {\n            id: id,\n            sourceID: sourceID,\n            sourcePortID: sourcePortID,\n            targetID: targetID,\n            targetPortID: targetPortID\n        };\n    }\n    //Function to Create connector by the parameters\n    function createPort(id, shape, offsetX, offsetY, text) {\n        return {\n            id: id,\n            shape: shape,\n            offset: { x: offsetX, y: offsetY },\n            height: 8,\n            width: 8,\n            visibility: ej.diagrams.PortVisibility.Visible,\n            text: text\n        };\n    }\n    // Get the bounding rectangle of the control section\n    var bounds = document.getElementsByClassName('control-section')[0].getBoundingClientRect();\n    // Calculate the center X coordinate of the control section\n    var centerX = bounds.width / 2;\n    // Define ports for each node\n    var node1Port = [\n        createPort('port1', 'Circle', 0, 0.5, 'In - 1'),\n        createPort('port2', 'Circle', 1, 0.5, 'OUT - 1'),\n        createPort('port3', 'Circle', 0.25, 1, 'In - 2'),\n        createPort('port4', 'Circle', 0.5, 1, 'OUT - 2'),\n        createPort('port5', 'Circle', 0.75, 1, 'In - 3')\n    ];\n    var node2Port = [\n        createPort('port6', 'Circle', 0, 0.5, 'In - 1'),\n        createPort('port7', 'Circle', 1, 0.35, 'OUT - 1'),\n        createPort('port8', 'Circle', 1, 0.70, 'In - 2'),\n        createPort('port9', 'Circle', 0.5, 1, 'OUT - 2')\n    ];\n    var node3Port = [\n        createPort('port10', 'Circle', 0, 0.5, 'Out - 1'),\n        createPort('port11', 'Circle', 0.5, 0, 'In - 1'),\n        createPort('port12', 'Circle', 0.5, 1, 'OUT - 2')\n    ];\n    var node4Port = [\n        createPort('port13', 'Circle', 0, 0.5, 'In - 1'),\n        createPort('port14', 'Circle', 0.5, 0, 'In - 2'),\n        createPort('port15', 'Circle', 0.5, 1, 'OUT - 1')\n    ];\n    var node5Port = [\n        createPort('port16', 'Circle', 0, 0.5, 'out - 1'),\n        createPort('port17', 'Circle', 0.5, 0, 'In - 1'),\n        createPort('port18', 'Circle', 1, 0.5, 'OUT - 2')\n    ];\n    var node6Port = [\n        createPort('port19', 'Circle', 0, 0.35, 'In - 1'),\n        createPort('port20', 'Circle', 0.5, 1, 'Out - 1')\n    ];\n    var node7Port = [\n        createPort('port21', 'Circle', 0.5, 0, 'In - 1'),\n        createPort('port22', 'Circle', 0.5, 1, 'Out - 1')\n    ];\n    // Define shapes for nodes\n    var shape1 = { type: 'Basic', shape: 'Rectangle' };\n    var shape2 = { type: 'Basic', shape: 'Diamond' };\n    var nodes = [\n        createNode('node1', centerX - 200, 100, 'Publisher', node1Port),\n        createNode('node2', centerX, 100, 'Completed Book', node2Port),\n        createNode('node3', centerX, 200, '1st Review', node3Port),\n        createNode('node4', centerX, 300, 'Legal Terms', node4Port),\n        createNode('node5', centerX, 400, '2nd Review', node5Port),\n        createNode('node6', centerX + 200, 100, 'Board', node6Port),\n        createNode('node7', centerX + 200, 200, 'Approval', node7Port)\n    ];\n    // Define connectors for the diagram\n    var connectors = [\n        createConnector('connector1', 'node1', 'port2', 'node2', 'port6'),\n        createConnector('connector2', 'node1', 'port4', 'node4', 'port13'),\n        createConnector('connector3', 'node2', 'port9', 'node3', 'port11'),\n        createConnector('connector4', 'node2', 'port7', 'node6', 'port19'),\n        createConnector('connector5', 'node3', 'port10', 'node1', 'port5'),\n        createConnector('connector6', 'node3', 'port12', 'node4', 'port14'),\n        createConnector('connector7', 'node4', 'port15', 'node5', 'port17'),\n        createConnector('connector8', 'node5', 'port18', 'node2', 'port8'),\n        createConnector('connector9', 'node5', 'port16', 'node1', 'port3'),\n        createConnector('connector10', 'node6', 'port20', 'node7', 'port21'),\n        createConnector('connector11', 'node7', 'port22', 'node1', 'port1')\n    ];\n    //Initialize diagram control\n    diagram = new ej.diagrams.Diagram({\n        width: '100%', height: 580,\n        nodes: nodes, connectors: connectors, selectionChange: selectionChange,\n        snapSettings: { constraints: 0 },\n        //Sets the default values of nodes\n        getNodeDefaults: function (node) {\n            //Initialize shape\n            if (node.id === 'node1' || node.id === 'node2' || node.id === 'node4' || node.id === 'node6') {\n                node.shape = shape1;\n            } else if (node.id === 'node3' || node.id === 'node5' || node.id === 'node7') {\n                node.shape = shape2;\n            }\n            //sets height and width for nodes\n            node.height = 65;\n            node.width = 100;\n            node.style = { fill: '#ebf8fb', strokeColor: '#baeaf5' };\n            for (var i = 0; i < node.ports.length; i++) {\n                //sets styles for the ports\n                node.ports[i].style = {\n                    fill: '#366f8c',\n                    strokeColor: '#366f8c'\n                };\n                node.ports[i].width = 6;\n                node.ports[i].height = 6;\n            }\n            node.annotations[0].style = {\n                fontSize: 13,\n                color: 'black'\n            };\n        },\n        //Sets the default values of connector\n        getConnectorDefaults: function (connector) {\n            //defines type of the connectors\n            connector.type = 'Orthogonal';\n            connector.style = { strokeColor: '#8cdcef', strokeWidth: 1 };\n            connector.targetDecorator = { width: 5, height: 5, style: { fill: '#8cdcef', strokeColor: '#8cdcef' } };\n        },\n    });\n    diagram.appendTo('#diagram');\n    //Visibility collection of the Port.\n    var visibility = [\n        { PortVisibility: ej.diagrams.PortVisibility.Visible, text: 'Visible' },\n        { PortVisibility: ej.diagrams.PortVisibility.Hidden, text: 'Hidden' },\n        { PortVisibility: ej.diagrams.PortVisibility.Hover, text: 'Hover' },\n        { PortVisibility: ej.diagrams.PortVisibility.Connect, text: 'Connect' }\n    ];\n    //Enable or disable the visibility of the Port\n    portVisibilityDrop = new ej.dropdowns.DropDownList({\n        enabled: true,\n        dataSource: visibility,\n        fields: { value: 'PortVisibility', text: 'text' },\n        value: 'Visible',\n        change: portVisibilityChange,\n    });\n    portVisibilityDrop.appendTo('#portsVisiblity');\n    //Colorpicker used to apply for fill color of the Port.\n    portFillDrop = new ej.inputs.ColorPicker({\n        value: '#000', disabled: false, change: function (arg) {\n            var port = getPort();\n            for (var j = 0; j < port.length; j++) {\n                port[j].style.fill = arg.currentValue.rgba;\n            }\n        }\n    });\n    portFillDrop.appendTo('#fill');\n    //Colorpicker used to apply for stroke color of the Port.\n    portBorderDrop = new ej.inputs.ColorPicker({\n        value: '#000', disabled: false, change: function (arg) {\n            var port = getPort();\n            for (var j = 0; j < port.length; j++) {\n                port[j].style.strokeColor = arg.currentValue.rgba;\n            }\n        }\n    });\n    portBorderDrop.appendTo('#border');\n    //Shape collection of the Port.\n    var shape = [\n        { shape: 'X', text: 'X' },\n        { shape: 'Circle', text: 'Circle' },\n        { shape: 'Square', text: 'Square' },\n        { shape: 'Custom', text: 'Custom' }\n    ];\n    //DropDownList is used to apply the shape of the Port.\n    portShapeDrop = new ej.dropdowns.DropDownList({\n        enabled: true, placeholder: 'Select a Port', value: 'Circle',\n        dataSource: shape, fields: { value: 'shape', text: 'text' },\n        change: portShapeChange\n    });\n    //NumericTextBox is used to apply the size of the Port.\n    portShapeDrop.appendTo('#shape');\n    portSizeNum = new ej.inputs.NumericTextBox({\n        enabled: true,\n        format: '###.##',\n        value: 6,\n        min: 1,\n        step: 1,\n        change: function (args) {\n            applyPortStyle('size');\n        }\n    });\n    portSizeNum.appendTo('#size');\n    //NumericTextBox is used to apply the StrokeWidth of the Port.\n    portWidthNum = new ej.inputs.NumericTextBox({\n        enabled: true,\n        format: '###.##',\n        value: 1,\n        min: 0.5,\n        step: 0.5,\n        change: function (args) {\n            applyPortStyle('strokewidth');\n        }\n    });\n    portWidthNum.appendTo('#width');\n    diagram.select([diagram.nodes[0]]);\n"}