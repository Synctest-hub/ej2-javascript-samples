{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/uml-activity/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><link href=\"https://ej2.syncfusion.com/demos/src/diagram/styles/diagram-common.css\" rel=\"stylesheet\">\n<div class=\"control-section\">\n        <div id=\"umlActivityDiagram\" style=\"width: 100%; height: 521px\">\n    <div class=\"sb-mobile-palette-bar\">\n        <div id=\"palette-icon\" style=\"float: right;\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n    </div>\n    <div id=\"palette-space\" class=\"sb-mobile-palette\">\n        <div id=\"symbolPalette\" style=\"width:90%;\"></div>\n    </div>\n    <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n        <div id=\"diagram\"></div>\n    </div>\n    </div>\n</div>\n\n\n</div></body></html>","index.js":"{{ripple}}/* jshint esversion: 9 */\n/**\n * UMLActivity Diagram for customer service\n */\n\n\n\n// Default function to initialize the diagram and symbol palette\n\n    // Function to define ports for a node based on its ID\n    function getNodePorts(node) {\n        if (node.id === 'ForkNode' || node.id === 'JoinNode') {\n            var node2Ports = [\n                { id: 'port1', offset: { x: 0.2, y: 1 } },\n                { id: 'port2', offset: { x: 0.8, y: 1 } },\n                { id: 'port3', offset: { x: 0.2, y: 0 } },\n                { id: 'port4', offset: { x: 0.8, y: 0 } },\n            ];\n            return node2Ports;\n        } else {\n            var ports = [\n                { id: 'portLeft', offset: { x: 0, y: 0.5 } },\n                { id: 'portRight', offset: { x: 1, y: 0.5 } },\n                { id: 'portBottom', offset: { x: 0.5, y: 1 } },\n                { id: 'portTop', offset: { x: 0.5, y: 0 } },\n            ];\n            return ports;\n        }\n    }\n\n    // Function to generate  connector symbols for the symbol palette\n    function getConnectors() {\n        // Define the target decorator for connectors\n        var targetDecorator = { shape: 'Arrow', style: { fill: '#757575', strokeColor: '#757575' } };\n        // Define source and target points for connectors\n        var sourcePoint = { x: 0, y: 0 };\n        var targetPoint = { x: 40, y: 40 };\n        // Define connector symbols with different styles and types\n        var connectorSymbols = [\n            {\n                id: 'Link2', sourcePoint: sourcePoint, targetPoint: targetPoint,\n                type: 'Orthogonal', style: getConnectorStyle(true), targetDecorator: targetDecorator,\n            },\n            {\n                id: 'Link1', sourcePoint: sourcePoint, targetPoint: targetPoint,\n                type: 'Orthogonal', style: getConnectorStyle(), targetDecorator: targetDecorator,\n            },\n            {\n                id: 'Link3', sourcePoint: sourcePoint, targetPoint: targetPoint,\n                type: 'Straight', style: getConnectorStyle(), targetDecorator: targetDecorator,\n            }\n        ];\n        return connectorSymbols;\n    }\n\n    // Function to sets style for the connector symbols for the symbol palette\n    function getConnectorStyle(dashArrayed) {\n        var style = {};\n        if (dashArrayed) {\n            style = { strokeWidth: 2, strokeColor: '#757575', strokeDashArray: '4 4', };\n        } else {\n            style = { strokeWidth: 2, strokeColor: '#757575' };\n        }\n        return style;\n    }\n\n    // Function to sets the default values for the symbols in the symbol palette\n    function setPaletteNodeDefaults(symbol) {\n        if (symbol.id === 'JoinNode') {\n            symbol.width = 20; symbol.height = 50;\n        } else if (symbol.id === 'ForkNode') {\n            symbol.width = 50; symbol.height = 20;\n        } else if (symbol.id === 'Decision' || symbol.id === 'MergeNode') {\n            symbol.width = 50; symbol.height = 40;\n        } else {\n            symbol.width = 50; symbol.height = 50;\n        }\n        if (symbol.id === 'InitialNode' || symbol.id === 'FinalNode' || symbol.id === 'JoinNode' || symbol.id === 'ForkNode') {\n            symbol.style.fill = '#757575';\n        }\n        symbol.style.strokeColor = '#757575';\n    }\n\n    // Function to add event listeners\n    function addEvents() {\n        var isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            var paletteIcon = document.getElementById('palette-icon');\n            if (paletteIcon) {\n                paletteIcon.addEventListener('click', openPalette, false);\n            }\n        }\n    }\n\n    // Function to open or close the palette on mobile devices\n    function openPalette() {\n        var paletteSpace = document.getElementById('palette-space');\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n                paletteSpace.classList.add('sb-mobile-palette-open');\n            }\n            else {\n                paletteSpace.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n    var bounds = document.getElementById('diagram-space').getBoundingClientRect();\n    var centerX = bounds.width / 2;\n    var middle = centerX - 50;\n    var left = middle - 120;\n    var right = middle + 120;\n\n    // Common function to get default node properties\n    function getDefaultNode(id, height, width, offsetX, offsetY, type, shapeType, annotations) {\n        return {\n            id: id,\n            height: height,\n            width: width,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            shape: { type: type, shape: shapeType },\n            annotations: annotations\n        };\n    }\n\n    // Node configurations \n    //Initializes the nodes for the diagram.\n    var nodes = [\n        getDefaultNode(\"Start\", 40, 40, 300, 20, \"UmlActivity\", \"InitialNode\"),\n        getDefaultNode(\"ReceiveCall\", 40, 105, 300, 100, \"UmlActivity\", \"Action\", [{ content: \"Receive Customer Call\" }]),\n        getDefaultNode(\"ForkNode\", 10, 70, 300, 170, \"UmlActivity\", \"ForkNode\"),\n        getDefaultNode(\"Determine\", 40, 105, 190, 250, \"UmlActivity\", \"Action\", [{ content: \"Determine Type of Call\" }]),\n        getDefaultNode(\"Log\", 40, 105, 410, 250, \"UmlActivity\", \"Action\", [{ content: \"Customer Logging a Call\" }]),\n        getDefaultNode(\"Decision\", 50, 50, 190, 350, \"UmlActivity\", \"Decision\"),\n        getDefaultNode(\"transfer_sales\", 40, 105, 100, 450, \"UmlActivity\", \"Action\", [{ content: \"Transfer the Call to Sales\" }]),\n        getDefaultNode(\"transfer_desk\", 40, 105, 280, 450, \"UmlActivity\", \"Action\", [{ content: \"Transfer the Call to Help Desk\" }]),\n        getDefaultNode(\"MergeNode\", 50, 50, 190, 540, \"UmlActivity\", \"MergeNode\"),\n        getDefaultNode(\"JoinNode\", 10, 70, 300, 630, \"UmlActivity\", \"JoinNode\"),\n        getDefaultNode(\"CloseCall\", 40, 105, 300, 710, \"UmlActivity\", \"Action\", [{ content: \"Close Call\", margin: { left: 25, right: 25 } }]),\n        getDefaultNode(\"FinalNode\", 40, 40, 300, 800, \"UmlActivity\", \"FinalNode\")\n    ];\n\n    // Common function to get default connector properties\n    function getDefaultConnector(id, sourceID, targetID, additionalProps) {\n        return {\n            id: id,\n            sourceID: sourceID,\n            targetID: targetID,\n            ...additionalProps\n        };\n    }\n\n    // Connector configurations\n    //Initializes the connector for the diagram.\n    var connectors = [\n        getDefaultConnector(\"connector1\", \"Start\", \"ReceiveCall\"),\n        getDefaultConnector(\"connector2\", \"ReceiveCall\", \"ForkNode\"),\n        getDefaultConnector(\"connector3\", \"ForkNode\", \"Determine\", {\n            sourcePortID: \"port1\",\n            targetPortID: \"portTop\",\n            segments: [\n                { type: \"Orthogonal\", length: 20, direction: \"Bottom\" },\n                { type: \"Orthogonal\", length: 50, direction: \"Left\" }\n            ]\n        }),\n        getDefaultConnector(\"connector4\", \"ForkNode\", \"Log\", {\n            sourcePortID: \"port2\",\n            targetPortID: \"portTop\",\n            segments: [\n                { type: \"Orthogonal\", length: 20, direction: \"Bottom\" },\n                { type: \"Orthogonal\", length: 50, direction: \"Right\" }\n            ]\n        }),\n        getDefaultConnector(\"connector5\", \"Determine\", \"Decision\"),\n        getDefaultConnector(\"connector6\", \"Decision\", \"transfer_sales\", {\n            sourcePortID: \"portLeft\",\n            targetPortID: \"portTop\",\n            shape: { type: \"UmlActivity\", flow: \"Association\" },\n            annotations: [{\n                id: \"connector6Label\", content: \"type=New Customer\", offset: 0.715,\n                style: { fill: \"white\", color: \"black\", textWrapping: 'NoWrap' }\n            }]\n        }),\n        getDefaultConnector(\"connector7\", \"Decision\", \"transfer_desk\", {\n            sourcePortID: \"portRight\",\n            targetPortID: \"portTop\",\n            shape: { type: \"UmlActivity\", flow: \"Association\" },\n            annotations: [{\n                id: \"connector7Label\", content: \"type=Existing Customer\", offset: 0.75,\n                style: { fill: \"white\", color: \"black\", textWrapping: 'NoWrap' }\n            }]\n        }),\n        getDefaultConnector(\"connector8\", \"transfer_sales\", \"MergeNode\", {\n            sourcePortID: \"portBottom\",\n            targetPortID: \"portLeft\",\n            segments: [{ type: \"Orthogonal\", length: 50, direction: \"Bottom\" }]\n        }),\n        getDefaultConnector(\"connector9\", \"transfer_desk\", \"MergeNode\", {\n            sourcePortID: \"portBottom\",\n            targetPortID: \"portRight\",\n            segments: [{ type: \"Orthogonal\", length: 50, direction: \"Bottom\" }]\n        }),\n        getDefaultConnector(\"connector10\", \"MergeNode\", \"JoinNode\", {\n            sourcePortID: \"portBottom\",\n            targetPortID: \"port3\"\n        }),\n        getDefaultConnector(\"connector11\", \"Log\", \"JoinNode\", {\n            sourcePortID: \"portBottom\",\n            targetPortID: \"port4\",\n            segments: [\n                { type: \"Orthogonal\", length: 265, direction: \"Bottom\" },\n                { type: \"Orthogonal\", length: 50, direction: \"Left\" }\n            ]\n        }),\n        getDefaultConnector(\"connector12\", \"JoinNode\", \"CloseCall\"),\n        getDefaultConnector(\"connector13\", \"CloseCall\", \"FinalNode\")\n    ];\n\n\n    // initializes the uml activity symbols to the UML Shapes in the symbol palette\n    var umlActivityShapes = [\n        { id: 'Action', shape: { type: 'UmlActivity', shape: 'Action' } },\n        { id: 'Decision', shape: { type: 'UmlActivity', shape: 'Decision' } },\n        { id: 'MergeNode', shape: { type: 'UmlActivity', shape: 'MergeNode' } },\n        { id: 'InitialNode', shape: { type: 'UmlActivity', shape: 'InitialNode' } },\n        { id: 'FinalNode', shape: { type: 'UmlActivity', shape: 'FinalNode' } },\n        { id: 'ForkNode', shape: { type: 'UmlActivity', shape: 'ForkNode' } },\n        { id: 'JoinNode', shape: { type: 'UmlActivity', shape: 'JoinNode' } },\n        { id: 'TimeEvent', shape: { type: 'UmlActivity', shape: 'TimeEvent' } },\n        { id: 'AcceptingEvent', shape: { type: 'UmlActivity', shape: 'AcceptingEvent' } },\n        { id: 'SendSignal', shape: { type: 'UmlActivity', shape: 'SendSignal' } },\n        { id: 'ReceiveSignal', shape: { type: 'UmlActivity', shape: 'ReceiveSignal' } },\n        { id: 'StructuredNode', shape: { type: 'UmlActivity', shape: 'StructuredNode' } },\n        { id: 'Note', shape: { type: 'UmlActivity', shape: 'Note' } }\n    ];\n\n    //Initializes diagram control\n    var diagram = new ej.diagrams.Diagram({\n        // sets the height and width of the diagram\n        width: '100%', height: '100%',\n        // sets the nodes and connectors of the diagram\n        nodes: nodes, connectors: connectors,\n        // sets snap settings to the diagram\n        snapSettings: {\n            constraints: ej.diagrams.SnapConstraints.None\n        },\n        //Sets the default values of a node\n        getNodeDefaults: function (node) {\n            node.ports = getNodePorts(node);\n            if (node.ports) {\n                for (var i = 0; i < node.ports.length; i++) {\n                    node.ports[i].visibility = ej.diagrams.PortVisibility.Hidden;\n                }\n            }\n            if (node.id === 'Start' || node.id === 'ForkNode' || node.id === 'JoinNode' || node.id === 'FinalNode') {\n                node.style.fill = '#444';\n            }\n            node.style.strokeColor = '#444';\n            return node;\n        },\n        //Sets the default values of a Connector.\n        getConnectorDefaults: function (connector) {\n            if (connector.id.indexOf('connector') !== -1) {\n                connector.type = 'Orthogonal'; connector.cornerRadius = 10;\n                connector.targetDecorator = { shape: 'OpenArrow', style: { strokeColor: '#444', fill: '#444' } };\n            }\n        },\n        created: function () {\n            addEvents();\n        }\n    });\n    diagram.appendTo('#diagram');\n    //Initializes symbol palette\n    var palette = new ej.diagrams.SymbolPalette({\n        // sets the expandable mode of the symbol palette\n        expandMode: 'Multiple',\n        // sets the height and wodth of the symbol palette\n        width: '100%', height: '100%',\n        // sets the default values for the symbols in the symbol palette\n        getNodeDefaults: setPaletteNodeDefaults,\n        // sets the height and width of the symbols\n        symbolHeight: 55, symbolWidth: 55,\n        // sets the margin for the symbol\n        symbolMargin: { left: 10, right: 10, top: 10, bottom: 10 },\n        // sets the palettes to be displayed in the symbol palette\n        palettes: [\n            { id: 'umlActivity', expanded: true, symbols: umlActivityShapes, title: 'UML Shapes' },\n            { id: 'Connector', expanded: true, symbols: getConnectors(), title: 'Connectors' },\n        ],\n        getSymbolInfo: function (symbol) { return { fit: true }; }\n    });\n    palette.appendTo('#symbolPalette');\n\n"}