{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/custom-shapes/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n    <script id=\"nodetemplate\" type=\"text/x-template\">\n        ${if(id == 'node')}\n            <div id=\"diagram_control\" class=\"diagram_border_cus\">\n                <div class=\"pane col-xs-12 col-sm-12 col-md-12 pie-container\">\n                    <div class=\"pieChartHeader\">\n                        <p class=\"chart-title\">New Expenses</p>\n                        <p id=\"rangeDate\" class=\"chart-value\">Jun 1 - Dec 1</p>\n                    </div>\n                \n                    <div id=\"pieChart\" style=\"height:100%; width:49%; overflow:hidden;float:left;\" margin=\"20px\"> \n                    </div>\n                    <div id=\"grid\" style=\"height:100%; width:49%; overflow:hidden;float:left;\"> </div>\n                </div>\n            </div>\n        ${else if(id == 'node2')}\n            <div class=\"diagram_border_cus diagram_chart\">\n                <div id=\"lineChart\"> </div>\n            </div>\n        ${else if(id == 'node3')}\n            <div class=\"diagram_border_cus diagram_chart\">\n                <div id=\"barChart\"> </div>\n            </div>\n        ${else if(id == 'node4')}\n            <div class=\"diagram_border_cus diagram_border_cal\">\n                <div id=\"element_calendar\"> \n                    <input id=\"daterange\" type=\"text\" style=\"horizontal-align:Left;vertical-align:Top\">\n                </div>\n            </div>\n        ${/if}\n    </script>\n    <script id=\"rowtemplate\" type=\"text/x-template\">\n        <tr style=\"height: 30px;\">\n            <td>\n                <div style=\"width: 16px; height: 16px; margin-left: 1px; border-radius: 16px; background:${color}\"></div>\n            </td>\n            <td>${text}</td>\n            <td>${(data.y)}</td>\n            <td style=\"text-align:right;\">${x}</td>\n        </tr>\n    </script>\n\n<div id=\"custom-diagram\" class=\"control-section\">\n    <div id=\"diagram\"></div>\n</div>\n\n\n<style>\n    #diagram_control .chart-title {\n        font-size: 16px;\n    }\n\n    #diagram_control .chart-title,\n    #diagram_control .chart-subtitle {\n        font-family: Roboto;\n        font-size: 16px;\n        font-weight: 400;\n        font-weight: 400;\n        letter-spacing: 0.02em;\n        line-height: 16px;\n        color: #797979 !important;\n    }\n\n    .chart-value {\n        color: #9d9d9d;\n    }\n\n    #diagram_control {\n        background-color: white;\n        height: 100%;\n        width: auto;\n    }\n\n    #diagram_control .e-grid,\n    #diagram_control .e-grid .e-gridheader {\n        border: none;\n    }\n\n    .diagram_border_cus .pieChartHeader {\n        margin-left: 20px;\n        margin-top: 20px;\n    }\n\n    .diagram_border_cus {\n        border: 1px solid transparent;\n        background: #FFFFFF;\n        box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);\n        border-radius: 6px;\n    }\n\n    .diagram_chart {\n        padding-left: 15px;\n        padding-right: 15px;\n    }\n\n    #element_calendar .e-input-group:not(.e-success):not(.e-warning):not(.e-error):not(.e-float-icon-left),\n    .e-input-group.e-float-icon-left:not(.e-success):not(.e-warning):not(.e-error) .e-input-in-wrap,\n    .e-input-group.e-control-wrapper:not(.e-success):not(.e-warning):not(.e-error):not(.e-float-icon-left) {\n        border: none;\n    }\n\n    .diagram_border_cal {\n        height: 30px;\n        padding-left: 12px;\n    }\n\n    #custom-diagram .e-diagram-resize-handle.e-disabled {\n        fill: #ced4da;\n        opacity: 1;\n        stroke: #fff;\n        visibility: hidden;\n    }\n</style>\n</div></body></html>","index.js":"{{ripple}}// Enable ripple effect on the window\nej.base.enableRipple(window.ripple);\n// Inject necessary dependencies for the diagram\nej.diagrams.Diagram.Inject(ej.diagrams.DataBinding, ej.charts.Chart);/**\n\n * Getting started -  Html Node\n */\n\n// tslint:disable-next-line:max-func-body-length\n// Set up initial variables and data structures required for data processing and visualization\n\nvar pie;\nvar grid;\nvar dataSource = new ej.data.DataManager(window.expenseData);\nvar tempData = dataSource.dataSource.json;\nvar pieRenderingData = [];\nvar pieLegendData = [];\nvar columnIncomeDS = [];\nvar columnExpenseDS = [];\nvar lineDS = [];\nvar tempChartIncomeDS = {};\nvar tempChartExpenseDS = {};\nvar tempChartLineDS = {};\nvar curDateTime;\nvar lineD = [];\n\n\n// Define predicates for filtering data based on date range\nvar predicateStart = new ej.data.Predicate('DateTime', 'greaterthanorequal', window.startDate);\nvar predicateEnd = new ej.data.Predicate('DateTime', 'lessthanorequal', window.endDate);\n//Compound predicate by combining predicateStart and predicateEnd\nvar predicate = predicateStart.and(predicateEnd);\n\n\n    var shape = { type: 'HTML' };\n    var constraints = ej.diagrams.NodeConstraints.Default & ~(ej.diagrams.NodeConstraints.Resize | ej.diagrams.NodeConstraints.Rotate);\n    var nodes = [{\n        id: 'node', offsetX: 10, offsetY: 100, width: 1050, height: 450, shape: shape, constraints: constraints\n    },\n    {\n        id: 'node2', offsetX: 276, offsetY: 550, width: 512, height: 408, shape: shape, constraints: constraints\n    },\n    {\n        id: 'node3', offsetX: -257, offsetY: 550, width: 512, height: 408, shape: shape, constraints: constraints\n    },\n    {\n        id: 'node4', offsetX: 409, offsetY: -151, width: 250, height: 30, shape: shape, constraints: constraints\n    },\n    {\n        id: 'node5', offsetX: -434, offsetY: -157, width: 250, height: 30,\n        style: { fill: 'transparent', strokeColor: 'transparent' },\n        constraints: ej.diagrams.NodeConstraints.Default & ~ej.diagrams.NodeConstraints.Select,\n        annotations: [{\n            content: \"EXPENSE TRACKER\",\n            style: { fontSize: 16, color: \"#797979\", bold: true }\n        }]\n    }];\n\n    //initialize the diagram control\n    var diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '900px', nodes: nodes,\n        backgroundColor: '#F5F5F5',\n        nodeTemplate: '#nodetemplate',\n        created: function () { diagram.fitToPage(); }\n    });\n    diagram.appendTo('#diagram');\n    getTotalExpense();\n    initialRender();\n    // Initialize pie chart and grid\n    pie = new ej.charts.AccumulationChart({\n        enableSmartLabels: true, width: '100%', height: '350px', series: getSeries(),\n        legendSettings: { visible: true }, textRender: function (args) {\n            args.series.dataLabel.font.size = '13px';\n            pie.animateSeries = true; if (args.text.indexOf('Others') > -1) { args.text = 'Others'; }\n        },\n    });\n    pie.appendTo('#pieChart');\n    createLegendData('pie');\n    grid = new ej.grids.Grid({\n        width: '40%', dataSource: pieRenderData, rowTemplate: '#rowtemplate',\n        columns: [{ width: '10%', textAlign: 'Center' },\n        { width: '50%' },\n        { width: '20%' },\n        { width: '20%' }],\n    });\n    grid.appendTo('#grid');\n\n    // Initialize date range picker\n    dateRangePickerObject = new ej.calendars.DateRangePicker({\n        format: 'MM/dd/yyyy', change: onDateRangeChange, startDate: window.startDate,\n        min: new Date(2017, 5, 1), max: new Date(2017, 10, 30),\n        endDate: window.endDate, showClearButton: false, allowEdit: false,\n        presets: [\n            { label: 'Last Month', start: new Date('10/1/2017'), end: new Date('10/31/2017') },\n            { label: 'Last 3 Months', start: new Date('9/1/2017'), end: new Date('11/30/2017') },\n            { label: 'All Time', start: new Date('6/1/2017'), end: new Date('11/30/2017') }\n        ]\n    });\n    dateRangePickerObject.appendTo('#daterange');\n    window.startDate = dateRangePickerObject.startDate;\n    window.endDate = dateRangePickerObject.endDate;\n    \n\n//Function to get series data for the pie chart\nfunction getSeries() {\n    var series = [\n        {\n            dataSource: pieRenderingData, xName: 'text', yName: 'y', radius: '83%', startAngle: 0, endAngle: 360,\n            innerRadius: '50%', dataLabel: {\n                name: 'x', visible: true, position: 'Outside', connectorStyle: { length: '10%' },\n                font: { color: 'Black', size: '14px', fontFamily: 'Roboto' }\n            },\n            animation: { enable: false },\n            palettes: ['#61EFCD', '#CDDE1F', '#FEC200', '#CA765A', '#2485FA', '#F57D7D', '#C152D2',\n                '#8854D9', '#3D4EB8', '#00BCD7']\n        }\n    ];\n    return series;\n}\n\n// Function to handle date range change\nfunction onDateRangeChange(args) {\n    window.startDate = args.startDate;\n    window.endDate = args.endDate;\n    predicateStart = new ej.data.Predicate('DateTime', 'greaterthanorequal', args.startDate);\n    predicateEnd = new ej.data.Predicate('DateTime', 'lessthanorequal', args.endDate);\n    predicate = predicateStart.and(predicateEnd);\n    initialRender();\n    getTotalExpense();\n    pie.series = getSeries();\n    pie.dataBind();\n    pie.refresh();\n    createLegendData('pieUpdate');\n    grid.dataSource = pieRenderData;\n    grid.dataBind();\n    grid.refresh();\n}\nfunction initialRender() {\n    //DataManager is a class provided by Syncfusion's Essential JS 2 library for data operations.\n    new ej.data.DataManager(window.expenseData)\n        .executeQuery(new ej.data.Query().where(predicate.and('TransactionType', 'equal', 'Expense')))\n        .then(function (e) {\n            getColumnChartExpenseDS(e);\n        });\n    new ej.data.DataManager(window.expenseData)\n        .executeQuery(new ej.data.Query().where(predicate.and('TransactionType', 'equal', 'Income')))\n        .then(function (e) {\n            getColumnChartIncomeDS(e);\n            columnChartObj = new ej.charts.Chart({\n                width: '100%', height: '400px',\n                primaryXAxis: { labelFormat: 'MMM', valueType: 'DateTime', intervalType: 'Months', edgeLabelPlacement: 'Shift' },\n                primaryYAxis: { minimum: 3000, maximum: 9000, labelFormat: 'c0' },\n                useGroupingSeparator: true,\n                series: [{\n                    type: 'Column', dataSource: columnIncomeDS, xName: 'DateTime', width: 2, yName: 'Amount',\n                    name: 'Income', legendShape: 'Circle', marker: { visible: true, height: 10, width: 10 },\n                    border: { width: 0.5, color: '#A16EE5' },\n                    fill: '#A16EE5', animation: { enable: false },\n                },\n                {\n                    type: 'Column', legendShape: 'Circle', name: 'Expense', dataSource: columnExpenseDS, xName: 'DateTime',\n                    width: 2, yName: 'Amount', marker: { visible: true, height: 10, width: 10 }, fill: '#4472C4',\n                    animation: { enable: false },\n                },\n                ],\n                annotations: [{\n                    content: '<p style=\"font-family:Roboto;font-size: 16px;font-weight: 400;font-weight: 400;letter-spacing: 0.02em;line-height: 16px;color: #797979 !important;\">Income - Expense</p>',\n                    x: '75px', y: '9%', coordinateUnits: 'Pixel', region: 'Chart'\n                }],\n                margin: { top: 90 },\n                legendSettings: { visible: true },\n                titleStyle: { textAlignment: 'Near', fontWeight: '500', size: '16', color: '#000' },\n                tooltip: { fill: '#707070', enable: true, shared: true, format: '${series.name} : ${point.y}', header: 'Month - ${point.x} ', }\n            });\n            columnChartObj.appendTo('#barChart');\n            var content = '<p style=\"font-family:Roboto;font-size: 16px;font-weight: 400;font-weight: 400;letter-spacing: 0.02em;line-height: 16px;color: #797979 !important;\">Account - Balance</p>';\n            getLineChartDS();\n            linechartObj = new ej.charts.Chart({\n                width: '100%', height: '400px',\n                primaryXAxis: { valueType: 'DateTime', labelFormat: 'MMM', majorGridLines: { width: 0 }, intervalType: 'Months' },\n                primaryYAxis: { maximum: 1800, interval: 300, labelFormat: 'c0', },\n                useGroupingSeparator: true,\n                chartArea: { border: { width: 0 } },\n                annotations: [{ content: content, x: '75px', y: '9%', coordinateUnits: 'Pixel', region: 'Chart' }],\n                titleStyle: {\n                    textAlignment: 'Near', fontWeight: '500', size: '16', color: '#000'\n                },\n                series: [{\n                    type: 'Area', dataSource: lineDS, xName: 'DateTime', width: 2, marker: {\n                        visible: true, width: 10, height: 10,\n                        fill: 'white', border: { width: 2, color: '#0470D8' },\n                    }, yName: 'Amount', name: 'Amount', fill: 'rgba(4, 112, 216, 0.3)',\n                    border: { width: 0.5, color: '#0470D8' }\n                },\n                ],\n                margin: { top: 90 }, tooltip: {\n                    fill: '#707070', enable: true, shared: true, format: '${series.name} : ${point.y}',\n                    header: 'Month - ${point.x} '\n                }\n            });\n            linechartObj.appendTo('#lineChart');\n        });\n}\n\n// Function to calculate total expenses and prepare data for pie chart rendering\nfunction getTotalExpense() {\n    //Calculate total expense\n    expTotal = 0;\n    //This array will store unique expense categories extracted from the data.\n    category = [];\n    //This array will store the expense data for each category.\n    legendData = [];\n    //This array will store data in a format suitable for rendering the pie chart.\n    var renderingData = [];\n    // Iterate through each expense item in the data\n    tempData.forEach(function (item) {\n        if (item.TransactionType === 'Expense' && window.startDate.valueOf() <= item.DateTime.valueOf() && window.endDate.valueOf() >= item.DateTime.valueOf()) {\n            expTotal += Number(item.Amount);\n            legendData.push(item);\n            if (category.indexOf(item.Category) < 0) {\n                category.push(item.Category);\n            }\n        }\n    });\n    // Iterate through each unique expense category\n    category.forEach(function (str) {\n        var total = 0;\n        legendData.forEach(function (item) {\n            if (str === item.Category) {\n                total += Number(item.Amount);\n            }\n        });\n        var percent = ((total / expTotal) * 100).toFixed(2) + '%';\n        renderingData.push({ x: str, y: total, text: percent });\n    });\n    pieRenderingData = new ej.data.DataManager(JSON.parse(JSON.stringify(renderingData))).executeLocal((new ej.data.Query().sortByDesc('y')));\n    if (pieRenderingData.length > 10) {\n        var temp = new ej.data.DataManager(JSON.parse(JSON.stringify(renderingData))).executeLocal((new ej.data.Query().sortByDesc('y').range(0, 9)))[8];\n        groupValue = temp.y - 1;\n        hiGridData = new ej.data.DataManager(JSON.parse(JSON.stringify(renderingData))).executeLocal((new ej.data.Query().sortByDesc('y').skip(9)));\n    }\n}\n// Function to get data for column chart (expense) ( bar & line chart)\nfunction getColumnChartExpenseDS(e) {\n    columnExpenseDS = [];\n    tempChartExpenseDS = [];\n    var result = objectAssign(e);\n    for (var i = 0; i < result.length - 1; i++) {\n        var cur = result[i];\n        if (cur.DateTime.getMonth() in tempChartExpenseDS) {\n            curDateTime = tempChartExpenseDS[cur.DateTime.getMonth()];\n            tempChartExpenseDS[cur.DateTime.getMonth()].Amount = parseInt(curDateTime.Amount, 0) + parseInt(cur.Amount, 0);\n        } else {\n            tempChartExpenseDS[cur.DateTime.getMonth()] = cur;\n            tempChartExpenseDS[cur.DateTime.getMonth()].DateTime = new Date(new Date(tempChartExpenseDS[cur.DateTime.getMonth()].DateTime.setHours(0, 0, 0, 0)).setDate(1));\n        }\n    }\n    for (var data in tempChartExpenseDS) {\n        columnExpenseDS.push(tempChartExpenseDS[data]);\n    }\n}\n\n// Function to get data for column chart (income)( bar & line chart)\nfunction getColumnChartIncomeDS(e) {\n    columnIncomeDS = [];\n    tempChartIncomeDS = [];\n    var result = objectAssign(e);\n    for (var i = 0; i < result.length - 1; i++) {\n        var cur = result[i];\n        if (cur.DateTime.getMonth() in tempChartIncomeDS) {\n            curDateTime = tempChartIncomeDS[cur.DateTime.getMonth()];\n            tempChartIncomeDS[cur.DateTime.getMonth()].Amount = parseInt(curDateTime.Amount, 0) + parseInt(cur.Amount, 0);\n        } else {\n            tempChartIncomeDS[cur.DateTime.getMonth()] = cur;\n            tempChartIncomeDS[cur.DateTime.getMonth()].DateTime = new Date(new Date(tempChartIncomeDS[cur.DateTime.getMonth()].DateTime.setHours(0, 0, 0, 0)).setDate(1));\n        }\n    }\n    for (var data in tempChartIncomeDS) {\n        columnIncomeDS.push(tempChartIncomeDS[data]);\n    }\n}\n\n// Function to combine objects and arrays\nfunction objectAssign(e) {\n    var result = [];\n    var obj;\n    obj = ej.base.extend(obj, e.result, {}, true);\n    for (var data = 0; data <= Object.keys(e.result).length; data++) {\n        result.push(obj[data]);\n    }\n    return result;\n}\n\n// Function to prepare data for the line chart\nfunction getLineChartDS() {\n    lineD = [];\n    lineDS = [];\n    tempChartLineDS = [];\n    tempChartLineDS = columnIncomeDS.concat(columnExpenseDS);\n    for (var i = 0; i < tempChartLineDS.length; i++) {\n        var cur = tempChartLineDS[i];\n        if (cur.DateTime.getMonth() in lineD) {\n            curDateTime = lineD[cur.DateTime.getMonth()];\n            lineD[cur.DateTime.getMonth()].Amount = Math.abs((parseInt(curDateTime.Amount, 0) - parseInt(cur.Amount, 0)));\n        } else {\n            lineD[cur.DateTime.getMonth()] = cur;\n        }\n    }\n    for (var data = 0; data <= lineD.length; data++) {\n        if (lineD[data]) {\n            lineDS.push(lineD[data]);\n        }\n    }\n}\n\n// Function to create legend data for the pie chart (% value in pie chart)\nfunction createLegendData(initiate) {\n    if (pieRenderingData.length > 10) {\n        pie.series[0].groupTo = groupValue.toString();\n        pie.dataBind();\n        pie.refresh();\n    }\n    if (initiate === 'pieUpdate' || pieLegendData.length === 0) {\n        pieLegendData = [];\n        pieLegendData = pie.visibleSeries[0].points;\n    }\n    pie.legendSettings.visible = false;\n    pie.dataBind();\n    pieRenderData = [];\n    for (var i = 0; i < pieLegendData.length; i++) {\n        var data = pieLegendData[i];\n        if (data.text.indexOf('Others') > -1) {\n            data.x = ((data.y / expTotal) * 100).toFixed(2).toString() + '%';\n        }\n        pieRenderData.push(data);\n    }\n}\n"}