{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/diagram-binding-treeview/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/27.1.48/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/27.1.48/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <link href=\"https://ej2.syncfusion.com/demos/src/diagram/styles/diagram-common.css\" rel=\"stylesheet\">\n    <style>\n        #palette-space {\n            border-style: solid;\n            border-color: #f2f2f2;\n        }\n\n        #diagram-space {\n            border-color: #f2f2f2;\n            border-style: solid;\n        }\n\n    </style>\n    <div>\n        <div style=\"width: 100%;height: 50px;margin-bottom: 5px;\">\n            <div style=\"width:70%;float:left\">\n                <button id=\"addButton\">Add Node</button>\n                <button id=\"deleteButton\">Delete Node</button>\n            </div>\n            <div style=\"width:30%;float:right;font-size: 16px;\">\n                <div class=\"col-xs-9 db-col-right db-prop-text-style\" style=\"padding-top: 10px\">\n                    <span style=\"margin-left: 10px;\">Diagram Binding with Treeview</span>\n                </div>\n                <div class=\"col-xs-3 db-col-left\">\n                    <svg height=\"45\" width=\"47\">\n                        <path d=\"M27.573,21.885726 C26.039659,21.885726 24.796639,23.128786 24.796639,24.662178 L24.796639,37.3311 C24.796639,38.864491 26.039659,40.107552 27.573,40.107552 L40.064701,40.107552 C41.598042,40.107552 42.841061,38.864491 42.841061,37.3311 L42.841061,24.662178 C42.841061,23.128786 41.598042,21.885726 40.064701,21.885726 z M3.9060001,2.3436508 C2.9710598,2.3436508 2.2131386,3.1015863 2.2131386,4.0365477 L2.2131386,11.76122 C2.2131386,12.69618 2.9710598,13.454117 3.9060001,13.454117 L11.522699,13.454117 C12.457641,13.454117 13.21556,12.69618 13.21556,11.76122 L13.21556,4.0365477 C13.21556,3.1015863 12.457641,2.3436508 11.522699,2.3436508 z M2.7341995,0 L12.8898,0 C14.399857,0 15.624,1.2241688 15.624,2.7342587 L15.624,12.737741 C15.624,14.247831 14.399857,15.472 12.8898,15.472 L8.75,15.472 8.75,29.653 21.167,29.653 21.167,22.526347 C21.167,20.049711 23.174645,18.042 25.6512,18.042 L42.306801,18.042 C44.783356,18.042 46.791,20.049711 46.791,22.526347 L46.791,38.932653 C46.791,41.40929 44.783356,43.417 42.306801,43.417 L25.6512,43.417 C23.174645,43.417 21.167,41.40929 21.167,38.932653 L21.167,32.403 7.3190002,32.403 C6.5596085,32.403 5.9440002,31.787392 5.9440002,31.028 5.9440002,30.933076 5.953619,30.840399 5.9719353,30.75089 L6,30.641743 6,15.472 2.7341995,15.472 C1.2241421,15.472 0,14.247831 0,12.737741 L0,2.7342587 C0,1.2241688 1.2241421,0 2.7341995,0 z\" fill=\"#FF8FABCA\"></path>\n                    </svg>\n                </div>\n            </div>\n        </div>\n        <div style=\"width: 100%;\">\n            <div id=\"palette-space\" style=\"width:27%;float:left;height: 700px;overflow: hidden;\">\n                <div id=\"tree\" style=\"width:90%;\"></div>\n            </div>\n            <div id=\"diagram-space\" style=\"width:72%;float:right\">\n                <div id=\"diagram\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}/**\n * Default FlowShape sample\n */\nej.diagrams.Diagram.Inject(ej.diagrams.DataBinding, ej.diagrams.HierarchicalTree);\n\n\nvar workingData = window.treeData;\n\nvar index = 1;\n\n\n\n    //Initializes diagram control\n    var diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '700px', snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\n        //Configures data source settings\n        dataSourceSettings: {\n            id: 'Id', parentId: 'ParentId',\n            dataSource: new ej.data.DataManager(window.treeData),\n            doBinding: function (nodeModel, data, diagram) {\n                nodeModel.id = data.Id;\n            }\n        },\n        layout: {\n            type: 'HierarchicalTree', verticalSpacing: 50, horizontalSpacing: 40,\n            enableAnimation: true\n        },\n        //Sets the default values of a node\n        getNodeDefaults: function (node) {\n            node.width = 100;\n            node.height = 40;\n            node.style = { strokeWidth: 1, strokeColor: 'whitesmoke', fill: 'CornflowerBlue' };\n            node.annotations = [{ content: node.data.Name, style: { color: 'white' } }];\n            node.constraints = ej.diagrams.NodeConstraints.Default | ej.diagrams.NodeConstraints.AllowDrop;\n            return node;\n        },\n        //Sets the default values of a Connector.\n        getConnectorDefaults: function (obj) {\n            obj.type = 'Orthogonal';\n            obj.style = { strokeColor: 'CornflowerBlue' };\n            obj.targetDecorator = { shape: 'Arrow', height: 10, width: 10, style: { fill: 'CornflowerBlue', strokeColor: 'white' } };\n        },\n        //Enable or disable the add and delete button.\n        selectionChange: function (args) {\n            if (args.state === 'Changed') {\n                if (args.type === \"Addition\") {\n                    deleteButton.disabled = false;\n                    addButton.disabled = false;\n                } else {\n                    deleteButton.disabled = true;\n                    addButton.disabled = true;\n                }\n                var selectedItems = diagram.selectedItems.nodes.concat(diagram.selectedItems.connectors);\n                if(selectedItems.length==0)\n                {\n                    treeObj.selectedNodes=[];\n                }\n            }\n        },\n        //Click event handler\n        click: function (args) {\n            if(args.element instanceof ej.diagrams.Node){\n            treeObj.selectedNodes = [args.element.data.Id];\n            }\n        },\n        textEdit: textEdit,\n        dragEnter: dragEnter,\n        drop: drop\n\n    });\n    diagram.appendTo('#diagram');\n\n    //Drag a node from the palette into the diagram\n    function dragEnter(args) {\n        var lable = '';\n        if (args.dragData) {\n            lable = args.dragData.text;\n        }\n        var node =\n        {\n            id: 'node' + index,\n            data: { Name: lable, Id: 'node' + index },\n            annotations: [{ content: lable }]\n        };\n        args.dragItem = node;\n    }\n\n    var targetNodeId;\n\n    var elementNodeId;\n\n    //Check data function\n    function checkData(a) {\n        return a.Id === targetNodeId;\n    }\n\n    //Check element data function\n    function checkElementData(a) {\n        return a.Id === elementNodeId;\n    }\n\n    //Drop a node from the palette into the diagram \n    function drop(args) {\n        var connector;\n        var tempData;\n        setTimeout(function () {\n            targetNodeId = args.target.id;\n            tempData = workingData.filter(checkData);\n            if(tempData.length > 0){\n            tempData[0].hasChild = true;\n            tempData[0].expanded = true;\n            }\n            if (args.element.inEdges.length === 0) {\n                var id = args.element.id;\n                var item = {\n                    Name: args.element.annotations[0].content, Id: args.element.id, ParentId: targetNodeId, hasChild: false, expanded: false\n                };\n                treeObj.addNodes([item], targetNodeId, null);\n                connector = { sourceID: targetNodeId, targetID: id };\n                diagram.add(connector);\n                diagram.doLayout();\n                index++;\n                workingData.push(item);\n            } else {\n                connector = diagram.getObject(args.element.inEdges[0]);\n                connector.sourceID = targetNodeId;\n                diagram.dataBind();\n                diagram.doLayout();\n                elementNodeId = args.element.id;\n                tempData = workingData.filter(checkElementData);\n                tempData[0].ParentId = targetNodeId;\n                treeObj.fields = {\n                    dataSource: workingData,\n                    id: 'Id',\n                    text: 'Name',\n                    parentID: 'ParentId',\n                    hasChildren: 'hasChild',\n                };\n                treeObj.refresh();\n            }\n        }, 0);\n\n    }\n\n    //Change the annotation of the node\n    function textEdit(args) {\n        setTimeout(function () {\n            if (args.annotation) {\n                elementNodeId = args.element.id;\n                var tempData = workingData.filter(checkElementData);\n                var node = treeObj.getNode(tempData[0].Id);\n                treeObj.updateNode(tempData[0].Id, args.annotation.content);\n            }\n        }, 0);\n    }\n\n    //Button Initialization\n\n    var addButton = new ej.buttons.Button({ isPrimary: true, disabled: true });\n    addButton.appendTo('#addButton');\n\n    var deleteButton = new ej.buttons.Button({ isPrimary: true, disabled: true });\n    deleteButton.appendTo('#deleteButton');\n\n    //Add button on click\n    document.getElementById('addButton').onclick = function () {\n        add();\n    };\n\n    //Delete button on click\n    document.getElementById('deleteButton').onclick = function () {\n        if (diagram.selectedItems.nodes[0].data.Id !== \"1\") {\n            remove();\n        }\n    };\n\n    //Treeview Initialization\n    var treeObj = new ej.navigations.TreeView({\n        fields: {\n            dataSource: workingData,\n            id: 'Id',\n            text: 'Name',\n            parentID: 'ParentId',\n            hasChildren: 'hasChild',\n        },\n        allowEditing: true,\n        keyPress: keyPress,\n        nodeEdited: nodeEdited,\n        nodeSelected: nodeSelected,\n        allowDragAndDrop: true,\n        nodeClicked: nodeClicked\n    });\n\n    treeObj.appendTo('#tree');\n\n    //Enable the add and delete button\n    function nodeSelected(args) {\n        deleteButton.disabled = false;\n        addButton.disabled = false;\n    }\n\n    //Node click event\n    function nodeClicked(args) {\n        var node = diagram.getObject(treeObj.selectedNodes[0]);\n        diagram.select([node]);\n    }\n\n    //Key Press Event\n    function keyPress(args) {\n        if (args.event.key === 'Enter') {\n            add();\n        }\n    }\n\n    //Node edited event\n    function nodeEdited(args) {\n        var node = diagram.getObject(args.nodeData.id);\n        node.annotations[0].content = args.newText;\n        treeObj.selectedNodes = [args.nodeData.id];\n    }\n\n    //Remove node\n    function remove() {\n        var nodeId;\n        if (diagram.selectedItems.nodes.length > 0) {\n            nodeId = diagram.selectedItems.nodes[0].id;\n            removeSubChild(diagram.selectedItems.nodes[0], true);\n            diagram.doLayout();\n        } else if (treeObj.selectedNodes.length > 0) {\n            nodeId = treeObj.selectedNodes[0];\n            treeObj.removeNodes([nodeId]);\n            var node = diagram.getObject(nodeId);\n            removeSubChild(node, false);\n        }\n        for (var i = workingData.length - 1; i >= 0; i--) {\n            if (workingData[i].id === nodeId) {\n                workingData.splice(i, 1);\n            }\n        }\n        diagram.doLayout();\n\n    }\n\n    //Remove sub child node\n    function removeSubChild(node, canDelete) {\n        var childNode;\n        var connector;\n        for (var i = node.outEdges.length - 1; i >= 0; i--) {\n            connector = diagram.getObject(node.outEdges[i]);\n            childNode = diagram.getObject(connector.targetID);\n            if (childNode != null && childNode.outEdges.length > 0) {\n                removeSubChild(childNode, canDelete);\n            }\n            else {\n                diagram.remove(childNode);\n                if (canDelete) {\n                    treeObj.removeNodes([childNode.id]);\n                }\n                for (var j = workingData.length - 1; j >= 0; j--) {\n                    if (workingData[j].id === childNode.id) {\n                        workingData.splice(j, 1);\n                    }\n                }\n            }\n        }\n        for (var k = node.inEdges.length - 1; k >= 0; k--) {\n            connector = diagram.getObject(node.inEdges[k]);\n            childNode = diagram.getObject(connector.sourceID);\n            var index = childNode.outEdges.indexOf(connector.id);\n            if (childNode.outEdges.length > 1 && index === 0) {\n                index = childNode.outEdges.length;\n            }\n            if (index > 0) {\n                var node1 = childNode.outEdges[index - 1];\n                var connector1 = diagram.getObject(node1);\n                var node2 = diagram.getObject(connector1.targetID);\n                diagram.select([node2]);\n            }\n            else {\n                diagram.select([childNode]);\n            }\n        }\n        diagram.remove(node);\n        if (canDelete) {\n            treeObj.removeNodes([node.id]);\n        }\n        for (var t = workingData.length - 1; t >= 0; t--) {\n            if (workingData[t].id === node.id) {\n                workingData.splice(t, 1);\n            }\n        }\n    }\n\n    //Add function\n    function add() {\n        var nodeId;\n        if (diagram.selectedItems.nodes.length > 0) {\n            nodeId = diagram.selectedItems.nodes[0].id;\n            addNode(nodeId);\n        } else if (treeObj.selectedNodes.length > 0) {\n            nodeId = treeObj.selectedNodes[0];\n            addNode(nodeId);\n        }\n    }\n\n    //filter Node Data Function\n    function filterNodeData(a) {\n        return a.data.Id === targetNodeId;\n    }\n\n    //Add node Function\n    function addNode(nodeId) {\n        targetNodeId = nodeId ? nodeId : treeObj.selectedNodes[0];\n        var tempData = workingData.filter(checkData);\n        tempData[0].hasChild = true;\n        tempData[0].expanded = true;\n        var id = 'tree_' + index;\n        var item = {\n            Name: \"Node\", Id: id, ParentId: targetNodeId, hasChild: false, expanded: false\n        };\n        treeObj.addNodes([item], targetNodeId, null);\n        treeObj.beginEdit(id);\n        var node = { id: id, data: item };\n        var targetId;\n        if (diagram.selectedItems.nodes.length > 0) {\n            targetId = diagram.selectedItems.nodes[0].id;\n        } else {\n            var temp = diagram.nodes.filter(filterNodeData);\n            targetId = temp[0].id;\n        }\n        var connector = { sourceID: targetId, targetID: id };\n        diagram.add(node);\n        diagram.add(connector);\n        diagram.doLayout();\n        index++;\n        workingData.push(item);\n    }\n\n"}